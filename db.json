{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1630047269238},{"_id":"source/_posts/2020-01-18-web-refactoring-1.md","hash":"16a51ad80e65d32650e621254206d8f4db8e0524","modified":1630057592172},{"_id":"source/_posts/2020-03-22-about-agility-dev.md","hash":"6b72a737629abd55e94b8264be453698111c75c5","modified":1630057594302},{"_id":"source/_posts/2019-03-26-yqy-git-standard.md","hash":"13e9bbe2f92db187acd394b09ec564a0b342f530","modified":1630115163392},{"_id":"source/_posts/2021-08-01-console-js-debug.md","hash":"fd1acdce216332f017752227e2499c0f9f1d50fa","modified":1630058692163},{"_id":"source/_posts/2021-08-27-mac-gitkraken-tutorial.md","hash":"ff0ec894b1601a54b52d20b095def2a772c2bbae","modified":1630049280888},{"_id":"source/message-board/index.md","hash":"7ff394c2bc3d592b3e9c0fd5f93830a152df016b","modified":1630057058936},{"_id":"source/about/index.md","hash":"d92a47a207c65721d1bd0f5aa2ed0a06ec7efba9","modified":1630056984632},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"09b5bc95bad9abd33902780d510f99120f3e8d54","modified":1630044168904},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":499162500000},{"_id":"public/api/posts/1.json","hash":"fe21b18babb39690b31bd9fb6f7eb59d5b3d0145","modified":1630115361711},{"_id":"public/api/articles/2021-08-27-mac-gitkraken-tutorial.json","hash":"4bd06a96ea815457f990e7d4d07fff7d82696616","modified":1630115361711},{"_id":"public/api/articles/2021-08-01-console-js-debug.json","hash":"1755e3b2c42d9bec6d9ab9b7817d32aefa8ff61c","modified":1630115361711},{"_id":"public/api/articles/2020-03-22-about-agility-dev.json","hash":"f787362dcbe640a9f4b5fcb09a20dd85e23bc514","modified":1630115361711},{"_id":"public/api/articles/2020-01-18-web-refactoring-1.json","hash":"beb4e7d512f497403d33431b9c71f86f5f78b564","modified":1630115361711},{"_id":"public/api/articles/2019-03-26-yqy-git-standard.json","hash":"4cc0d66069bfc9eda5b6d23c82ab5c685cb9431c","modified":1630115361711},{"_id":"public/api/features.json","hash":"b769398f99fb57748a00de73ca8720e8cba13299","modified":1630115361711},{"_id":"public/api/authors/blog-author.json","hash":"c6843f5a2df0b196c38a61000be08deb3a862b5d","modified":1630115361711},{"_id":"public/api/site.json","hash":"a2b63faa9afaf4b088440f7ac7a05e8479e25ecf","modified":1630115457367},{"_id":"public/api/categories.json","hash":"eaca13e56676e29093212268a49982dd5a3e95a3","modified":1630114332019},{"_id":"public/api/categories/开发技巧.json","hash":"5e6944a12b31214b1efb6e675e9d3cea18131a49","modified":1630115361711},{"_id":"public/api/categories/前端优化.json","hash":"2a037d43e5b822e893a1fcd1973d167f112fb4ee","modified":1630115361711},{"_id":"public/api/categories/调试.json","hash":"f8150c5c0d893dbdd8b72a8a319a894d3d600e49","modified":1630115361711},{"_id":"public/api/tags.json","hash":"1cc4e35d124829b052e4921b794e744efcc639c9","modified":1630114332019},{"_id":"public/api/tags/agile.json","hash":"527586ee54fae61d6fbf81070fe3f733b5476e27","modified":1630115361711},{"_id":"public/api/tags/css.json","hash":"bdc1ba1c1e373c2eb1e82d71e040488f3f54b7ef","modified":1630115361711},{"_id":"public/api/tags/javaScript.json","hash":"d204d5013890808d759a0b08c8819a2e30df3092","modified":1630115361711},{"_id":"public/api/tags/html.json","hash":"d011dd0dd1ec731c4d38d3511fb1644dfdf3e335","modified":1630115361711},{"_id":"public/api/tags/vue-js.json","hash":"42575628309c1b7f53a33619bb941e3f4f7c86f5","modified":1630115361711},{"_id":"public/api/tags/elementui.json","hash":"eb399e87e938310a6a185fb8c639ac2af5227e5b","modified":1630115361711},{"_id":"public/api/tags/git.json","hash":"dd8fcf418d7c332a83951656269a19d469bc3068","modified":1630115361711},{"_id":"public/api/tags/gitkraken.json","hash":"b63057e0f40cbde8accca957e938db9f00acb9c4","modified":1630115361711},{"_id":"public/api/tags/console.json","hash":"c0bb4b299d05832384ff36eea40b3c2fe870686c","modified":1630115361711},{"_id":"public/api/pages/about/index.json","hash":"a113a4051ca95457e7c1245ee5dc05e72809d360","modified":1630114332019},{"_id":"public/api/pages/message-board/index.json","hash":"9386c141b9bb845b0259c7c562d84fd01411f751","modified":1630114332019},{"_id":"public/api/statistic.json","hash":"2ef7a7950dcc9fb3f92f805c5ff851b94e992021","modified":1630114332019},{"_id":"public/api/search.json","hash":"9781886ec2e58df7b8c01b9dc1f96f4b26f46ed4","modified":1630114332019},{"_id":"public/post/2021-08-27-mac-gitkraken-tutorial.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/post/2021-08-01-console-js-debug.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/post/2020-03-22-about-agility-dev.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/post/2020-01-18-web-refactoring-1.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/post/2019-03-26-yqy-git-standard.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/index.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/tags/index.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/archives/index.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/page/about/index.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/page/message-board/index.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/tags/search/index.html","hash":"9cfc24dce5bbf397c5895fda91010de4e211db79","modified":1630115361711},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1630114332019},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1630114332019},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1630114332019},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1630114332019},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1630114332019},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1630114332019},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1630114332019},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1630114332019},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1630114332019},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1630114332019},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1630114332019},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1630114332019},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1630114332019},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1630114332019},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1630114332019},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1630114332019},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1630114332019},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1630114332019},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1630114332019},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1630114332019},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1630114332019},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1630114332019},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1630114332019},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1630114332019}],"Category":[{"name":"开发技巧","_id":"cksv3zgrl00040c9kdva41i0y"},{"name":"前端优化","_id":"cksv3zgrp00090c9kec9i416h"},{"name":"调试","_id":"cksv3zgrq000d0c9k2lse7478"}],"Data":[],"Page":[{"title":"WHOAMI","date":"2019-03-25T04:00:00.000Z","top_img":"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/DxMfhT.jpg","_content":"\n## <font color=\"#24c6dc\">Who am I</font>\n\nWelcome to my blog, I am <font color=\"#7aa2f7\">NetEngine</font>\nFrom a focus on front-end development to a love of Vue, React and hybrid APP development.\n\nPursue perfection and perfection, like an efficient, elegant and cohesive team,\nDetermined to create the best products and become an elegant and in-depth technical talent.\n\nLove outdoor travel and accept challenges, like to play the game of King glory and Yin Yang division, balance life and work, and have a sense of rhythm.\n\n欢迎来到我的博客, 我是 <font color=\"#7aa2f7\">络擎 (NetEngine)</font> ,\n从专注于 前端 开发到爱上钻研 Vue，React 和混合 APP 开发，\n\n追求极致, 追求完美, 喜欢一个高效, 优雅, 高凝聚力的团队,\n立志于打造最优秀的产品, 成为一名既优雅而有深度的技术人才。\n\n热爱户外旅游和接受挑战，喜欢玩王者荣耀与阴阳师游戏，生活和工作平衡，有节奏感的人生。\n***\n## <font color=\"#24c6dc\">Open Sources</font>\n- vuejs-countdown-timer 一 Vue 2 活动倒计时组件\n- vuejs-scroll-fixed-header 一 Vue 2 滑动固定头部组件\n- vue-photoswipe 一 A Vue Integrated PhotoSwipe Image Preview Plugin\n- vuejs-sticky-directive 一 支持头部和底部 sticky 的功能, 使用的是原生 js 和 vue 的 directive 实现\n- captcha-lumen5 一 Lumen5 的验证码包\n***\n## <font color=\"#24c6dc\">Dev Gears</font>\n- 硬件：[MackBook Pro](https://www.apple.com.cn) 15 寸\n- 系统：Mac 版本 11.5 以上\n- 编辑器：[Visual Studio Code](https://code.visualstudio.com)\n- 命令行工具：[iTerm2 (Mac)](https://iterm2.com)\n- 浏览器：[Chrome](https://google.cn/chrome)\n- 虚拟机：[VirtualBox](https://www.virtualbox.org)\n- Markdown 编写工具：[Typora](https://www.typora.io)\n***","source":"about/index.md","raw":"---\ntitle: WHOAMI\ndate: 2019-03-25 12:00:00\ntop_img: https://cdn.jsdelivr.net/gh/hehuixiong/image-host/DxMfhT.jpg\n---\n\n## <font color=\"#24c6dc\">Who am I</font>\n\nWelcome to my blog, I am <font color=\"#7aa2f7\">NetEngine</font>\nFrom a focus on front-end development to a love of Vue, React and hybrid APP development.\n\nPursue perfection and perfection, like an efficient, elegant and cohesive team,\nDetermined to create the best products and become an elegant and in-depth technical talent.\n\nLove outdoor travel and accept challenges, like to play the game of King glory and Yin Yang division, balance life and work, and have a sense of rhythm.\n\n欢迎来到我的博客, 我是 <font color=\"#7aa2f7\">络擎 (NetEngine)</font> ,\n从专注于 前端 开发到爱上钻研 Vue，React 和混合 APP 开发，\n\n追求极致, 追求完美, 喜欢一个高效, 优雅, 高凝聚力的团队,\n立志于打造最优秀的产品, 成为一名既优雅而有深度的技术人才。\n\n热爱户外旅游和接受挑战，喜欢玩王者荣耀与阴阳师游戏，生活和工作平衡，有节奏感的人生。\n***\n## <font color=\"#24c6dc\">Open Sources</font>\n- vuejs-countdown-timer 一 Vue 2 活动倒计时组件\n- vuejs-scroll-fixed-header 一 Vue 2 滑动固定头部组件\n- vue-photoswipe 一 A Vue Integrated PhotoSwipe Image Preview Plugin\n- vuejs-sticky-directive 一 支持头部和底部 sticky 的功能, 使用的是原生 js 和 vue 的 directive 实现\n- captcha-lumen5 一 Lumen5 的验证码包\n***\n## <font color=\"#24c6dc\">Dev Gears</font>\n- 硬件：[MackBook Pro](https://www.apple.com.cn) 15 寸\n- 系统：Mac 版本 11.5 以上\n- 编辑器：[Visual Studio Code](https://code.visualstudio.com)\n- 命令行工具：[iTerm2 (Mac)](https://iterm2.com)\n- 浏览器：[Chrome](https://google.cn/chrome)\n- 虚拟机：[VirtualBox](https://www.virtualbox.org)\n- Markdown 编写工具：[Typora](https://www.typora.io)\n***","updated":"2021-08-27T09:36:24.632Z","path":"about/index.html","comments":1,"layout":"page","_id":"cksv3zgrd00000c9kdlaz4xnr","content":"<h2 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"Who am I\"></a><font color=\"#24c6dc\">Who am I</font></h2><p>Welcome to my blog, I am <font color=\"#7aa2f7\">NetEngine</font><br>From a focus on front-end development to a love of Vue, React and hybrid APP development.</p>\n<p>Pursue perfection and perfection, like an efficient, elegant and cohesive team,<br>Determined to create the best products and become an elegant and in-depth technical talent.</p>\n<p>Love outdoor travel and accept challenges, like to play the game of King glory and Yin Yang division, balance life and work, and have a sense of rhythm.</p>\n<p>欢迎来到我的博客, 我是 <font color=\"#7aa2f7\">络擎 (NetEngine)</font> ,<br>从专注于 前端 开发到爱上钻研 Vue，React 和混合 APP 开发，</p>\n<p>追求极致, 追求完美, 喜欢一个高效, 优雅, 高凝聚力的团队,<br>立志于打造最优秀的产品, 成为一名既优雅而有深度的技术人才。</p>\n<p>热爱户外旅游和接受挑战，喜欢玩王者荣耀与阴阳师游戏，生活和工作平衡，有节奏感的人生。</p>\n<hr>\n<h2 id=\"Open-Sources\"><a href=\"#Open-Sources\" class=\"headerlink\" title=\"Open Sources\"></a><font color=\"#24c6dc\">Open Sources</font></h2><ul>\n<li>vuejs-countdown-timer 一 Vue 2 活动倒计时组件</li>\n<li>vuejs-scroll-fixed-header 一 Vue 2 滑动固定头部组件</li>\n<li>vue-photoswipe 一 A Vue Integrated PhotoSwipe Image Preview Plugin</li>\n<li>vuejs-sticky-directive 一 支持头部和底部 sticky 的功能, 使用的是原生 js 和 vue 的 directive 实现</li>\n<li>captcha-lumen5 一 Lumen5 的验证码包</li>\n</ul>\n<hr>\n<h2 id=\"Dev-Gears\"><a href=\"#Dev-Gears\" class=\"headerlink\" title=\"Dev Gears\"></a><font color=\"#24c6dc\">Dev Gears</font></h2><ul>\n<li>硬件：<a href=\"https://www.apple.com.cn/\">MackBook Pro</a> 15 寸</li>\n<li>系统：Mac 版本 11.5 以上</li>\n<li>编辑器：<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></li>\n<li>命令行工具：<a href=\"https://iterm2.com/\">iTerm2 (Mac)</a></li>\n<li>浏览器：<a href=\"https://google.cn/chrome\">Chrome</a></li>\n<li>虚拟机：<a href=\"https://www.virtualbox.org/\">VirtualBox</a></li>\n<li>Markdown 编写工具：<a href=\"https://www.typora.io/\">Typora</a></li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"Who am I\"></a><font color=\"#24c6dc\">Who am I</font></h2><p>Welcome to my blog, I am <font color=\"#7aa2f7\">NetEngine</font><br>From a focus on front-end development to a love of Vue, React and hybrid APP development.</p>\n<p>Pursue perfection and perfection, like an efficient, elegant and cohesive team,<br>Determined to create the best products and become an elegant and in-depth technical talent.</p>\n<p>Love outdoor travel and accept challenges, like to play the game of King glory and Yin Yang division, balance life and work, and have a sense of rhythm.</p>\n<p>欢迎来到我的博客, 我是 <font color=\"#7aa2f7\">络擎 (NetEngine)</font> ,<br>从专注于 前端 开发到爱上钻研 Vue，React 和混合 APP 开发，</p>\n<p>追求极致, 追求完美, 喜欢一个高效, 优雅, 高凝聚力的团队,<br>立志于打造最优秀的产品, 成为一名既优雅而有深度的技术人才。</p>\n<p>热爱户外旅游和接受挑战，喜欢玩王者荣耀与阴阳师游戏，生活和工作平衡，有节奏感的人生。</p>\n<hr>\n<h2 id=\"Open-Sources\"><a href=\"#Open-Sources\" class=\"headerlink\" title=\"Open Sources\"></a><font color=\"#24c6dc\">Open Sources</font></h2><ul>\n<li>vuejs-countdown-timer 一 Vue 2 活动倒计时组件</li>\n<li>vuejs-scroll-fixed-header 一 Vue 2 滑动固定头部组件</li>\n<li>vue-photoswipe 一 A Vue Integrated PhotoSwipe Image Preview Plugin</li>\n<li>vuejs-sticky-directive 一 支持头部和底部 sticky 的功能, 使用的是原生 js 和 vue 的 directive 实现</li>\n<li>captcha-lumen5 一 Lumen5 的验证码包</li>\n</ul>\n<hr>\n<h2 id=\"Dev-Gears\"><a href=\"#Dev-Gears\" class=\"headerlink\" title=\"Dev Gears\"></a><font color=\"#24c6dc\">Dev Gears</font></h2><ul>\n<li>硬件：<a href=\"https://www.apple.com.cn/\">MackBook Pro</a> 15 寸</li>\n<li>系统：Mac 版本 11.5 以上</li>\n<li>编辑器：<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></li>\n<li>命令行工具：<a href=\"https://iterm2.com/\">iTerm2 (Mac)</a></li>\n<li>浏览器：<a href=\"https://google.cn/chrome\">Chrome</a></li>\n<li>虚拟机：<a href=\"https://www.virtualbox.org/\">VirtualBox</a></li>\n<li>Markdown 编写工具：<a href=\"https://www.typora.io/\">Typora</a></li>\n</ul>\n<hr>\n"},{"title":"message-board","date":"2021-08-27T06:26:47.000Z","_content":"\n这里是一个留言板。","source":"message-board/index.md","raw":"---\ntitle: message-board\ndate: 2021-08-27 14:26:47\n---\n\n这里是一个留言板。","updated":"2021-08-27T09:37:38.936Z","path":"message-board/index.html","comments":1,"layout":"page","_id":"cksv3zgrj00020c9k72dfgjsc","content":"<p>这里是一个留言板。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里是一个留言板。</p>\n"}],"Post":[{"title":"谈谈敏捷开发","date":"2020-03-22T04:07:43.000Z","cover":"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/article/agility.jpeg","_content":"\n1. [谈谈敏捷开发](#谈谈敏捷开发)\n1. [小步快跑、敏捷开发](#小步快跑、敏捷开发)\n2. [真实的敏捷开发](#真实的敏捷开发)\n3. [后注](#后注)\n\n# 谈谈敏捷开发\n\n好久没有更新一下博客，最近有在尝试新的领域，可是一直没能积累下什么重要的知识、或者形成了什么重要的知识体系，就没能写下什么有意义的记录。可是很偶然的机会看到一个视频，里面讲述的，乔布斯谈论关于【流程与人才】的理解，基本可以总结为：苹果没有像 IBM 一样衰落，很大一部分原因是苹果没有执行像 IBM 一样严格的流程管理，使得有能力、有才华的人才能够不受大公司中条条框框的约束，充分发挥自己优势，最终促使苹果一次又一次的震惊世界。\n\n看到这个视频的时候，脑子中转过了好多好多的话语，没能按耐住自己的情绪，终究还是在 Twitter 中直接开喷。当然，喷的并不是乔布斯或者是他的言论，**乔帮主**在国内一波又一波媒体、开发者的吹捧下，早就已经走上了“冰封王座”。他的一生、创办苹果的风风雨雨，相信拜读过《乔布斯传》的人都能已经耳熟能详了，这里不再细说。总而言之，对于笔者自身，远远还达不到批判他的言辞的资格。\n\n> 废话说了那么多，结果原来只是像表达自己的弱小\n\n乔布斯确实过于优秀了，以至于越来越多的年轻人、创业者，都想要向他学习，见贤思齐焉。而学习最简单不过的方式，就是模仿。现在越来越容易听到那些晦涩难懂，可是由显得高端深奥的词汇。似乎在这种谈吐中更容易体现出自身对于产品思考的深入。\n\n“把握用户体验”，“重新定义 XX”，甚至 “打破流程”。“ IBM 之所以没落，就是因为他大公司中繁重的流程，约束的条条框框。” 所以我们要注重人才的才华展示，淡化流程。乔布斯所表达的观点，我们全盘接受。\n\n这样子的学习，简单至极。\n\n**流程不再重要了。**—— 这就是为什么现在产品经理跟开发工程师之间存在如此对立的原因。\n\n当然，其实乔布斯并非推动国内各大企业打破传统、废除流程的唯一功臣，另外一个更广为人知的，当然是数早已被广为人知的、被誉为中国第一产品经理的 —— 张小龙。如果你不知道这个人的话，你可以点击 (Ctrl+W) 组合键，快速查询这个人的相关信息。^_^ 得益于他的知名度以及微信的成功，“打破流程”、“简化流程”、“把握用户体验” 获得了一个更加接地气的名称 —— “**小步快跑，敏捷开发**”。\n\n对比于传统应用开发方式，敏捷开发在当前互联网形式上确为更加合适，毫不夸张的说，如果目前的产品开发还按照从前的开发形式，普通创业公司绝大部分会在产品推出之前，就将所有的开发经费耗光。这个时候没有任何知名度、也没有成型的产品，根本无从谈起融资以及上市。\n\n## 小步快跑、敏捷开发\n\n仔细考虑，其实这种开发方式在起步阶段是比较合理的。一周一个小版本，一个月一个大版本，对每次开发的新功能做好足够的调研以及打点统计，能够在不进行市场调查的前提上获取用户对于功能的喜好程度，从而在后续的开发中对特定的功能进行资源的倾斜，更大程度上去**取悦用户**。\n不得不说，微信在初期发展中，摸索到了**摇一摇**以及**朋友圈**这两大功能，然后持续在上面增加功能，优化体验，让用户真正的粘附在了微信生态上，也算是对小步快跑、敏捷开发的很好体现。微信的成功，也让更多的公司相信这种开发模式的正确性。\n\n我们来仔细捋一下这种开发模式的要点：\n\n1. 小版本周期短\n2. 小版本所携带新功能有针对性\n3. 开发过程中对新功能做好打点统计\n4. 产品上线后进行需求复盘，通过统计上报，得知用户对于新功能的喜好程度\n5. 对下一新版本的开发计划进行评估\n\n其中，复盘步骤对于敏捷开发的模式尤为重要。并且不仅是产品经理，包括开发人员都需要参与到复盘的步骤中。对于一个开发人员，得知自己所开发功能受到用户的喜爱，自身对于下个版本的开发积极性也会有相应的提高。\n\n## 真实的敏捷开发\n\n可是，有多少公司又能很好地在版本迭代的过程中持续遵循上述的要点呢？不少的公司更多的只是喊着敏捷开发的口号，在更短的时间内，往产品中堆砌着更多的功能，从而导致开发人员在长时间内一直保持着难以接受的开发强度，最终导致人员的流失，项目的失败。\n\n笔者从自身的工作环境中，感受到两点：\n\n- 老板过多地参与进项目开发的细节中\n- 复盘步骤的缺失，或者复盘步骤对于产品经理们的负反馈缺失\n\n笔者对于第一点真是深有体会。其实老板们关注细节无可厚非，可是过多的参与到项目开发中，很容易导致到开发节奏混乱，无法保持小版本迭代的步骤中。因为版本开发迭代期间，并不会频繁地推送到老板处体验，只能在项目上线阶段提交给老板进行上线前的最后体验。正常情况下，老板应该对这个功能开发进行最后的确认，确认这个版本是否与开发初期所定下的发展方向一致，而不应该对细节进行过多的反馈，一来这个环节在开发过程中早就经过产品经理的把控；二来开发人员、乃至于产品经理，都很难对老板所提出的细节要求说不，容易导致项目进度一拖再拖。三来甚至会过度打击产品经理的积极性，最终导致产品经理不再创新，只会揣测老板的心思。\n\n即便是成功至此的微信，笔者感觉它都已经不再是认真遵循着敏捷开发的模式了，大家可以从微信的招聘口号中可以感受一下：\n\n> 做一个伟大的产品来取悦--**自己**。\n\n## 后注\n\n毕竟这片文章只是有感而发，想到哪写到哪，尚未经过深入思考。请读者们轻喷。\n","source":"_posts/2020-03-22-about-agility-dev.md","raw":"---\ntitle: \"谈谈敏捷开发\"\ndate: 2020-03-22 12:07:43\ncover: https://cdn.jsdelivr.net/gh/hehuixiong/image-host/article/agility.jpeg\ncategories:\n  - 开发技巧\ntags:\n  - agile\n---\n\n1. [谈谈敏捷开发](#谈谈敏捷开发)\n1. [小步快跑、敏捷开发](#小步快跑、敏捷开发)\n2. [真实的敏捷开发](#真实的敏捷开发)\n3. [后注](#后注)\n\n# 谈谈敏捷开发\n\n好久没有更新一下博客，最近有在尝试新的领域，可是一直没能积累下什么重要的知识、或者形成了什么重要的知识体系，就没能写下什么有意义的记录。可是很偶然的机会看到一个视频，里面讲述的，乔布斯谈论关于【流程与人才】的理解，基本可以总结为：苹果没有像 IBM 一样衰落，很大一部分原因是苹果没有执行像 IBM 一样严格的流程管理，使得有能力、有才华的人才能够不受大公司中条条框框的约束，充分发挥自己优势，最终促使苹果一次又一次的震惊世界。\n\n看到这个视频的时候，脑子中转过了好多好多的话语，没能按耐住自己的情绪，终究还是在 Twitter 中直接开喷。当然，喷的并不是乔布斯或者是他的言论，**乔帮主**在国内一波又一波媒体、开发者的吹捧下，早就已经走上了“冰封王座”。他的一生、创办苹果的风风雨雨，相信拜读过《乔布斯传》的人都能已经耳熟能详了，这里不再细说。总而言之，对于笔者自身，远远还达不到批判他的言辞的资格。\n\n> 废话说了那么多，结果原来只是像表达自己的弱小\n\n乔布斯确实过于优秀了，以至于越来越多的年轻人、创业者，都想要向他学习，见贤思齐焉。而学习最简单不过的方式，就是模仿。现在越来越容易听到那些晦涩难懂，可是由显得高端深奥的词汇。似乎在这种谈吐中更容易体现出自身对于产品思考的深入。\n\n“把握用户体验”，“重新定义 XX”，甚至 “打破流程”。“ IBM 之所以没落，就是因为他大公司中繁重的流程，约束的条条框框。” 所以我们要注重人才的才华展示，淡化流程。乔布斯所表达的观点，我们全盘接受。\n\n这样子的学习，简单至极。\n\n**流程不再重要了。**—— 这就是为什么现在产品经理跟开发工程师之间存在如此对立的原因。\n\n当然，其实乔布斯并非推动国内各大企业打破传统、废除流程的唯一功臣，另外一个更广为人知的，当然是数早已被广为人知的、被誉为中国第一产品经理的 —— 张小龙。如果你不知道这个人的话，你可以点击 (Ctrl+W) 组合键，快速查询这个人的相关信息。^_^ 得益于他的知名度以及微信的成功，“打破流程”、“简化流程”、“把握用户体验” 获得了一个更加接地气的名称 —— “**小步快跑，敏捷开发**”。\n\n对比于传统应用开发方式，敏捷开发在当前互联网形式上确为更加合适，毫不夸张的说，如果目前的产品开发还按照从前的开发形式，普通创业公司绝大部分会在产品推出之前，就将所有的开发经费耗光。这个时候没有任何知名度、也没有成型的产品，根本无从谈起融资以及上市。\n\n## 小步快跑、敏捷开发\n\n仔细考虑，其实这种开发方式在起步阶段是比较合理的。一周一个小版本，一个月一个大版本，对每次开发的新功能做好足够的调研以及打点统计，能够在不进行市场调查的前提上获取用户对于功能的喜好程度，从而在后续的开发中对特定的功能进行资源的倾斜，更大程度上去**取悦用户**。\n不得不说，微信在初期发展中，摸索到了**摇一摇**以及**朋友圈**这两大功能，然后持续在上面增加功能，优化体验，让用户真正的粘附在了微信生态上，也算是对小步快跑、敏捷开发的很好体现。微信的成功，也让更多的公司相信这种开发模式的正确性。\n\n我们来仔细捋一下这种开发模式的要点：\n\n1. 小版本周期短\n2. 小版本所携带新功能有针对性\n3. 开发过程中对新功能做好打点统计\n4. 产品上线后进行需求复盘，通过统计上报，得知用户对于新功能的喜好程度\n5. 对下一新版本的开发计划进行评估\n\n其中，复盘步骤对于敏捷开发的模式尤为重要。并且不仅是产品经理，包括开发人员都需要参与到复盘的步骤中。对于一个开发人员，得知自己所开发功能受到用户的喜爱，自身对于下个版本的开发积极性也会有相应的提高。\n\n## 真实的敏捷开发\n\n可是，有多少公司又能很好地在版本迭代的过程中持续遵循上述的要点呢？不少的公司更多的只是喊着敏捷开发的口号，在更短的时间内，往产品中堆砌着更多的功能，从而导致开发人员在长时间内一直保持着难以接受的开发强度，最终导致人员的流失，项目的失败。\n\n笔者从自身的工作环境中，感受到两点：\n\n- 老板过多地参与进项目开发的细节中\n- 复盘步骤的缺失，或者复盘步骤对于产品经理们的负反馈缺失\n\n笔者对于第一点真是深有体会。其实老板们关注细节无可厚非，可是过多的参与到项目开发中，很容易导致到开发节奏混乱，无法保持小版本迭代的步骤中。因为版本开发迭代期间，并不会频繁地推送到老板处体验，只能在项目上线阶段提交给老板进行上线前的最后体验。正常情况下，老板应该对这个功能开发进行最后的确认，确认这个版本是否与开发初期所定下的发展方向一致，而不应该对细节进行过多的反馈，一来这个环节在开发过程中早就经过产品经理的把控；二来开发人员、乃至于产品经理，都很难对老板所提出的细节要求说不，容易导致项目进度一拖再拖。三来甚至会过度打击产品经理的积极性，最终导致产品经理不再创新，只会揣测老板的心思。\n\n即便是成功至此的微信，笔者感觉它都已经不再是认真遵循着敏捷开发的模式了，大家可以从微信的招聘口号中可以感受一下：\n\n> 做一个伟大的产品来取悦--**自己**。\n\n## 后注\n\n毕竟这片文章只是有感而发，想到哪写到哪，尚未经过深入思考。请读者们轻喷。\n","slug":"2020-03-22-about-agility-dev","published":1,"updated":"2021-08-27T09:46:34.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksv3zgrg00010c9kghd68z3f","content":"<ol>\n<li><a href=\"#%E8%B0%88%E8%B0%88%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91\">谈谈敏捷开发</a></li>\n<li><a href=\"#%E5%B0%8F%E6%AD%A5%E5%BF%AB%E8%B7%91%E3%80%81%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91\">小步快跑、敏捷开发</a></li>\n<li><a href=\"#%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91\">真实的敏捷开发</a></li>\n<li><a href=\"#%E5%90%8E%E6%B3%A8\">后注</a></li>\n</ol>\n<h1 id=\"谈谈敏捷开发\"><a href=\"#谈谈敏捷开发\" class=\"headerlink\" title=\"谈谈敏捷开发\"></a>谈谈敏捷开发</h1><p>好久没有更新一下博客，最近有在尝试新的领域，可是一直没能积累下什么重要的知识、或者形成了什么重要的知识体系，就没能写下什么有意义的记录。可是很偶然的机会看到一个视频，里面讲述的，乔布斯谈论关于【流程与人才】的理解，基本可以总结为：苹果没有像 IBM 一样衰落，很大一部分原因是苹果没有执行像 IBM 一样严格的流程管理，使得有能力、有才华的人才能够不受大公司中条条框框的约束，充分发挥自己优势，最终促使苹果一次又一次的震惊世界。</p>\n<p>看到这个视频的时候，脑子中转过了好多好多的话语，没能按耐住自己的情绪，终究还是在 Twitter 中直接开喷。当然，喷的并不是乔布斯或者是他的言论，<strong>乔帮主</strong>在国内一波又一波媒体、开发者的吹捧下，早就已经走上了“冰封王座”。他的一生、创办苹果的风风雨雨，相信拜读过《乔布斯传》的人都能已经耳熟能详了，这里不再细说。总而言之，对于笔者自身，远远还达不到批判他的言辞的资格。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>废话说了那么多，结果原来只是像表达自己的弱小</p></blockquote>\n<p>乔布斯确实过于优秀了，以至于越来越多的年轻人、创业者，都想要向他学习，见贤思齐焉。而学习最简单不过的方式，就是模仿。现在越来越容易听到那些晦涩难懂，可是由显得高端深奥的词汇。似乎在这种谈吐中更容易体现出自身对于产品思考的深入。</p>\n<p>“把握用户体验”，“重新定义 XX”，甚至 “打破流程”。“ IBM 之所以没落，就是因为他大公司中繁重的流程，约束的条条框框。” 所以我们要注重人才的才华展示，淡化流程。乔布斯所表达的观点，我们全盘接受。</p>\n<p>这样子的学习，简单至极。</p>\n<p><strong>流程不再重要了。</strong>—— 这就是为什么现在产品经理跟开发工程师之间存在如此对立的原因。</p>\n<p>当然，其实乔布斯并非推动国内各大企业打破传统、废除流程的唯一功臣，另外一个更广为人知的，当然是数早已被广为人知的、被誉为中国第一产品经理的 —— 张小龙。如果你不知道这个人的话，你可以点击 (Ctrl+W) 组合键，快速查询这个人的相关信息。^_^ 得益于他的知名度以及微信的成功，“打破流程”、“简化流程”、“把握用户体验” 获得了一个更加接地气的名称 —— “<strong>小步快跑，敏捷开发</strong>”。</p>\n<p>对比于传统应用开发方式，敏捷开发在当前互联网形式上确为更加合适，毫不夸张的说，如果目前的产品开发还按照从前的开发形式，普通创业公司绝大部分会在产品推出之前，就将所有的开发经费耗光。这个时候没有任何知名度、也没有成型的产品，根本无从谈起融资以及上市。</p>\n<h2 id=\"小步快跑、敏捷开发\"><a href=\"#小步快跑、敏捷开发\" class=\"headerlink\" title=\"小步快跑、敏捷开发\"></a>小步快跑、敏捷开发</h2><p>仔细考虑，其实这种开发方式在起步阶段是比较合理的。一周一个小版本，一个月一个大版本，对每次开发的新功能做好足够的调研以及打点统计，能够在不进行市场调查的前提上获取用户对于功能的喜好程度，从而在后续的开发中对特定的功能进行资源的倾斜，更大程度上去<strong>取悦用户</strong>。<br>不得不说，微信在初期发展中，摸索到了<strong>摇一摇</strong>以及<strong>朋友圈</strong>这两大功能，然后持续在上面增加功能，优化体验，让用户真正的粘附在了微信生态上，也算是对小步快跑、敏捷开发的很好体现。微信的成功，也让更多的公司相信这种开发模式的正确性。</p>\n<p>我们来仔细捋一下这种开发模式的要点：</p>\n<ol>\n<li>小版本周期短</li>\n<li>小版本所携带新功能有针对性</li>\n<li>开发过程中对新功能做好打点统计</li>\n<li>产品上线后进行需求复盘，通过统计上报，得知用户对于新功能的喜好程度</li>\n<li>对下一新版本的开发计划进行评估</li>\n</ol>\n<p>其中，复盘步骤对于敏捷开发的模式尤为重要。并且不仅是产品经理，包括开发人员都需要参与到复盘的步骤中。对于一个开发人员，得知自己所开发功能受到用户的喜爱，自身对于下个版本的开发积极性也会有相应的提高。</p>\n<h2 id=\"真实的敏捷开发\"><a href=\"#真实的敏捷开发\" class=\"headerlink\" title=\"真实的敏捷开发\"></a>真实的敏捷开发</h2><p>可是，有多少公司又能很好地在版本迭代的过程中持续遵循上述的要点呢？不少的公司更多的只是喊着敏捷开发的口号，在更短的时间内，往产品中堆砌着更多的功能，从而导致开发人员在长时间内一直保持着难以接受的开发强度，最终导致人员的流失，项目的失败。</p>\n<p>笔者从自身的工作环境中，感受到两点：</p>\n<ul>\n<li>老板过多地参与进项目开发的细节中</li>\n<li>复盘步骤的缺失，或者复盘步骤对于产品经理们的负反馈缺失</li>\n</ul>\n<p>笔者对于第一点真是深有体会。其实老板们关注细节无可厚非，可是过多的参与到项目开发中，很容易导致到开发节奏混乱，无法保持小版本迭代的步骤中。因为版本开发迭代期间，并不会频繁地推送到老板处体验，只能在项目上线阶段提交给老板进行上线前的最后体验。正常情况下，老板应该对这个功能开发进行最后的确认，确认这个版本是否与开发初期所定下的发展方向一致，而不应该对细节进行过多的反馈，一来这个环节在开发过程中早就经过产品经理的把控；二来开发人员、乃至于产品经理，都很难对老板所提出的细节要求说不，容易导致项目进度一拖再拖。三来甚至会过度打击产品经理的积极性，最终导致产品经理不再创新，只会揣测老板的心思。</p>\n<p>即便是成功至此的微信，笔者感觉它都已经不再是认真遵循着敏捷开发的模式了，大家可以从微信的招聘口号中可以感受一下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>做一个伟大的产品来取悦–<strong>自己</strong>。</p></blockquote>\n<h2 id=\"后注\"><a href=\"#后注\" class=\"headerlink\" title=\"后注\"></a>后注</h2><p>毕竟这片文章只是有感而发，想到哪写到哪，尚未经过深入思考。请读者们轻喷。</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><a href=\"#%E8%B0%88%E8%B0%88%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91\">谈谈敏捷开发</a></li>\n<li><a href=\"#%E5%B0%8F%E6%AD%A5%E5%BF%AB%E8%B7%91%E3%80%81%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91\">小步快跑、敏捷开发</a></li>\n<li><a href=\"#%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91\">真实的敏捷开发</a></li>\n<li><a href=\"#%E5%90%8E%E6%B3%A8\">后注</a></li>\n</ol>\n<h1 id=\"谈谈敏捷开发\"><a href=\"#谈谈敏捷开发\" class=\"headerlink\" title=\"谈谈敏捷开发\"></a>谈谈敏捷开发</h1><p>好久没有更新一下博客，最近有在尝试新的领域，可是一直没能积累下什么重要的知识、或者形成了什么重要的知识体系，就没能写下什么有意义的记录。可是很偶然的机会看到一个视频，里面讲述的，乔布斯谈论关于【流程与人才】的理解，基本可以总结为：苹果没有像 IBM 一样衰落，很大一部分原因是苹果没有执行像 IBM 一样严格的流程管理，使得有能力、有才华的人才能够不受大公司中条条框框的约束，充分发挥自己优势，最终促使苹果一次又一次的震惊世界。</p>\n<p>看到这个视频的时候，脑子中转过了好多好多的话语，没能按耐住自己的情绪，终究还是在 Twitter 中直接开喷。当然，喷的并不是乔布斯或者是他的言论，<strong>乔帮主</strong>在国内一波又一波媒体、开发者的吹捧下，早就已经走上了“冰封王座”。他的一生、创办苹果的风风雨雨，相信拜读过《乔布斯传》的人都能已经耳熟能详了，这里不再细说。总而言之，对于笔者自身，远远还达不到批判他的言辞的资格。</p>\n<blockquote>\n<p>废话说了那么多，结果原来只是像表达自己的弱小</p>\n</blockquote>\n<p>乔布斯确实过于优秀了，以至于越来越多的年轻人、创业者，都想要向他学习，见贤思齐焉。而学习最简单不过的方式，就是模仿。现在越来越容易听到那些晦涩难懂，可是由显得高端深奥的词汇。似乎在这种谈吐中更容易体现出自身对于产品思考的深入。</p>\n<p>“把握用户体验”，“重新定义 XX”，甚至 “打破流程”。“ IBM 之所以没落，就是因为他大公司中繁重的流程，约束的条条框框。” 所以我们要注重人才的才华展示，淡化流程。乔布斯所表达的观点，我们全盘接受。</p>\n<p>这样子的学习，简单至极。</p>\n<p><strong>流程不再重要了。</strong>—— 这就是为什么现在产品经理跟开发工程师之间存在如此对立的原因。</p>\n<p>当然，其实乔布斯并非推动国内各大企业打破传统、废除流程的唯一功臣，另外一个更广为人知的，当然是数早已被广为人知的、被誉为中国第一产品经理的 —— 张小龙。如果你不知道这个人的话，你可以点击 (Ctrl+W) 组合键，快速查询这个人的相关信息。^_^ 得益于他的知名度以及微信的成功，“打破流程”、“简化流程”、“把握用户体验” 获得了一个更加接地气的名称 —— “<strong>小步快跑，敏捷开发</strong>”。</p>\n<p>对比于传统应用开发方式，敏捷开发在当前互联网形式上确为更加合适，毫不夸张的说，如果目前的产品开发还按照从前的开发形式，普通创业公司绝大部分会在产品推出之前，就将所有的开发经费耗光。这个时候没有任何知名度、也没有成型的产品，根本无从谈起融资以及上市。</p>\n<h2 id=\"小步快跑、敏捷开发\"><a href=\"#小步快跑、敏捷开发\" class=\"headerlink\" title=\"小步快跑、敏捷开发\"></a>小步快跑、敏捷开发</h2><p>仔细考虑，其实这种开发方式在起步阶段是比较合理的。一周一个小版本，一个月一个大版本，对每次开发的新功能做好足够的调研以及打点统计，能够在不进行市场调查的前提上获取用户对于功能的喜好程度，从而在后续的开发中对特定的功能进行资源的倾斜，更大程度上去<strong>取悦用户</strong>。<br>不得不说，微信在初期发展中，摸索到了<strong>摇一摇</strong>以及<strong>朋友圈</strong>这两大功能，然后持续在上面增加功能，优化体验，让用户真正的粘附在了微信生态上，也算是对小步快跑、敏捷开发的很好体现。微信的成功，也让更多的公司相信这种开发模式的正确性。</p>\n<p>我们来仔细捋一下这种开发模式的要点：</p>\n<ol>\n<li>小版本周期短</li>\n<li>小版本所携带新功能有针对性</li>\n<li>开发过程中对新功能做好打点统计</li>\n<li>产品上线后进行需求复盘，通过统计上报，得知用户对于新功能的喜好程度</li>\n<li>对下一新版本的开发计划进行评估</li>\n</ol>\n<p>其中，复盘步骤对于敏捷开发的模式尤为重要。并且不仅是产品经理，包括开发人员都需要参与到复盘的步骤中。对于一个开发人员，得知自己所开发功能受到用户的喜爱，自身对于下个版本的开发积极性也会有相应的提高。</p>\n<h2 id=\"真实的敏捷开发\"><a href=\"#真实的敏捷开发\" class=\"headerlink\" title=\"真实的敏捷开发\"></a>真实的敏捷开发</h2><p>可是，有多少公司又能很好地在版本迭代的过程中持续遵循上述的要点呢？不少的公司更多的只是喊着敏捷开发的口号，在更短的时间内，往产品中堆砌着更多的功能，从而导致开发人员在长时间内一直保持着难以接受的开发强度，最终导致人员的流失，项目的失败。</p>\n<p>笔者从自身的工作环境中，感受到两点：</p>\n<ul>\n<li>老板过多地参与进项目开发的细节中</li>\n<li>复盘步骤的缺失，或者复盘步骤对于产品经理们的负反馈缺失</li>\n</ul>\n<p>笔者对于第一点真是深有体会。其实老板们关注细节无可厚非，可是过多的参与到项目开发中，很容易导致到开发节奏混乱，无法保持小版本迭代的步骤中。因为版本开发迭代期间，并不会频繁地推送到老板处体验，只能在项目上线阶段提交给老板进行上线前的最后体验。正常情况下，老板应该对这个功能开发进行最后的确认，确认这个版本是否与开发初期所定下的发展方向一致，而不应该对细节进行过多的反馈，一来这个环节在开发过程中早就经过产品经理的把控；二来开发人员、乃至于产品经理，都很难对老板所提出的细节要求说不，容易导致项目进度一拖再拖。三来甚至会过度打击产品经理的积极性，最终导致产品经理不再创新，只会揣测老板的心思。</p>\n<p>即便是成功至此的微信，笔者感觉它都已经不再是认真遵循着敏捷开发的模式了，大家可以从微信的招聘口号中可以感受一下：</p>\n<blockquote>\n<p>做一个伟大的产品来取悦–<strong>自己</strong>。</p>\n</blockquote>\n<h2 id=\"后注\"><a href=\"#后注\" class=\"headerlink\" title=\"后注\"></a>后注</h2><p>毕竟这片文章只是有感而发，想到哪写到哪，尚未经过深入思考。请读者们轻喷。</p>\n"},{"title":"前端技能训练: 重构一","date":"2020-01-18T05:08:43.000Z","cover":"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/article/refactor.jpeg","_content":"\n或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。\n\n有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Github上，也就有了[Artisan Stack] 计划。\n\n每个程序员都不可避免地是一个Coder，一个没有掌握好技能的Coder，算不上是手工艺人，但是是手工人。\n\n艺，需要有创造性的方法。\n\n# [前端技能训练: 重构一]()\n\n## 为什么重构?\n\n> 为了更好的代码。\n\n在经历了一年多的工作之后，我平时的主要工作就是修Bug。刚开始的时候觉得无聊，后来才发现修Bug需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的bug。修Bug，更多的是维护代码。还是前人总结的那句话对:\n\n> 写代码容易，读代码难。\n\n假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。\n\n如果你的代码已经上线，虽然是一坨坨的。但是不要轻易尝试，`没有测试的重构`。\n\n从前端开始的原因在于，写得一坨坨且最不容易测试的代码都在前端。\n\n让我们来看看我们的第一个训练，相当有挑战性。\n\n## 重构uMarkdown\n\n代码及setup请见github: [js-refactor]\n\n### 代码说明\n\n`uMarkdown`是一个用于将Markdown转化为HTML的库。代码看上去就像一个很典型的过程代码:\n\n    /* code */\n    while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) {\n      str = str.replace(stra[0], '<code>\\n' + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, '<br/>').replace(/\\ /gm, '&nbsp;') + '</code>\\n');\n    }\n    \n    /* headlines */\n    while ((stra = micromarkdown.regexobject.headline.exec(str)) !== null) {\n      count = stra[1].length;\n      str = str.replace(stra[0], '<h' + count + '>' + stra[2] + '</h' + count + '>' + '\\n');\n    }\n    \n    /* mail */\n    while ((stra = micromarkdown.regexobject.mail.exec(str)) !== null) {\n      str = str.replace(stra[0], '<a href=\"mailto:' + stra[1] + '\">' + stra[1] + '</a>');\n    }\n\n选这个做重构的开始，不仅仅是因为之前在写[EchoesWorks]的时候进行了很多的重构。而且它更适合于，`重构到设计模式`的理论。让我们在重构完之后，给作者进行pull request吧。\n\nMarkdown的解析过程，有点类似于`Pipe and Filters`模式(架构模式)。\n\nFilter即我们在代码中看到的正规表达式集:\n\n    regexobject: {\n        headline: /^(\\#{1,6})([^\\#\\n]+)$/m,\n        code: /\\s\\`\\`\\`\\n?([^`]+)\\`\\`\\`/g\n\n他会匹配对应的Markdown类型，随后进行替换和处理。而``str```，就是管理口的输入和输出。\n\n接着，我们就可以对其进行简单的重构。\n\n### 重构\n\n(ps: 推荐用WebStrom来做重构，自带重构功能)\n\n作为一个示例，我们先提出codeHandler方法，即将上面的\n\n    /* code */\n    while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) {\n      str = str.replace(stra[0], '<code>\\n' + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, '<br/>').replace(/\\ /gm, '&nbsp;') + '</code>\\n');\n    }\n\n提取方法成\n\n    codeFilter: function (str, stra) {\n        return str.replace(stra[0], '<code>\\n' + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, '<br/>').replace(/\\ /gm, '&nbsp;') + '</code>\\n');\n      },\n\nwhile语句就成了\n\n      while ((stra = regexobject.code.exec(str)) !== null) {\n            str = this.codeFilter(str, stra);\n        }\n\n然后，运行所有的测试。\n\n    grunt test\n\n同理我们就可以`mail`、`headline`等方法进行重构。接着就会变成类似于下面的代码，\n\n      /* code */\n      while ((execStr = regExpObject.code.exec(str)) !== null) {\n        str = codeHandler(str, execStr);\n      }\n    \n      /* headlines */\n      while ((execStr = regExpObject.headline.exec(str)) !== null) {\n        str = headlineHandler(str, execStr);\n      }\n    \n      /* lists */\n      while ((execStr = regExpObject.lists.exec(str)) !== null) {\n        str = listHandler(str, execStr);\n      }\n    \n      /* tables */\n      while ((execStr = regExpObject.tables.exec(str)) !== null) {\n        str = tableHandler(str, execStr, strict);\n      }\n\n然后你也看到了，上面有一堆重复的代码，接着让我们用JavaScript的`奇技浮巧`，即apply方法，把上面的重复代码变成。\n\n        ['code', 'headline', 'lists', 'tables', 'links', 'mail', 'url', 'smlinks', 'hr'].forEach(function (type) {\n            while ((stra = regexobject[type].exec(str)) !== null) {\n                str = that[(type + 'Handler')].apply(that, [stra, str, strict]);\n            }\n        });\n\n进行测试，blabla，都是过的。\n\n     Markdown\n       ✓ should parse h1~h3\n       ✓ should parse link\n       ✓ should special link\n       ✓ should parse font style\n       ✓ should parse code\n       ✓ should parse ul list\n       ✓ should parse ul table\n       ✓ should return correctly class name\n\n这样，我们就完成第一个重构训练了~~。\n","source":"_posts/2020-01-18-web-refactoring-1.md","raw":"---\ntitle: \"前端技能训练: 重构一\"\ndate: 2020-01-18 13:08:43\ncover: https://cdn.jsdelivr.net/gh/hehuixiong/image-host/article/refactor.jpeg\ncategories:\n  - 前端优化\ntags:\n  - css\n  - javaScript\n  - html\n  - vue.js\n  - elementui\n---\n\n或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。\n\n有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Github上，也就有了[Artisan Stack] 计划。\n\n每个程序员都不可避免地是一个Coder，一个没有掌握好技能的Coder，算不上是手工艺人，但是是手工人。\n\n艺，需要有创造性的方法。\n\n# [前端技能训练: 重构一]()\n\n## 为什么重构?\n\n> 为了更好的代码。\n\n在经历了一年多的工作之后，我平时的主要工作就是修Bug。刚开始的时候觉得无聊，后来才发现修Bug需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的bug。修Bug，更多的是维护代码。还是前人总结的那句话对:\n\n> 写代码容易，读代码难。\n\n假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。\n\n如果你的代码已经上线，虽然是一坨坨的。但是不要轻易尝试，`没有测试的重构`。\n\n从前端开始的原因在于，写得一坨坨且最不容易测试的代码都在前端。\n\n让我们来看看我们的第一个训练，相当有挑战性。\n\n## 重构uMarkdown\n\n代码及setup请见github: [js-refactor]\n\n### 代码说明\n\n`uMarkdown`是一个用于将Markdown转化为HTML的库。代码看上去就像一个很典型的过程代码:\n\n    /* code */\n    while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) {\n      str = str.replace(stra[0], '<code>\\n' + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, '<br/>').replace(/\\ /gm, '&nbsp;') + '</code>\\n');\n    }\n    \n    /* headlines */\n    while ((stra = micromarkdown.regexobject.headline.exec(str)) !== null) {\n      count = stra[1].length;\n      str = str.replace(stra[0], '<h' + count + '>' + stra[2] + '</h' + count + '>' + '\\n');\n    }\n    \n    /* mail */\n    while ((stra = micromarkdown.regexobject.mail.exec(str)) !== null) {\n      str = str.replace(stra[0], '<a href=\"mailto:' + stra[1] + '\">' + stra[1] + '</a>');\n    }\n\n选这个做重构的开始，不仅仅是因为之前在写[EchoesWorks]的时候进行了很多的重构。而且它更适合于，`重构到设计模式`的理论。让我们在重构完之后，给作者进行pull request吧。\n\nMarkdown的解析过程，有点类似于`Pipe and Filters`模式(架构模式)。\n\nFilter即我们在代码中看到的正规表达式集:\n\n    regexobject: {\n        headline: /^(\\#{1,6})([^\\#\\n]+)$/m,\n        code: /\\s\\`\\`\\`\\n?([^`]+)\\`\\`\\`/g\n\n他会匹配对应的Markdown类型，随后进行替换和处理。而``str```，就是管理口的输入和输出。\n\n接着，我们就可以对其进行简单的重构。\n\n### 重构\n\n(ps: 推荐用WebStrom来做重构，自带重构功能)\n\n作为一个示例，我们先提出codeHandler方法，即将上面的\n\n    /* code */\n    while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) {\n      str = str.replace(stra[0], '<code>\\n' + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, '<br/>').replace(/\\ /gm, '&nbsp;') + '</code>\\n');\n    }\n\n提取方法成\n\n    codeFilter: function (str, stra) {\n        return str.replace(stra[0], '<code>\\n' + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, '<br/>').replace(/\\ /gm, '&nbsp;') + '</code>\\n');\n      },\n\nwhile语句就成了\n\n      while ((stra = regexobject.code.exec(str)) !== null) {\n            str = this.codeFilter(str, stra);\n        }\n\n然后，运行所有的测试。\n\n    grunt test\n\n同理我们就可以`mail`、`headline`等方法进行重构。接着就会变成类似于下面的代码，\n\n      /* code */\n      while ((execStr = regExpObject.code.exec(str)) !== null) {\n        str = codeHandler(str, execStr);\n      }\n    \n      /* headlines */\n      while ((execStr = regExpObject.headline.exec(str)) !== null) {\n        str = headlineHandler(str, execStr);\n      }\n    \n      /* lists */\n      while ((execStr = regExpObject.lists.exec(str)) !== null) {\n        str = listHandler(str, execStr);\n      }\n    \n      /* tables */\n      while ((execStr = regExpObject.tables.exec(str)) !== null) {\n        str = tableHandler(str, execStr, strict);\n      }\n\n然后你也看到了，上面有一堆重复的代码，接着让我们用JavaScript的`奇技浮巧`，即apply方法，把上面的重复代码变成。\n\n        ['code', 'headline', 'lists', 'tables', 'links', 'mail', 'url', 'smlinks', 'hr'].forEach(function (type) {\n            while ((stra = regexobject[type].exec(str)) !== null) {\n                str = that[(type + 'Handler')].apply(that, [stra, str, strict]);\n            }\n        });\n\n进行测试，blabla，都是过的。\n\n     Markdown\n       ✓ should parse h1~h3\n       ✓ should parse link\n       ✓ should special link\n       ✓ should parse font style\n       ✓ should parse code\n       ✓ should parse ul list\n       ✓ should parse ul table\n       ✓ should return correctly class name\n\n这样，我们就完成第一个重构训练了~~。\n","slug":"2020-01-18-web-refactoring-1","published":1,"updated":"2021-08-27T09:46:32.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksv3zgrj00030c9k8ssiak83","content":"<p>或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。</p>\n<p>有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Github上，也就有了[Artisan Stack] 计划。</p>\n<p>每个程序员都不可避免地是一个Coder，一个没有掌握好技能的Coder，算不上是手工艺人，但是是手工人。</p>\n<p>艺，需要有创造性的方法。</p>\n<h1 id=\"前端技能训练-重构一\"><a href=\"#前端技能训练-重构一\" class=\"headerlink\" title=\"前端技能训练: 重构一\"></a><a href=\"\">前端技能训练: 重构一</a></h1><h2 id=\"为什么重构\"><a href=\"#为什么重构\" class=\"headerlink\" title=\"为什么重构?\"></a>为什么重构?</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为了更好的代码。</p></blockquote>\n<p>在经历了一年多的工作之后，我平时的主要工作就是修Bug。刚开始的时候觉得无聊，后来才发现修Bug需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的bug。修Bug，更多的是维护代码。还是前人总结的那句话对:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>写代码容易，读代码难。</p></blockquote>\n<p>假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。</p>\n<p>如果你的代码已经上线，虽然是一坨坨的。但是不要轻易尝试，<code>没有测试的重构</code>。</p>\n<p>从前端开始的原因在于，写得一坨坨且最不容易测试的代码都在前端。</p>\n<p>让我们来看看我们的第一个训练，相当有挑战性。</p>\n<h2 id=\"重构uMarkdown\"><a href=\"#重构uMarkdown\" class=\"headerlink\" title=\"重构uMarkdown\"></a>重构uMarkdown</h2><p>代码及setup请见github: [js-refactor]</p>\n<h3 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h3><p><code>uMarkdown</code>是一个用于将Markdown转化为HTML的库。代码看上去就像一个很典型的过程代码:</p>\n<pre><code>/* code */\nwhile ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;\n  str = str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);\n&#125;\n\n/* headlines */\nwhile ((stra = micromarkdown.regexobject.headline.exec(str)) !== null) &#123;\n  count = stra[1].length;\n  str = str.replace(stra[0], &#39;&lt;h&#39; + count + &#39;&gt;&#39; + stra[2] + &#39;&lt;/h&#39; + count + &#39;&gt;&#39; + &#39;\\n&#39;);\n&#125;\n\n/* mail */\nwhile ((stra = micromarkdown.regexobject.mail.exec(str)) !== null) &#123;\n  str = str.replace(stra[0], &#39;&lt;a href=&quot;mailto:&#39; + stra[1] + &#39;&quot;&gt;&#39; + stra[1] + &#39;&lt;/a&gt;&#39;);\n&#125;\n</code></pre>\n<p>选这个做重构的开始，不仅仅是因为之前在写[EchoesWorks]的时候进行了很多的重构。而且它更适合于，<code>重构到设计模式</code>的理论。让我们在重构完之后，给作者进行pull request吧。</p>\n<p>Markdown的解析过程，有点类似于<code>Pipe and Filters</code>模式(架构模式)。</p>\n<p>Filter即我们在代码中看到的正规表达式集:</p>\n<pre><code>regexobject: &#123;\n    headline: /^(\\#&#123;1,6&#125;)([^\\#\\n]+)$/m,\n    code: /\\s\\`\\`\\`\\n?([^`]+)\\`\\`\\`/g\n</code></pre>\n<p>他会匹配对应的Markdown类型，随后进行替换和处理。而``str```，就是管理口的输入和输出。</p>\n<p>接着，我们就可以对其进行简单的重构。</p>\n<h3 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h3><p>(ps: 推荐用WebStrom来做重构，自带重构功能)</p>\n<p>作为一个示例，我们先提出codeHandler方法，即将上面的</p>\n<pre><code>/* code */\nwhile ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;\n  str = str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);\n&#125;\n</code></pre>\n<p>提取方法成</p>\n<pre><code>codeFilter: function (str, stra) &#123;\n    return str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);\n  &#125;,\n</code></pre>\n<p>while语句就成了</p>\n<pre><code>  while ((stra = regexobject.code.exec(str)) !== null) &#123;\n        str = this.codeFilter(str, stra);\n    &#125;\n</code></pre>\n<p>然后，运行所有的测试。</p>\n<pre><code>grunt test\n</code></pre>\n<p>同理我们就可以<code>mail</code>、<code>headline</code>等方法进行重构。接着就会变成类似于下面的代码，</p>\n<pre><code>  /* code */\n  while ((execStr = regExpObject.code.exec(str)) !== null) &#123;\n    str = codeHandler(str, execStr);\n  &#125;\n\n  /* headlines */\n  while ((execStr = regExpObject.headline.exec(str)) !== null) &#123;\n    str = headlineHandler(str, execStr);\n  &#125;\n\n  /* lists */\n  while ((execStr = regExpObject.lists.exec(str)) !== null) &#123;\n    str = listHandler(str, execStr);\n  &#125;\n\n  /* tables */\n  while ((execStr = regExpObject.tables.exec(str)) !== null) &#123;\n    str = tableHandler(str, execStr, strict);\n  &#125;\n</code></pre>\n<p>然后你也看到了，上面有一堆重复的代码，接着让我们用JavaScript的<code>奇技浮巧</code>，即apply方法，把上面的重复代码变成。</p>\n<pre><code>    [&#39;code&#39;, &#39;headline&#39;, &#39;lists&#39;, &#39;tables&#39;, &#39;links&#39;, &#39;mail&#39;, &#39;url&#39;, &#39;smlinks&#39;, &#39;hr&#39;].forEach(function (type) &#123;\n        while ((stra = regexobject[type].exec(str)) !== null) &#123;\n            str = that[(type + &#39;Handler&#39;)].apply(that, [stra, str, strict]);\n        &#125;\n    &#125;);\n</code></pre>\n<p>进行测试，blabla，都是过的。</p>\n<pre><code> Markdown\n   ✓ should parse h1~h3\n   ✓ should parse link\n   ✓ should special link\n   ✓ should parse font style\n   ✓ should parse code\n   ✓ should parse ul list\n   ✓ should parse ul table\n   ✓ should return correctly class name\n</code></pre>\n<p>这样，我们就完成第一个重构训练了~~。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。</p>\n<p>有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Github上，也就有了[Artisan Stack] 计划。</p>\n<p>每个程序员都不可避免地是一个Coder，一个没有掌握好技能的Coder，算不上是手工艺人，但是是手工人。</p>\n<p>艺，需要有创造性的方法。</p>\n<h1 id=\"前端技能训练-重构一\"><a href=\"#前端技能训练-重构一\" class=\"headerlink\" title=\"前端技能训练: 重构一\"></a><a href=\"\">前端技能训练: 重构一</a></h1><h2 id=\"为什么重构\"><a href=\"#为什么重构\" class=\"headerlink\" title=\"为什么重构?\"></a>为什么重构?</h2><blockquote>\n<p>为了更好的代码。</p>\n</blockquote>\n<p>在经历了一年多的工作之后，我平时的主要工作就是修Bug。刚开始的时候觉得无聊，后来才发现修Bug需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的bug。修Bug，更多的是维护代码。还是前人总结的那句话对:</p>\n<blockquote>\n<p>写代码容易，读代码难。</p>\n</blockquote>\n<p>假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。</p>\n<p>如果你的代码已经上线，虽然是一坨坨的。但是不要轻易尝试，<code>没有测试的重构</code>。</p>\n<p>从前端开始的原因在于，写得一坨坨且最不容易测试的代码都在前端。</p>\n<p>让我们来看看我们的第一个训练，相当有挑战性。</p>\n<h2 id=\"重构uMarkdown\"><a href=\"#重构uMarkdown\" class=\"headerlink\" title=\"重构uMarkdown\"></a>重构uMarkdown</h2><p>代码及setup请见github: [js-refactor]</p>\n<h3 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h3><p><code>uMarkdown</code>是一个用于将Markdown转化为HTML的库。代码看上去就像一个很典型的过程代码:</p>\n<pre><code>/* code */\nwhile ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;\n  str = str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);\n&#125;\n\n/* headlines */\nwhile ((stra = micromarkdown.regexobject.headline.exec(str)) !== null) &#123;\n  count = stra[1].length;\n  str = str.replace(stra[0], &#39;&lt;h&#39; + count + &#39;&gt;&#39; + stra[2] + &#39;&lt;/h&#39; + count + &#39;&gt;&#39; + &#39;\\n&#39;);\n&#125;\n\n/* mail */\nwhile ((stra = micromarkdown.regexobject.mail.exec(str)) !== null) &#123;\n  str = str.replace(stra[0], &#39;&lt;a href=&quot;mailto:&#39; + stra[1] + &#39;&quot;&gt;&#39; + stra[1] + &#39;&lt;/a&gt;&#39;);\n&#125;\n</code></pre>\n<p>选这个做重构的开始，不仅仅是因为之前在写[EchoesWorks]的时候进行了很多的重构。而且它更适合于，<code>重构到设计模式</code>的理论。让我们在重构完之后，给作者进行pull request吧。</p>\n<p>Markdown的解析过程，有点类似于<code>Pipe and Filters</code>模式(架构模式)。</p>\n<p>Filter即我们在代码中看到的正规表达式集:</p>\n<pre><code>regexobject: &#123;\n    headline: /^(\\#&#123;1,6&#125;)([^\\#\\n]+)$/m,\n    code: /\\s\\`\\`\\`\\n?([^`]+)\\`\\`\\`/g\n</code></pre>\n<p>他会匹配对应的Markdown类型，随后进行替换和处理。而``str```，就是管理口的输入和输出。</p>\n<p>接着，我们就可以对其进行简单的重构。</p>\n<h3 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h3><p>(ps: 推荐用WebStrom来做重构，自带重构功能)</p>\n<p>作为一个示例，我们先提出codeHandler方法，即将上面的</p>\n<pre><code>/* code */\nwhile ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;\n  str = str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);\n&#125;\n</code></pre>\n<p>提取方法成</p>\n<pre><code>codeFilter: function (str, stra) &#123;\n    return str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);\n  &#125;,\n</code></pre>\n<p>while语句就成了</p>\n<pre><code>  while ((stra = regexobject.code.exec(str)) !== null) &#123;\n        str = this.codeFilter(str, stra);\n    &#125;\n</code></pre>\n<p>然后，运行所有的测试。</p>\n<pre><code>grunt test\n</code></pre>\n<p>同理我们就可以<code>mail</code>、<code>headline</code>等方法进行重构。接着就会变成类似于下面的代码，</p>\n<pre><code>  /* code */\n  while ((execStr = regExpObject.code.exec(str)) !== null) &#123;\n    str = codeHandler(str, execStr);\n  &#125;\n\n  /* headlines */\n  while ((execStr = regExpObject.headline.exec(str)) !== null) &#123;\n    str = headlineHandler(str, execStr);\n  &#125;\n\n  /* lists */\n  while ((execStr = regExpObject.lists.exec(str)) !== null) &#123;\n    str = listHandler(str, execStr);\n  &#125;\n\n  /* tables */\n  while ((execStr = regExpObject.tables.exec(str)) !== null) &#123;\n    str = tableHandler(str, execStr, strict);\n  &#125;\n</code></pre>\n<p>然后你也看到了，上面有一堆重复的代码，接着让我们用JavaScript的<code>奇技浮巧</code>，即apply方法，把上面的重复代码变成。</p>\n<pre><code>    [&#39;code&#39;, &#39;headline&#39;, &#39;lists&#39;, &#39;tables&#39;, &#39;links&#39;, &#39;mail&#39;, &#39;url&#39;, &#39;smlinks&#39;, &#39;hr&#39;].forEach(function (type) &#123;\n        while ((stra = regexobject[type].exec(str)) !== null) &#123;\n            str = that[(type + &#39;Handler&#39;)].apply(that, [stra, str, strict]);\n        &#125;\n    &#125;);\n</code></pre>\n<p>进行测试，blabla，都是过的。</p>\n<pre><code> Markdown\n   ✓ should parse h1~h3\n   ✓ should parse link\n   ✓ should special link\n   ✓ should parse font style\n   ✓ should parse code\n   ✓ should parse ul list\n   ✓ should parse ul table\n   ✓ should return correctly class name\n</code></pre>\n<p>这样，我们就完成第一个重构训练了~~。</p>\n"},{"title":"耀企GIT使用规范 v2.0","date":"2019-03-26T07:07:43.000Z","cover":"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/DxMfhT.jpg","top_img":"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/DxMfhT.jpg","_content":"\n# 耀企GIT使用规范 v2.0\n> Git usage standards version 2.0\n# 介绍\n每一个优秀的开发团队都会用到一套代码管理工具。根据目前最流行的代码管理工具非`GIT`莫属。不例外耀企团队绝对使用最优秀的规范和工具。根据耀企项目的具体部署环境，开发规范，我们有一套自己的规范和标准的`GIT`使用方式。\n\n# 敏捷迭代\n    如果要弄明白耀企的GIT使用，首先要了解清楚耀企项目的迭代流程\n\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_development.png)\n\n#### 什么是敏捷迭代？\n> 敏捷迭代就是把开发周期缩短到1-4周。小步快跑的迅速迭代交付功能上线。敏捷迭代的流程分别如下：\n1. 确定需求 - _与老板和市场确认需求和流程_\n2. 需求评审 - _与开发同频需求里面的功能点和业务流程_\n3. 技术反讲 - _开发与产品同频需求，保证理解没有误区，开发也需要评估开发难度，和开发时间_\n4. 研发周期 - _开发人员开始投入研发直接到功能和需求开发完毕，转交给测试，在测试环境提测_\n5. 测试周期 - _测试和开发人员开始排除困难，修复所有在开发过程产生的bug_\n6. 验收/预发布周期 - _当测试在测试环境把所有bug排除掉后，当前迭代版本就会发布到预发布环境让市场和产品验收功能_\n7. 发布正式 - _当验收通过后，当前迭代版本就可以部署上先到正式环境_\n8. 正式回归测试 - _发布上线后，就会有正式回归测试，最有一道防线，保证系统加入了所有新功能都没有问题_\n9. 迭代总结 - _每一期迭代结束后都总结这次迭代遇到的问题，持续优化，提高效率_\n\n#### 开发环境\n\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_dev_envs.png)\n\n    开发环境和git分支是一一对应的。\n\n+ 版本开发环境 - _dev/x.x.x 版本分支_\n+ 测试/联调环境 - _qa/qa1，qa/qa2，qa/qa3 3个测试环境和分支_\n+ 预发布/验收环境 - _release分支_\n+ 正式线上环境 - _master分支_\n\n# Git操作场景\n    这里我们按照实际开发流程和实际场景来解说怎么使用git\n\n> ### 开启新版本迭代\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/start_agile.png)\n\n#### 操作步骤\n1. 从master分支创建一个版本分支\n2. 创建版本分支后根据不同的端做不同的处理\n    - 前端：需要把接口版本好改为当前迭代的接口版本号\n    - 后端：先创建对应当前迭代的接口版本好控制器和路由，然后合并就版本的控制器更变。\n\n> ### 开发周期版本提测/bug修复提测\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_qa_start.png)\n\n    提验收必须从版本分支合并qa分支\n\n#### 操作步骤\n1. 版本分支合并(merge)对应的测试分支(qa)\n2. 版本分支代码合并后对应的qa环境会自动部署代码到对应的环境服务器上\n\n> ### 开发周期版本提验收/bug修复提验收\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_stage_start.png)\n\n    提测必须从版本分支合并验收(release)分支\n\n#### 操作步骤\n1. 版本分支合并(merge)验收分支(release)\n2. 版本分支代码合并release环境会自动部署代码到环境服务器上\n    - 如果是修复bug，就要先合并对应的qa分支后合并release分支。\n\n> ### 使用前版本修复上线流程\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_bugfix.png)\n\n#### 操作步骤\n1. 使用当前`正式所在的版本`找到对应的`版本分支`作为修复分支\n2. 修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复\n3. 测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复\n4. 验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试\n5. 在线上回归通过后，就可以把修复分支分别合并到`当前迭代版本分支`\n\n> ### 紧急修复上线流程\n - 如果当前bug是很严重的，影响到用户使用的才需要使用紧急修复上线流程\n - 紧急修复上线必须先创建紧急修复(hotfix)分支\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_hotfix.png)\n\n#### 操作步骤\n1. 首先使用master分支创建紧急修复分支(hotfix/xxxx) - 使用`hotfix`前缀\n2. 修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复\n3. 测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复\n4. 验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试\n5. 在线上回归通过后，就可以把修复分支分别合并到`前版本分支`和`当前迭代版本分支`\n6. 最后在`本地(local)`和`远程(origin)`删除修复分支\n\n> ### 后端代码部署操作流程\n - 因为后端把不同模块都独立成一个composer包，所以git合并和部署流程跟前端是有区别的。这里分开来说明流程。\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_backend_git.png)\n\n#### 操作步骤\n1. 首先用每个`模块`的`版本分支`合并对应的qa分支\n2. 然后切换到`Foundation`应用，然后推送对应的环境发起环境部署\n    - 如果涉及多个模块需要同时发布，那就先把所有模块先合并好环境分支，然后再推Foundation。因为Foundation的某个环境启动了部署，必须部署完后才能发起下一次部署。","source":"_posts/2019-03-26-yqy-git-standard.md","raw":"---\ntitle: 耀企GIT使用规范 v2.0\ndate: 2019-03-26 15:07:43\n# sticky: 1 是否置顶\ncover: https://cdn.jsdelivr.net/gh/hehuixiong/image-host/DxMfhT.jpg\ntop_img: https://cdn.jsdelivr.net/gh/hehuixiong/image-host/DxMfhT.jpg\ntags:\n  - git\n---\n\n# 耀企GIT使用规范 v2.0\n> Git usage standards version 2.0\n# 介绍\n每一个优秀的开发团队都会用到一套代码管理工具。根据目前最流行的代码管理工具非`GIT`莫属。不例外耀企团队绝对使用最优秀的规范和工具。根据耀企项目的具体部署环境，开发规范，我们有一套自己的规范和标准的`GIT`使用方式。\n\n# 敏捷迭代\n    如果要弄明白耀企的GIT使用，首先要了解清楚耀企项目的迭代流程\n\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_development.png)\n\n#### 什么是敏捷迭代？\n> 敏捷迭代就是把开发周期缩短到1-4周。小步快跑的迅速迭代交付功能上线。敏捷迭代的流程分别如下：\n1. 确定需求 - _与老板和市场确认需求和流程_\n2. 需求评审 - _与开发同频需求里面的功能点和业务流程_\n3. 技术反讲 - _开发与产品同频需求，保证理解没有误区，开发也需要评估开发难度，和开发时间_\n4. 研发周期 - _开发人员开始投入研发直接到功能和需求开发完毕，转交给测试，在测试环境提测_\n5. 测试周期 - _测试和开发人员开始排除困难，修复所有在开发过程产生的bug_\n6. 验收/预发布周期 - _当测试在测试环境把所有bug排除掉后，当前迭代版本就会发布到预发布环境让市场和产品验收功能_\n7. 发布正式 - _当验收通过后，当前迭代版本就可以部署上先到正式环境_\n8. 正式回归测试 - _发布上线后，就会有正式回归测试，最有一道防线，保证系统加入了所有新功能都没有问题_\n9. 迭代总结 - _每一期迭代结束后都总结这次迭代遇到的问题，持续优化，提高效率_\n\n#### 开发环境\n\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_dev_envs.png)\n\n    开发环境和git分支是一一对应的。\n\n+ 版本开发环境 - _dev/x.x.x 版本分支_\n+ 测试/联调环境 - _qa/qa1，qa/qa2，qa/qa3 3个测试环境和分支_\n+ 预发布/验收环境 - _release分支_\n+ 正式线上环境 - _master分支_\n\n# Git操作场景\n    这里我们按照实际开发流程和实际场景来解说怎么使用git\n\n> ### 开启新版本迭代\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/start_agile.png)\n\n#### 操作步骤\n1. 从master分支创建一个版本分支\n2. 创建版本分支后根据不同的端做不同的处理\n    - 前端：需要把接口版本好改为当前迭代的接口版本号\n    - 后端：先创建对应当前迭代的接口版本好控制器和路由，然后合并就版本的控制器更变。\n\n> ### 开发周期版本提测/bug修复提测\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_qa_start.png)\n\n    提验收必须从版本分支合并qa分支\n\n#### 操作步骤\n1. 版本分支合并(merge)对应的测试分支(qa)\n2. 版本分支代码合并后对应的qa环境会自动部署代码到对应的环境服务器上\n\n> ### 开发周期版本提验收/bug修复提验收\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_stage_start.png)\n\n    提测必须从版本分支合并验收(release)分支\n\n#### 操作步骤\n1. 版本分支合并(merge)验收分支(release)\n2. 版本分支代码合并release环境会自动部署代码到环境服务器上\n    - 如果是修复bug，就要先合并对应的qa分支后合并release分支。\n\n> ### 使用前版本修复上线流程\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_bugfix.png)\n\n#### 操作步骤\n1. 使用当前`正式所在的版本`找到对应的`版本分支`作为修复分支\n2. 修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复\n3. 测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复\n4. 验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试\n5. 在线上回归通过后，就可以把修复分支分别合并到`当前迭代版本分支`\n\n> ### 紧急修复上线流程\n - 如果当前bug是很严重的，影响到用户使用的才需要使用紧急修复上线流程\n - 紧急修复上线必须先创建紧急修复(hotfix)分支\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_hotfix.png)\n\n#### 操作步骤\n1. 首先使用master分支创建紧急修复分支(hotfix/xxxx) - 使用`hotfix`前缀\n2. 修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复\n3. 测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复\n4. 验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试\n5. 在线上回归通过后，就可以把修复分支分别合并到`前版本分支`和`当前迭代版本分支`\n6. 最后在`本地(local)`和`远程(origin)`删除修复分支\n\n> ### 后端代码部署操作流程\n - 因为后端把不同模块都独立成一个composer包，所以git合并和部署流程跟前端是有区别的。这里分开来说明流程。\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_backend_git.png)\n\n#### 操作步骤\n1. 首先用每个`模块`的`版本分支`合并对应的qa分支\n2. 然后切换到`Foundation`应用，然后推送对应的环境发起环境部署\n    - 如果涉及多个模块需要同时发布，那就先把所有模块先合并好环境分支，然后再推Foundation。因为Foundation的某个环境启动了部署，必须部署完后才能发起下一次部署。","slug":"2019-03-26-yqy-git-standard","published":1,"updated":"2021-08-28T01:46:03.392Z","_id":"cksv3zgrm00060c9kb1z5gvka","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"耀企GIT使用规范-v2-0\"><a href=\"#耀企GIT使用规范-v2-0\" class=\"headerlink\" title=\"耀企GIT使用规范 v2.0\"></a>耀企GIT使用规范 v2.0</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Git usage standards version 2.0</p></blockquote>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>每一个优秀的开发团队都会用到一套代码管理工具。根据目前最流行的代码管理工具非<code>GIT</code>莫属。不例外耀企团队绝对使用最优秀的规范和工具。根据耀企项目的具体部署环境，开发规范，我们有一套自己的规范和标准的<code>GIT</code>使用方式。</p>\n<h1 id=\"敏捷迭代\"><a href=\"#敏捷迭代\" class=\"headerlink\" title=\"敏捷迭代\"></a>敏捷迭代</h1><pre><code>如果要弄明白耀企的GIT使用，首先要了解清楚耀企项目的迭代流程\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_development.png\"></p>\n<h4 id=\"什么是敏捷迭代？\"><a href=\"#什么是敏捷迭代？\" class=\"headerlink\" title=\"什么是敏捷迭代？\"></a>什么是敏捷迭代？</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>敏捷迭代就是把开发周期缩短到1-4周。小步快跑的迅速迭代交付功能上线。敏捷迭代的流程分别如下：</p></blockquote>\n<ol>\n<li>确定需求 - <em>与老板和市场确认需求和流程</em></li>\n<li>需求评审 - <em>与开发同频需求里面的功能点和业务流程</em></li>\n<li>技术反讲 - <em>开发与产品同频需求，保证理解没有误区，开发也需要评估开发难度，和开发时间</em></li>\n<li>研发周期 - <em>开发人员开始投入研发直接到功能和需求开发完毕，转交给测试，在测试环境提测</em></li>\n<li>测试周期 - <em>测试和开发人员开始排除困难，修复所有在开发过程产生的bug</em></li>\n<li>验收/预发布周期 - <em>当测试在测试环境把所有bug排除掉后，当前迭代版本就会发布到预发布环境让市场和产品验收功能</em></li>\n<li>发布正式 - <em>当验收通过后，当前迭代版本就可以部署上先到正式环境</em></li>\n<li>正式回归测试 - <em>发布上线后，就会有正式回归测试，最有一道防线，保证系统加入了所有新功能都没有问题</em></li>\n<li>迭代总结 - <em>每一期迭代结束后都总结这次迭代遇到的问题，持续优化，提高效率</em></li>\n</ol>\n<h4 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h4><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_dev_envs.png\"></p>\n<pre><code>开发环境和git分支是一一对应的。\n</code></pre>\n<ul>\n<li>版本开发环境 - <em>dev/x.x.x 版本分支</em></li>\n<li>测试/联调环境 - <em>qa/qa1，qa/qa2，qa/qa3 3个测试环境和分支</em></li>\n<li>预发布/验收环境 - <em>release分支</em></li>\n<li>正式线上环境 - <em>master分支</em></li>\n</ul>\n<h1 id=\"Git操作场景\"><a href=\"#Git操作场景\" class=\"headerlink\" title=\"Git操作场景\"></a>Git操作场景</h1><pre><code>这里我们按照实际开发流程和实际场景来解说怎么使用git\n</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"开启新版本迭代\"><a href=\"#开启新版本迭代\" class=\"headerlink\" title=\"开启新版本迭代\"></a>开启新版本迭代</h3><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/start_agile.png\"></p></blockquote>\n<h4 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>从master分支创建一个版本分支</li>\n<li>创建版本分支后根据不同的端做不同的处理<ul>\n<li>前端：需要把接口版本好改为当前迭代的接口版本号</li>\n<li>后端：先创建对应当前迭代的接口版本好控制器和路由，然后合并就版本的控制器更变。</li>\n</ul>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"开发周期版本提测-bug修复提测\"><a href=\"#开发周期版本提测-bug修复提测\" class=\"headerlink\" title=\"开发周期版本提测/bug修复提测\"></a>开发周期版本提测/bug修复提测</h3><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_qa_start.png\"></p></blockquote>\n<pre><code>提验收必须从版本分支合并qa分支\n</code></pre>\n<h4 id=\"操作步骤-1\"><a href=\"#操作步骤-1\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>版本分支合并(merge)对应的测试分支(qa)</li>\n<li>版本分支代码合并后对应的qa环境会自动部署代码到对应的环境服务器上</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"开发周期版本提验收-bug修复提验收\"><a href=\"#开发周期版本提验收-bug修复提验收\" class=\"headerlink\" title=\"开发周期版本提验收/bug修复提验收\"></a>开发周期版本提验收/bug修复提验收</h3><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_stage_start.png\"></p></blockquote>\n<pre><code>提测必须从版本分支合并验收(release)分支\n</code></pre>\n<h4 id=\"操作步骤-2\"><a href=\"#操作步骤-2\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>版本分支合并(merge)验收分支(release)</li>\n<li>版本分支代码合并release环境会自动部署代码到环境服务器上<ul>\n<li>如果是修复bug，就要先合并对应的qa分支后合并release分支。</li>\n</ul>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"使用前版本修复上线流程\"><a href=\"#使用前版本修复上线流程\" class=\"headerlink\" title=\"使用前版本修复上线流程\"></a>使用前版本修复上线流程</h3><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_bugfix.png\"></p></blockquote>\n<h4 id=\"操作步骤-3\"><a href=\"#操作步骤-3\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>使用当前<code>正式所在的版本</code>找到对应的<code>版本分支</code>作为修复分支</li>\n<li>修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复</li>\n<li>测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复</li>\n<li>验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试</li>\n<li>在线上回归通过后，就可以把修复分支分别合并到<code>当前迭代版本分支</code></li>\n</ol>\n<blockquote>\n<h3 id=\"紧急修复上线流程\"><a href=\"#紧急修复上线流程\" class=\"headerlink\" title=\"紧急修复上线流程\"></a>紧急修复上线流程</h3></blockquote>\n<ul>\n<li>如果当前bug是很严重的，影响到用户使用的才需要使用紧急修复上线流程</li>\n<li>紧急修复上线必须先创建紧急修复(hotfix)分支<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_hotfix.png\"></li>\n</ul>\n<h4 id=\"操作步骤-4\"><a href=\"#操作步骤-4\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>首先使用master分支创建紧急修复分支(hotfix/xxxx) - 使用<code>hotfix</code>前缀</li>\n<li>修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复</li>\n<li>测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复</li>\n<li>验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试</li>\n<li>在线上回归通过后，就可以把修复分支分别合并到<code>前版本分支</code>和<code>当前迭代版本分支</code></li>\n<li>最后在<code>本地(local)</code>和<code>远程(origin)</code>删除修复分支</li>\n</ol>\n<blockquote>\n<h3 id=\"后端代码部署操作流程\"><a href=\"#后端代码部署操作流程\" class=\"headerlink\" title=\"后端代码部署操作流程\"></a>后端代码部署操作流程</h3></blockquote>\n<ul>\n<li>因为后端把不同模块都独立成一个composer包，所以git合并和部署流程跟前端是有区别的。这里分开来说明流程。<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_backend_git.png\"></li>\n</ul>\n<h4 id=\"操作步骤-5\"><a href=\"#操作步骤-5\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>首先用每个<code>模块</code>的<code>版本分支</code>合并对应的qa分支</li>\n<li>然后切换到<code>Foundation</code>应用，然后推送对应的环境发起环境部署<ul>\n<li>如果涉及多个模块需要同时发布，那就先把所有模块先合并好环境分支，然后再推Foundation。因为Foundation的某个环境启动了部署，必须部署完后才能发起下一次部署。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"耀企GIT使用规范-v2-0\"><a href=\"#耀企GIT使用规范-v2-0\" class=\"headerlink\" title=\"耀企GIT使用规范 v2.0\"></a>耀企GIT使用规范 v2.0</h1><blockquote>\n<p>Git usage standards version 2.0</p>\n</blockquote>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>每一个优秀的开发团队都会用到一套代码管理工具。根据目前最流行的代码管理工具非<code>GIT</code>莫属。不例外耀企团队绝对使用最优秀的规范和工具。根据耀企项目的具体部署环境，开发规范，我们有一套自己的规范和标准的<code>GIT</code>使用方式。</p>\n<h1 id=\"敏捷迭代\"><a href=\"#敏捷迭代\" class=\"headerlink\" title=\"敏捷迭代\"></a>敏捷迭代</h1><pre><code>如果要弄明白耀企的GIT使用，首先要了解清楚耀企项目的迭代流程\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_development.png\"></p>\n<h4 id=\"什么是敏捷迭代？\"><a href=\"#什么是敏捷迭代？\" class=\"headerlink\" title=\"什么是敏捷迭代？\"></a>什么是敏捷迭代？</h4><blockquote>\n<p>敏捷迭代就是把开发周期缩短到1-4周。小步快跑的迅速迭代交付功能上线。敏捷迭代的流程分别如下：</p>\n</blockquote>\n<ol>\n<li>确定需求 - <em>与老板和市场确认需求和流程</em></li>\n<li>需求评审 - <em>与开发同频需求里面的功能点和业务流程</em></li>\n<li>技术反讲 - <em>开发与产品同频需求，保证理解没有误区，开发也需要评估开发难度，和开发时间</em></li>\n<li>研发周期 - <em>开发人员开始投入研发直接到功能和需求开发完毕，转交给测试，在测试环境提测</em></li>\n<li>测试周期 - <em>测试和开发人员开始排除困难，修复所有在开发过程产生的bug</em></li>\n<li>验收/预发布周期 - <em>当测试在测试环境把所有bug排除掉后，当前迭代版本就会发布到预发布环境让市场和产品验收功能</em></li>\n<li>发布正式 - <em>当验收通过后，当前迭代版本就可以部署上先到正式环境</em></li>\n<li>正式回归测试 - <em>发布上线后，就会有正式回归测试，最有一道防线，保证系统加入了所有新功能都没有问题</em></li>\n<li>迭代总结 - <em>每一期迭代结束后都总结这次迭代遇到的问题，持续优化，提高效率</em></li>\n</ol>\n<h4 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h4><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_dev_envs.png\"></p>\n<pre><code>开发环境和git分支是一一对应的。\n</code></pre>\n<ul>\n<li>版本开发环境 - <em>dev/x.x.x 版本分支</em></li>\n<li>测试/联调环境 - <em>qa/qa1，qa/qa2，qa/qa3 3个测试环境和分支</em></li>\n<li>预发布/验收环境 - <em>release分支</em></li>\n<li>正式线上环境 - <em>master分支</em></li>\n</ul>\n<h1 id=\"Git操作场景\"><a href=\"#Git操作场景\" class=\"headerlink\" title=\"Git操作场景\"></a>Git操作场景</h1><pre><code>这里我们按照实际开发流程和实际场景来解说怎么使用git\n</code></pre>\n<blockquote>\n<h3 id=\"开启新版本迭代\"><a href=\"#开启新版本迭代\" class=\"headerlink\" title=\"开启新版本迭代\"></a>开启新版本迭代</h3><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/start_agile.png\"></p>\n</blockquote>\n<h4 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>从master分支创建一个版本分支</li>\n<li>创建版本分支后根据不同的端做不同的处理<ul>\n<li>前端：需要把接口版本好改为当前迭代的接口版本号</li>\n<li>后端：先创建对应当前迭代的接口版本好控制器和路由，然后合并就版本的控制器更变。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<h3 id=\"开发周期版本提测-bug修复提测\"><a href=\"#开发周期版本提测-bug修复提测\" class=\"headerlink\" title=\"开发周期版本提测/bug修复提测\"></a>开发周期版本提测/bug修复提测</h3><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_qa_start.png\"></p>\n</blockquote>\n<pre><code>提验收必须从版本分支合并qa分支\n</code></pre>\n<h4 id=\"操作步骤-1\"><a href=\"#操作步骤-1\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>版本分支合并(merge)对应的测试分支(qa)</li>\n<li>版本分支代码合并后对应的qa环境会自动部署代码到对应的环境服务器上</li>\n</ol>\n<blockquote>\n<h3 id=\"开发周期版本提验收-bug修复提验收\"><a href=\"#开发周期版本提验收-bug修复提验收\" class=\"headerlink\" title=\"开发周期版本提验收/bug修复提验收\"></a>开发周期版本提验收/bug修复提验收</h3><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_stage_start.png\"></p>\n</blockquote>\n<pre><code>提测必须从版本分支合并验收(release)分支\n</code></pre>\n<h4 id=\"操作步骤-2\"><a href=\"#操作步骤-2\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>版本分支合并(merge)验收分支(release)</li>\n<li>版本分支代码合并release环境会自动部署代码到环境服务器上<ul>\n<li>如果是修复bug，就要先合并对应的qa分支后合并release分支。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<h3 id=\"使用前版本修复上线流程\"><a href=\"#使用前版本修复上线流程\" class=\"headerlink\" title=\"使用前版本修复上线流程\"></a>使用前版本修复上线流程</h3><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_bugfix.png\"></p>\n</blockquote>\n<h4 id=\"操作步骤-3\"><a href=\"#操作步骤-3\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>使用当前<code>正式所在的版本</code>找到对应的<code>版本分支</code>作为修复分支</li>\n<li>修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复</li>\n<li>测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复</li>\n<li>验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试</li>\n<li>在线上回归通过后，就可以把修复分支分别合并到<code>当前迭代版本分支</code></li>\n</ol>\n<blockquote>\n<h3 id=\"紧急修复上线流程\"><a href=\"#紧急修复上线流程\" class=\"headerlink\" title=\"紧急修复上线流程\"></a>紧急修复上线流程</h3></blockquote>\n<ul>\n<li>如果当前bug是很严重的，影响到用户使用的才需要使用紧急修复上线流程</li>\n<li>紧急修复上线必须先创建紧急修复(hotfix)分支<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_hotfix.png\"></li>\n</ul>\n<h4 id=\"操作步骤-4\"><a href=\"#操作步骤-4\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>首先使用master分支创建紧急修复分支(hotfix/xxxx) - 使用<code>hotfix</code>前缀</li>\n<li>修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复</li>\n<li>测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复</li>\n<li>验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试</li>\n<li>在线上回归通过后，就可以把修复分支分别合并到<code>前版本分支</code>和<code>当前迭代版本分支</code></li>\n<li>最后在<code>本地(local)</code>和<code>远程(origin)</code>删除修复分支</li>\n</ol>\n<blockquote>\n<h3 id=\"后端代码部署操作流程\"><a href=\"#后端代码部署操作流程\" class=\"headerlink\" title=\"后端代码部署操作流程\"></a>后端代码部署操作流程</h3></blockquote>\n<ul>\n<li>因为后端把不同模块都独立成一个composer包，所以git合并和部署流程跟前端是有区别的。这里分开来说明流程。<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_backend_git.png\"></li>\n</ul>\n<h4 id=\"操作步骤-5\"><a href=\"#操作步骤-5\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ol>\n<li>首先用每个<code>模块</code>的<code>版本分支</code>合并对应的qa分支</li>\n<li>然后切换到<code>Foundation</code>应用，然后推送对应的环境发起环境部署<ul>\n<li>如果涉及多个模块需要同时发布，那就先把所有模块先合并好环境分支，然后再推Foundation。因为Foundation的某个环境启动了部署，必须部署完后才能发起下一次部署。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Mac 破解GitKraken教程","date":"2021-08-27T07:08:00.000Z","sticky":1,"description":"本篇文章介绍了Mac版GitKraken的破解方法","keywords":"GitKraken","cover":"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/gitkraken.jpeg","photos":["https://cdn.jsdelivr.net/gh/hehuixiong/image-host/gitkraken.jpeg"],"_content":"\n## GitKraken是什么？\n\nGitKraken是基于Git代码管理的一个UI管理器，拥有非常精美的界面，可以配合Github、Gitee来使用。\n\n## 下载GitKraken\n\n我们选择在GitKraken官网安装最新版本的GitKraken，在官网安装的是收费的，这个时候不要管，先安装一遍（这里有一个小细节的问题，安装官网最新版之后在用破解版，可以免去每次打开登录一遍）\n\n## 安装GitKraken\n\n下载完成后，即可得到一个installGitKraken.dmg文件，双击安装即可，安装完成之后，双击图标打开它。\n打开之后会出现7天试用期，需要在7天后进行收费，不用管它，打开过就可以关闭了。\nps：如果以上步鄹都完成了，就可以跳过直接使用破解版的即可。\n\n## 使用破解版的GitKraken\n\n破解版的GitKraken，我存放在了百度网盘，大家直接下载即可版本是@7.0.0\n链接: https://pan.baidu.com/s/1VWWlRZNtKw_41x7x-L-k2A 提取码: giko\n下载完成之后，双击打开，里面有一个@7.0.0版本的GitKraken，把它拖动到mac访达里的应用程序，然后替换掉。\n\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_app.jpeg)\n<font color='red'> 注：双击打开它的时候，会出现文件已损坏（这个时候别将它移到垃圾桶），执行后面的操作 </font>\n\n## “Mac应用”已损坏，打不开解决办法\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_01.jpg)\n\n## 问题说明：\n通常在非 Mac App Store下载的软件都会提示“xxx已损坏，打不开。您应将它移到废纸篓”或者“打不开 xxx，因为它来自身份不明的开发者”。\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_02.jpg)\n\n## 原因：\nMac电脑启用了安全机制，默认只信任Mac App Store下载的软件以及拥有开发者 ID 签名的软件，但是同时也阻止了没有开发者签名的 “老实软件”\n\n## 解决方法：\n#### 1.打开任何来源选项\n打开「终端.app」，输入以下命令并回车，输入开机密码回车\n```\nsudo spctl --master-disable\n```\n此行代码可以让 Mac 允许安装第三方来源的应用\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_03.jpg)\n\n#### 2.macOS Catalina 10.15系统：\n打开「终端.app」，输入以下命令并回车，输入开机密码回车\n```\nsudo xattr -rd com.apple.quarantine 空格 软件的路径\n```\n如Sketch.app\n```\nsudo xattr -rd com.apple.quarantine /Applications/Sketch.app\n```\n如CleanMyMac X.app\n```\nsudo xattr -rd com.apple.quarantine /Applications/CleanMyMac X.app\n```\n附1：\n/Applications/Sketch.app\n与\n/Applications/CleanMyMac X.app\n就是\n软件的路径\n附2：\n软件路径快速获取方法：\n将软件拖入「终端app」即可获得路径\n<!-- ![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_04.gif) -->\n![](https://image.iicheese.com/z0pz5.gif)\n```\n1\n```\n\n#### 3.macOS Catalina 10.15.4 系统：更新10.15.4系统后软件出现意外退出，可按照下面的方法给软件签名\n- 1.打开「终端app」输入如下命令：\n```\nxcode-select --install\n```\n- 2.给软件签名\n打开终端工具输入并执行如下命令：\n```\nsudo codesign --force --deep --sign - (应用路径)\n```\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_05.jpg)\n注意：空格不能漏\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_06.jpg)\n- 3.错误解决\n如出现以下错误提示：\n<font color='red'> /文件位置 : replacing existing signature </font>\n<font color='red'> /文件位置 : resource fork,Finder information,or similar detritus not allowed </font>\n那么，先在终端执行：\n```\nxattr -cr /文件位置（直接将应用拖进去即可）\n```\n然后再次执行如下指令即可：\n```\ncodesign --force --deep --sign - /文件位置（直接将应用拖进去即可）\n```","source":"_posts/2021-08-27-mac-gitkraken-tutorial.md","raw":"---\ntitle: Mac 破解GitKraken教程\ndate: 2021-08-27 15:08:00\nsticky: 1\ndescription: 本篇文章介绍了Mac版GitKraken的破解方法\nkeywords: GitKraken\ncover: 'https://cdn.jsdelivr.net/gh/hehuixiong/image-host/gitkraken.jpeg'\nphotos: https://cdn.jsdelivr.net/gh/hehuixiong/image-host/gitkraken.jpeg\ntags:\n  - gitkraken\n---\n\n## GitKraken是什么？\n\nGitKraken是基于Git代码管理的一个UI管理器，拥有非常精美的界面，可以配合Github、Gitee来使用。\n\n## 下载GitKraken\n\n我们选择在GitKraken官网安装最新版本的GitKraken，在官网安装的是收费的，这个时候不要管，先安装一遍（这里有一个小细节的问题，安装官网最新版之后在用破解版，可以免去每次打开登录一遍）\n\n## 安装GitKraken\n\n下载完成后，即可得到一个installGitKraken.dmg文件，双击安装即可，安装完成之后，双击图标打开它。\n打开之后会出现7天试用期，需要在7天后进行收费，不用管它，打开过就可以关闭了。\nps：如果以上步鄹都完成了，就可以跳过直接使用破解版的即可。\n\n## 使用破解版的GitKraken\n\n破解版的GitKraken，我存放在了百度网盘，大家直接下载即可版本是@7.0.0\n链接: https://pan.baidu.com/s/1VWWlRZNtKw_41x7x-L-k2A 提取码: giko\n下载完成之后，双击打开，里面有一个@7.0.0版本的GitKraken，把它拖动到mac访达里的应用程序，然后替换掉。\n\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_app.jpeg)\n<font color='red'> 注：双击打开它的时候，会出现文件已损坏（这个时候别将它移到垃圾桶），执行后面的操作 </font>\n\n## “Mac应用”已损坏，打不开解决办法\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_01.jpg)\n\n## 问题说明：\n通常在非 Mac App Store下载的软件都会提示“xxx已损坏，打不开。您应将它移到废纸篓”或者“打不开 xxx，因为它来自身份不明的开发者”。\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_02.jpg)\n\n## 原因：\nMac电脑启用了安全机制，默认只信任Mac App Store下载的软件以及拥有开发者 ID 签名的软件，但是同时也阻止了没有开发者签名的 “老实软件”\n\n## 解决方法：\n#### 1.打开任何来源选项\n打开「终端.app」，输入以下命令并回车，输入开机密码回车\n```\nsudo spctl --master-disable\n```\n此行代码可以让 Mac 允许安装第三方来源的应用\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_03.jpg)\n\n#### 2.macOS Catalina 10.15系统：\n打开「终端.app」，输入以下命令并回车，输入开机密码回车\n```\nsudo xattr -rd com.apple.quarantine 空格 软件的路径\n```\n如Sketch.app\n```\nsudo xattr -rd com.apple.quarantine /Applications/Sketch.app\n```\n如CleanMyMac X.app\n```\nsudo xattr -rd com.apple.quarantine /Applications/CleanMyMac X.app\n```\n附1：\n/Applications/Sketch.app\n与\n/Applications/CleanMyMac X.app\n就是\n软件的路径\n附2：\n软件路径快速获取方法：\n将软件拖入「终端app」即可获得路径\n<!-- ![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_04.gif) -->\n![](https://image.iicheese.com/z0pz5.gif)\n```\n1\n```\n\n#### 3.macOS Catalina 10.15.4 系统：更新10.15.4系统后软件出现意外退出，可按照下面的方法给软件签名\n- 1.打开「终端app」输入如下命令：\n```\nxcode-select --install\n```\n- 2.给软件签名\n打开终端工具输入并执行如下命令：\n```\nsudo codesign --force --deep --sign - (应用路径)\n```\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_05.jpg)\n注意：空格不能漏\n![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_06.jpg)\n- 3.错误解决\n如出现以下错误提示：\n<font color='red'> /文件位置 : replacing existing signature </font>\n<font color='red'> /文件位置 : resource fork,Finder information,or similar detritus not allowed </font>\n那么，先在终端执行：\n```\nxattr -cr /文件位置（直接将应用拖进去即可）\n```\n然后再次执行如下指令即可：\n```\ncodesign --force --deep --sign - /文件位置（直接将应用拖进去即可）\n```","slug":"2021-08-27-mac-gitkraken-tutorial","published":1,"updated":"2021-08-27T07:28:00.888Z","comments":1,"layout":"post","link":"","_id":"cksv3zgrn00070c9kfpdda8ez","content":"<h2 id=\"GitKraken是什么？\"><a href=\"#GitKraken是什么？\" class=\"headerlink\" title=\"GitKraken是什么？\"></a>GitKraken是什么？</h2><p>GitKraken是基于Git代码管理的一个UI管理器，拥有非常精美的界面，可以配合Github、Gitee来使用。</p>\n<h2 id=\"下载GitKraken\"><a href=\"#下载GitKraken\" class=\"headerlink\" title=\"下载GitKraken\"></a>下载GitKraken</h2><p>我们选择在GitKraken官网安装最新版本的GitKraken，在官网安装的是收费的，这个时候不要管，先安装一遍（这里有一个小细节的问题，安装官网最新版之后在用破解版，可以免去每次打开登录一遍）</p>\n<h2 id=\"安装GitKraken\"><a href=\"#安装GitKraken\" class=\"headerlink\" title=\"安装GitKraken\"></a>安装GitKraken</h2><p>下载完成后，即可得到一个installGitKraken.dmg文件，双击安装即可，安装完成之后，双击图标打开它。<br>打开之后会出现7天试用期，需要在7天后进行收费，不用管它，打开过就可以关闭了。<br>ps：如果以上步鄹都完成了，就可以跳过直接使用破解版的即可。</p>\n<h2 id=\"使用破解版的GitKraken\"><a href=\"#使用破解版的GitKraken\" class=\"headerlink\" title=\"使用破解版的GitKraken\"></a>使用破解版的GitKraken</h2><p>破解版的GitKraken，我存放在了百度网盘，大家直接下载即可版本是@7.0.0<br>链接: <a href=\"https://pan.baidu.com/s/1VWWlRZNtKw_41x7x-L-k2A\">https://pan.baidu.com/s/1VWWlRZNtKw_41x7x-L-k2A</a> 提取码: giko<br>下载完成之后，双击打开，里面有一个@7.0.0版本的GitKraken，把它拖动到mac访达里的应用程序，然后替换掉。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_app.jpeg\"><br><font color='red'> 注：双击打开它的时候，会出现文件已损坏（这个时候别将它移到垃圾桶），执行后面的操作 </font></p>\n<h2 id=\"“Mac应用”已损坏，打不开解决办法\"><a href=\"#“Mac应用”已损坏，打不开解决办法\" class=\"headerlink\" title=\"“Mac应用”已损坏，打不开解决办法\"></a>“Mac应用”已损坏，打不开解决办法</h2><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_01.jpg\"></p>\n<h2 id=\"问题说明：\"><a href=\"#问题说明：\" class=\"headerlink\" title=\"问题说明：\"></a>问题说明：</h2><p>通常在非 Mac App Store下载的软件都会提示“xxx已损坏，打不开。您应将它移到废纸篓”或者“打不开 xxx，因为它来自身份不明的开发者”。<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_02.jpg\"></p>\n<h2 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h2><p>Mac电脑启用了安全机制，默认只信任Mac App Store下载的软件以及拥有开发者 ID 签名的软件，但是同时也阻止了没有开发者签名的 “老实软件”</p>\n<h2 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h2><h4 id=\"1-打开任何来源选项\"><a href=\"#1-打开任何来源选项\" class=\"headerlink\" title=\"1.打开任何来源选项\"></a>1.打开任何来源选项</h4><p>打开「终端.app」，输入以下命令并回车，输入开机密码回车</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo spctl --master-disable</code></pre>\n<p>此行代码可以让 Mac 允许安装第三方来源的应用<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_03.jpg\"></p>\n<h4 id=\"2-macOS-Catalina-10-15系统：\"><a href=\"#2-macOS-Catalina-10-15系统：\" class=\"headerlink\" title=\"2.macOS Catalina 10.15系统：\"></a>2.macOS Catalina 10.15系统：</h4><p>打开「终端.app」，输入以下命令并回车，输入开机密码回车</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo xattr -rd com.apple.quarantine 空格 软件的路径</code></pre>\n<p>如Sketch.app</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo xattr -rd com.apple.quarantine &#x2F;Applications&#x2F;Sketch.app</code></pre>\n<p>如CleanMyMac X.app</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo xattr -rd com.apple.quarantine &#x2F;Applications&#x2F;CleanMyMac X.app</code></pre>\n<p>附1：<br>/Applications/Sketch.app<br>与<br>/Applications/CleanMyMac X.app<br>就是<br>软件的路径<br>附2：<br>软件路径快速获取方法：<br>将软件拖入「终端app」即可获得路径</p>\n<!-- ![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_04.gif) -->\n<p><img src=\"https://image.iicheese.com/z0pz5.gif\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1</code></pre>\n\n<h4 id=\"3-macOS-Catalina-10-15-4-系统：更新10-15-4系统后软件出现意外退出，可按照下面的方法给软件签名\"><a href=\"#3-macOS-Catalina-10-15-4-系统：更新10-15-4系统后软件出现意外退出，可按照下面的方法给软件签名\" class=\"headerlink\" title=\"3.macOS Catalina 10.15.4 系统：更新10.15.4系统后软件出现意外退出，可按照下面的方法给软件签名\"></a>3.macOS Catalina 10.15.4 系统：更新10.15.4系统后软件出现意外退出，可按照下面的方法给软件签名</h4><ul>\n<li>1.打开「终端app」输入如下命令：<pre class=\"line-numbers language-none\"><code class=\"language-none\">xcode-select --install</code></pre></li>\n<li>2.给软件签名<br>打开终端工具输入并执行如下命令：<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo codesign --force --deep --sign - (应用路径)</code></pre>\n<img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_05.jpg\"><br>注意：空格不能漏<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_06.jpg\"></li>\n<li>3.错误解决<br>如出现以下错误提示：<br><font color='red'> /文件位置 : replacing existing signature </font><br><font color='red'> /文件位置 : resource fork,Finder information,or similar detritus not allowed </font><br>那么，先在终端执行：<pre class=\"line-numbers language-none\"><code class=\"language-none\">xattr -cr &#x2F;文件位置（直接将应用拖进去即可）</code></pre>\n然后再次执行如下指令即可：<pre class=\"line-numbers language-none\"><code class=\"language-none\">codesign --force --deep --sign - &#x2F;文件位置（直接将应用拖进去即可）</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GitKraken是什么？\"><a href=\"#GitKraken是什么？\" class=\"headerlink\" title=\"GitKraken是什么？\"></a>GitKraken是什么？</h2><p>GitKraken是基于Git代码管理的一个UI管理器，拥有非常精美的界面，可以配合Github、Gitee来使用。</p>\n<h2 id=\"下载GitKraken\"><a href=\"#下载GitKraken\" class=\"headerlink\" title=\"下载GitKraken\"></a>下载GitKraken</h2><p>我们选择在GitKraken官网安装最新版本的GitKraken，在官网安装的是收费的，这个时候不要管，先安装一遍（这里有一个小细节的问题，安装官网最新版之后在用破解版，可以免去每次打开登录一遍）</p>\n<h2 id=\"安装GitKraken\"><a href=\"#安装GitKraken\" class=\"headerlink\" title=\"安装GitKraken\"></a>安装GitKraken</h2><p>下载完成后，即可得到一个installGitKraken.dmg文件，双击安装即可，安装完成之后，双击图标打开它。<br>打开之后会出现7天试用期，需要在7天后进行收费，不用管它，打开过就可以关闭了。<br>ps：如果以上步鄹都完成了，就可以跳过直接使用破解版的即可。</p>\n<h2 id=\"使用破解版的GitKraken\"><a href=\"#使用破解版的GitKraken\" class=\"headerlink\" title=\"使用破解版的GitKraken\"></a>使用破解版的GitKraken</h2><p>破解版的GitKraken，我存放在了百度网盘，大家直接下载即可版本是@7.0.0<br>链接: <a href=\"https://pan.baidu.com/s/1VWWlRZNtKw_41x7x-L-k2A\">https://pan.baidu.com/s/1VWWlRZNtKw_41x7x-L-k2A</a> 提取码: giko<br>下载完成之后，双击打开，里面有一个@7.0.0版本的GitKraken，把它拖动到mac访达里的应用程序，然后替换掉。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/agile_app.jpeg\"><br><font color='red'> 注：双击打开它的时候，会出现文件已损坏（这个时候别将它移到垃圾桶），执行后面的操作 </font></p>\n<h2 id=\"“Mac应用”已损坏，打不开解决办法\"><a href=\"#“Mac应用”已损坏，打不开解决办法\" class=\"headerlink\" title=\"“Mac应用”已损坏，打不开解决办法\"></a>“Mac应用”已损坏，打不开解决办法</h2><p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_01.jpg\"></p>\n<h2 id=\"问题说明：\"><a href=\"#问题说明：\" class=\"headerlink\" title=\"问题说明：\"></a>问题说明：</h2><p>通常在非 Mac App Store下载的软件都会提示“xxx已损坏，打不开。您应将它移到废纸篓”或者“打不开 xxx，因为它来自身份不明的开发者”。<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_02.jpg\"></p>\n<h2 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h2><p>Mac电脑启用了安全机制，默认只信任Mac App Store下载的软件以及拥有开发者 ID 签名的软件，但是同时也阻止了没有开发者签名的 “老实软件”</p>\n<h2 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h2><h4 id=\"1-打开任何来源选项\"><a href=\"#1-打开任何来源选项\" class=\"headerlink\" title=\"1.打开任何来源选项\"></a>1.打开任何来源选项</h4><p>打开「终端.app」，输入以下命令并回车，输入开机密码回车</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo spctl --master-disable</code></pre>\n<p>此行代码可以让 Mac 允许安装第三方来源的应用<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_03.jpg\"></p>\n<h4 id=\"2-macOS-Catalina-10-15系统：\"><a href=\"#2-macOS-Catalina-10-15系统：\" class=\"headerlink\" title=\"2.macOS Catalina 10.15系统：\"></a>2.macOS Catalina 10.15系统：</h4><p>打开「终端.app」，输入以下命令并回车，输入开机密码回车</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo xattr -rd com.apple.quarantine 空格 软件的路径</code></pre>\n<p>如Sketch.app</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo xattr -rd com.apple.quarantine &#x2F;Applications&#x2F;Sketch.app</code></pre>\n<p>如CleanMyMac X.app</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo xattr -rd com.apple.quarantine &#x2F;Applications&#x2F;CleanMyMac X.app</code></pre>\n<p>附1：<br>/Applications/Sketch.app<br>与<br>/Applications/CleanMyMac X.app<br>就是<br>软件的路径<br>附2：<br>软件路径快速获取方法：<br>将软件拖入「终端app」即可获得路径</p>\n<!-- ![](https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_04.gif) -->\n<p><img src=\"https://image.iicheese.com/z0pz5.gif\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1</code></pre>\n\n<h4 id=\"3-macOS-Catalina-10-15-4-系统：更新10-15-4系统后软件出现意外退出，可按照下面的方法给软件签名\"><a href=\"#3-macOS-Catalina-10-15-4-系统：更新10-15-4系统后软件出现意外退出，可按照下面的方法给软件签名\" class=\"headerlink\" title=\"3.macOS Catalina 10.15.4 系统：更新10.15.4系统后软件出现意外退出，可按照下面的方法给软件签名\"></a>3.macOS Catalina 10.15.4 系统：更新10.15.4系统后软件出现意外退出，可按照下面的方法给软件签名</h4><ul>\n<li>1.打开「终端app」输入如下命令：<pre class=\"line-numbers language-none\"><code class=\"language-none\">xcode-select --install</code></pre></li>\n<li>2.给软件签名<br>打开终端工具输入并执行如下命令：<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo codesign --force --deep --sign - (应用路径)</code></pre>\n<img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_05.jpg\"><br>注意：空格不能漏<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-host/mac_damage_06.jpg\"></li>\n<li>3.错误解决<br>如出现以下错误提示：<br><font color='red'> /文件位置 : replacing existing signature </font><br><font color='red'> /文件位置 : resource fork,Finder information,or similar detritus not allowed </font><br>那么，先在终端执行：<pre class=\"line-numbers language-none\"><code class=\"language-none\">xattr -cr &#x2F;文件位置（直接将应用拖进去即可）</code></pre>\n然后再次执行如下指令即可：<pre class=\"line-numbers language-none\"><code class=\"language-none\">codesign --force --deep --sign - &#x2F;文件位置（直接将应用拖进去即可）</code></pre></li>\n</ul>\n"},{"title":"使用Console技巧提高JS调试技能","date":"2021-08-01T12:20:12.000Z","cover":"https://images.unsplash.com/photo-1522252234503-e356532cafd5","_content":"其实 JavaScript 给到我们很多调试工具来调试代码，那问问你自己，你又知道多少呢？用到多少呢？\n\n大部分前端开发在 JavaScript 调试代码的常规用法都是直接console.log，直接输出某一个变量或者返回数据里面的对象数据。当然毋庸置疑这样输出来调试是没有问题的。但是不是最优雅的方式来调试代码，其实还有更好的办法。作为一个有追求的技术人才，有更好的调试方式为什么不去使用呢？\n\n![](https://s2.ax1x.com/2019/10/11/ubREy4.png)\n我们先来了解清楚浏览器的console。浏览器的console对象有提供自带的调试控制台。console对象只能在浏览器的 JavaScript 中使用，也就是说客户端应用可用而服务端应用不可用。它的作用或者效果会根据不同的浏览器而不同，但是基础使用方式和功能是基本一致的。不过console是可以在任何前端语言或者框架中使用。\n***\n\n## console.log\n最常用的使用方式就是console.log，对前端开发工程师来说就是家常便饭了。以下是一个简单的使用例子。\n\n```javascript\nfunction sayHello(name) {\n  console.log(name)\n}\n\nsayHello('Indrek')\n```\n\n> 以上sayHello方法接收一个名字，然后在控制台输出出来。\n\n![](https://s2.ax1x.com/2019/10/12/ujmEr9.png)\n\n现在我们开始玩以下更有趣的调试方法。加入我们现在想知道sayHello这个方法被调用了多少次，这样我们应该怎么调试呢？其实有一个很简单的办法就是使用console.count().\n***\n\n## console.count\ncount()方法会输出某一个标示被调用了几次。如果没有穿任何参数，count()默认为使用默认标示defaut。\n\n```javascript\nfunction sayHello(name) {\n  console.count()\n  console.log(name)\n}\n\nsayHello('Indrek')\nsayHello('William')\nsayHello('Kelly')\n```\n\n> 以上代码就会在控制台输出以下结果：\n\n![](https://s2.ax1x.com/2019/10/12/ujm7ZR.png)\n上面的例子实现了统计某一个方法被调用的次数，那如果我们想统计每个同名字(name)的在这个方法里面被调用了多少次呢？要调试这种其实也很简单，只要直接吧name直接传入count就可以了。\n\n```javascript\nfunction sayHello(name) {\n  console.count(name)\n}\n\nsayHello('Indrek')\nsayHello('William')\nsayHello('Kelly')\nsayHello('Indrek')\n```\n‍(∩｀-´)⊃━☆ﾟ.*・｡ﾟ 巴拉巴拉！就是那么简单，我们就可以跟踪同名的参数在sayHello方法里面被调用的次数了！\n\n![](https://s2.ax1x.com/2019/10/13/uj1xhR.png)\n***\n\n## console.warn\n\n这个控台答应方法会输出一个警告信息。在你开发 APIs 或者开发工具的时候使用。console.warn这个方法在你需要警告用户的时候特别实用，例如漏掉了某个参数或者是让开发者知道你的 API/插件包的版本已经失效的时候使用。\n\n```javascript\nfunction sayHello(name) {\n  if (!name) {\n    console.warn('No name given')\n  }\n}\n\nsayHello()\n```\n\n> 上面的代码检测了sayHello方法的参数是否漏传。如果name参数没有传，一个警告消息就会被打印到控制台中。让开发者可以思考问题出在哪里。\n\n![](https://s2.ax1x.com/2019/10/13/uj85Q0.png)\n***\n\n## console.table\n如果是我们在调试数组或者对象时，console.table是一个非常实用的调试方法来在控制台打印数据。数组里面的每一个元素都会在表格的行里面展示。以下是的水果名数组作为一个例子，如果我们把这个数组传入console.table，我们会看到一个含有这个水果名数据以表格的方式在控制台被打印出来。\n\n```javascript\nconst fruits = ['kiwi', 'banana', 'strawberry']\n\nconsole.table(fruits)\n```\n\n> 我们一起来围观以下在控制台里面的展示效果\n\n![](https://s2.ax1x.com/2019/10/13/ujGlkQ.png)\n\n看到了这个，你会不会灵光一闪想到 mmp，如果是一个很大的数组这种表格化的展示方式是多么的实用啊！对的！例如一个上百个数据的数组，我们使用这种调试方法来打印就很方便了。为了可以让我们用双眼见证这个说法的真实性，我们用代码说话吧！\n\n```javascript\nconst fruits = [\n  'Apple',\n  'Watermelon',\n  'Orange',\n  'Pear',\n  'Cherry',\n  'Strawberry',\n  'Nectarine',\n  'Grape',\n  'Mango',\n  'Blueberry',\n  'Pomegranate',\n  'Carambola',\n  'Plum',\n  'Banana',\n  'Raspberry',\n  'Mandarin',\n  'Jackfruit',\n  'Papaya',\n  'Kiwi',\n  'Pineapple',\n  'Lime',\n  'Lemon',\n  'Apricot',\n  'Grapefruit',\n  'Melon',\n  'Coconut',\n  'Avocado',\n  'Peach',\n]\n```\n我们使用console.table来打印一下上面这个大数组试试看吧。\n\n![](https://s2.ax1x.com/2019/10/13/ujGvNQ.png)\n\n> 这种展示方式简直就是一目了然！这样妈妈再也不用担心我们调试数据的时候蒙圈了！՞༘✡ (๑ •̀ㅂ•́)و✧\n\n但是问题少年们，我们可是有梦想的工程师，如果是用来调试对象会是怎么样呢？来吧亲自动手丰衣足食，上代码！\n\n```javascript\nconst pets = {\n  name: 'Simon',\n  type: 'cat',\n}\n\nconsole.table(pets)\n```\n注意了兄弟姐妹们，现在我们打印的是对象不是数组。在控制台的表格现在有两个键值name和type。之前是 0，1，2，3，4…\n![](src=\"https://s2.ax1x.com/2019/10/13/ujtOHK.png\")\n\n这种方式可以替代普遍使用的直接用 log 打印对象数据，表格化的展示相对还是更加清晰的。问题少年再次发问，如果我们想多个对象一起打印呢？\n\n```javascript\nconst pets = {\n  name: 'Simon',\n  type: 'cat',\n}\n\nconst person = {\n  firstName: 'Indrek',\n  lastName: 'Lasn',\n}\n\nconsole.table(pets, person)\n```\n与预想一致，两个不同键值的对象被才分成两个表格在控制台打印出来了。\n![](https://s2.ax1x.com/2019/10/13/ujNQuq.png)\n\n如果我们不想分开两个表格打印，可否在一个表格显示呢？可以的！只要把两个对象放入一个数组就 ok 了。\n\n```javascript\nconst pets = {\n  name: 'Simon',\n  type: 'cat',\n}\n\nconst person = {\n  firstName: 'Indrek',\n  lastName: 'Lasn',\n}\n\nconsole.table([pets, person])\n```\n现在我们看到两个对象在一个表格里面展示了，键值被放在表格的头部了，因为键值在两个对象里面是不一样的。\n![](https://s2.ax1x.com/2019/10/13/ujNtC4.png)\n***\n\n## console.group\n当我们是在调试集合（sets）或者是关联数据（linked-data），可以使用嵌套组来优化你的控制台输出。使用console.group()来创建一个嵌套的组。\n\n```javascript\nconsole.log('This is the first level')\nconsole.group()\nconsole.log('Level 2')\nconsole.group()\nconsole.log('Level 3')\nconsole.warn('More of level 3')\nconsole.groupEnd()\nconsole.log('Back to level 2')\nconsole.groupEnd()\nconsole.log('Back to the first level')\n```\n以下是一个嵌套的层级提示输出，在调试关联或者层级数据的时候特别实用。\n![](https://s2.ax1x.com/2019/10/13/ujNy5D.png)\n\n> 使用console.groupCollapsed()可以把所有嵌套的层级收起来，使用鼠标点击时可以展开查看。\n\n***\n\n## 总结\n作为一名优秀的程序员，我们应该尽量在合适的场景或者合适的情况下运用在提供到给我的调试工具。所以这一篇文章提到的调试方式，我们应该在开发调试的过程中多合理运用，习惯后我们会发现调试起来会更加敏捷和高效。\n***\n\n> #通过技术悟出人生道理# 💭\n> “人生无常，写的了一行是一行\n> Code now or never” ～ 络·擎 NetEngine","source":"_posts/2021-08-01-console-js-debug.md","raw":"---\ntitle: \"使用Console技巧提高JS调试技能\"\ndate: 2021-08-01 20:20:12\ncover: https://images.unsplash.com/photo-1522252234503-e356532cafd5\ncategories:\n  - 调试\ntags:\n  - console\n---\n其实 JavaScript 给到我们很多调试工具来调试代码，那问问你自己，你又知道多少呢？用到多少呢？\n\n大部分前端开发在 JavaScript 调试代码的常规用法都是直接console.log，直接输出某一个变量或者返回数据里面的对象数据。当然毋庸置疑这样输出来调试是没有问题的。但是不是最优雅的方式来调试代码，其实还有更好的办法。作为一个有追求的技术人才，有更好的调试方式为什么不去使用呢？\n\n![](https://s2.ax1x.com/2019/10/11/ubREy4.png)\n我们先来了解清楚浏览器的console。浏览器的console对象有提供自带的调试控制台。console对象只能在浏览器的 JavaScript 中使用，也就是说客户端应用可用而服务端应用不可用。它的作用或者效果会根据不同的浏览器而不同，但是基础使用方式和功能是基本一致的。不过console是可以在任何前端语言或者框架中使用。\n***\n\n## console.log\n最常用的使用方式就是console.log，对前端开发工程师来说就是家常便饭了。以下是一个简单的使用例子。\n\n```javascript\nfunction sayHello(name) {\n  console.log(name)\n}\n\nsayHello('Indrek')\n```\n\n> 以上sayHello方法接收一个名字，然后在控制台输出出来。\n\n![](https://s2.ax1x.com/2019/10/12/ujmEr9.png)\n\n现在我们开始玩以下更有趣的调试方法。加入我们现在想知道sayHello这个方法被调用了多少次，这样我们应该怎么调试呢？其实有一个很简单的办法就是使用console.count().\n***\n\n## console.count\ncount()方法会输出某一个标示被调用了几次。如果没有穿任何参数，count()默认为使用默认标示defaut。\n\n```javascript\nfunction sayHello(name) {\n  console.count()\n  console.log(name)\n}\n\nsayHello('Indrek')\nsayHello('William')\nsayHello('Kelly')\n```\n\n> 以上代码就会在控制台输出以下结果：\n\n![](https://s2.ax1x.com/2019/10/12/ujm7ZR.png)\n上面的例子实现了统计某一个方法被调用的次数，那如果我们想统计每个同名字(name)的在这个方法里面被调用了多少次呢？要调试这种其实也很简单，只要直接吧name直接传入count就可以了。\n\n```javascript\nfunction sayHello(name) {\n  console.count(name)\n}\n\nsayHello('Indrek')\nsayHello('William')\nsayHello('Kelly')\nsayHello('Indrek')\n```\n‍(∩｀-´)⊃━☆ﾟ.*・｡ﾟ 巴拉巴拉！就是那么简单，我们就可以跟踪同名的参数在sayHello方法里面被调用的次数了！\n\n![](https://s2.ax1x.com/2019/10/13/uj1xhR.png)\n***\n\n## console.warn\n\n这个控台答应方法会输出一个警告信息。在你开发 APIs 或者开发工具的时候使用。console.warn这个方法在你需要警告用户的时候特别实用，例如漏掉了某个参数或者是让开发者知道你的 API/插件包的版本已经失效的时候使用。\n\n```javascript\nfunction sayHello(name) {\n  if (!name) {\n    console.warn('No name given')\n  }\n}\n\nsayHello()\n```\n\n> 上面的代码检测了sayHello方法的参数是否漏传。如果name参数没有传，一个警告消息就会被打印到控制台中。让开发者可以思考问题出在哪里。\n\n![](https://s2.ax1x.com/2019/10/13/uj85Q0.png)\n***\n\n## console.table\n如果是我们在调试数组或者对象时，console.table是一个非常实用的调试方法来在控制台打印数据。数组里面的每一个元素都会在表格的行里面展示。以下是的水果名数组作为一个例子，如果我们把这个数组传入console.table，我们会看到一个含有这个水果名数据以表格的方式在控制台被打印出来。\n\n```javascript\nconst fruits = ['kiwi', 'banana', 'strawberry']\n\nconsole.table(fruits)\n```\n\n> 我们一起来围观以下在控制台里面的展示效果\n\n![](https://s2.ax1x.com/2019/10/13/ujGlkQ.png)\n\n看到了这个，你会不会灵光一闪想到 mmp，如果是一个很大的数组这种表格化的展示方式是多么的实用啊！对的！例如一个上百个数据的数组，我们使用这种调试方法来打印就很方便了。为了可以让我们用双眼见证这个说法的真实性，我们用代码说话吧！\n\n```javascript\nconst fruits = [\n  'Apple',\n  'Watermelon',\n  'Orange',\n  'Pear',\n  'Cherry',\n  'Strawberry',\n  'Nectarine',\n  'Grape',\n  'Mango',\n  'Blueberry',\n  'Pomegranate',\n  'Carambola',\n  'Plum',\n  'Banana',\n  'Raspberry',\n  'Mandarin',\n  'Jackfruit',\n  'Papaya',\n  'Kiwi',\n  'Pineapple',\n  'Lime',\n  'Lemon',\n  'Apricot',\n  'Grapefruit',\n  'Melon',\n  'Coconut',\n  'Avocado',\n  'Peach',\n]\n```\n我们使用console.table来打印一下上面这个大数组试试看吧。\n\n![](https://s2.ax1x.com/2019/10/13/ujGvNQ.png)\n\n> 这种展示方式简直就是一目了然！这样妈妈再也不用担心我们调试数据的时候蒙圈了！՞༘✡ (๑ •̀ㅂ•́)و✧\n\n但是问题少年们，我们可是有梦想的工程师，如果是用来调试对象会是怎么样呢？来吧亲自动手丰衣足食，上代码！\n\n```javascript\nconst pets = {\n  name: 'Simon',\n  type: 'cat',\n}\n\nconsole.table(pets)\n```\n注意了兄弟姐妹们，现在我们打印的是对象不是数组。在控制台的表格现在有两个键值name和type。之前是 0，1，2，3，4…\n![](src=\"https://s2.ax1x.com/2019/10/13/ujtOHK.png\")\n\n这种方式可以替代普遍使用的直接用 log 打印对象数据，表格化的展示相对还是更加清晰的。问题少年再次发问，如果我们想多个对象一起打印呢？\n\n```javascript\nconst pets = {\n  name: 'Simon',\n  type: 'cat',\n}\n\nconst person = {\n  firstName: 'Indrek',\n  lastName: 'Lasn',\n}\n\nconsole.table(pets, person)\n```\n与预想一致，两个不同键值的对象被才分成两个表格在控制台打印出来了。\n![](https://s2.ax1x.com/2019/10/13/ujNQuq.png)\n\n如果我们不想分开两个表格打印，可否在一个表格显示呢？可以的！只要把两个对象放入一个数组就 ok 了。\n\n```javascript\nconst pets = {\n  name: 'Simon',\n  type: 'cat',\n}\n\nconst person = {\n  firstName: 'Indrek',\n  lastName: 'Lasn',\n}\n\nconsole.table([pets, person])\n```\n现在我们看到两个对象在一个表格里面展示了，键值被放在表格的头部了，因为键值在两个对象里面是不一样的。\n![](https://s2.ax1x.com/2019/10/13/ujNtC4.png)\n***\n\n## console.group\n当我们是在调试集合（sets）或者是关联数据（linked-data），可以使用嵌套组来优化你的控制台输出。使用console.group()来创建一个嵌套的组。\n\n```javascript\nconsole.log('This is the first level')\nconsole.group()\nconsole.log('Level 2')\nconsole.group()\nconsole.log('Level 3')\nconsole.warn('More of level 3')\nconsole.groupEnd()\nconsole.log('Back to level 2')\nconsole.groupEnd()\nconsole.log('Back to the first level')\n```\n以下是一个嵌套的层级提示输出，在调试关联或者层级数据的时候特别实用。\n![](https://s2.ax1x.com/2019/10/13/ujNy5D.png)\n\n> 使用console.groupCollapsed()可以把所有嵌套的层级收起来，使用鼠标点击时可以展开查看。\n\n***\n\n## 总结\n作为一名优秀的程序员，我们应该尽量在合适的场景或者合适的情况下运用在提供到给我的调试工具。所以这一篇文章提到的调试方式，我们应该在开发调试的过程中多合理运用，习惯后我们会发现调试起来会更加敏捷和高效。\n***\n\n> #通过技术悟出人生道理# 💭\n> “人生无常，写的了一行是一行\n> Code now or never” ～ 络·擎 NetEngine","slug":"2021-08-01-console-js-debug","published":1,"updated":"2021-08-27T10:04:52.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksv3zgro00080c9kflr6d907","content":"<p>其实 JavaScript 给到我们很多调试工具来调试代码，那问问你自己，你又知道多少呢？用到多少呢？</p>\n<p>大部分前端开发在 JavaScript 调试代码的常规用法都是直接console.log，直接输出某一个变量或者返回数据里面的对象数据。当然毋庸置疑这样输出来调试是没有问题的。但是不是最优雅的方式来调试代码，其实还有更好的办法。作为一个有追求的技术人才，有更好的调试方式为什么不去使用呢？</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/11/ubREy4.png\"><br>我们先来了解清楚浏览器的console。浏览器的console对象有提供自带的调试控制台。console对象只能在浏览器的 JavaScript 中使用，也就是说客户端应用可用而服务端应用不可用。它的作用或者效果会根据不同的浏览器而不同，但是基础使用方式和功能是基本一致的。不过console是可以在任何前端语言或者框架中使用。</p>\n<hr>\n<h2 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a>console.log</h2><p>最常用的使用方式就是console.log，对前端开发工程师来说就是家常便饭了。以下是一个简单的使用例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  console.log(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以上sayHello方法接收一个名字，然后在控制台输出出来。</p></blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/ujmEr9.png\"></p>\n<p>现在我们开始玩以下更有趣的调试方法。加入我们现在想知道sayHello这个方法被调用了多少次，这样我们应该怎么调试呢？其实有一个很简单的办法就是使用console.count().</p>\n<hr>\n<h2 id=\"console-count\"><a href=\"#console-count\" class=\"headerlink\" title=\"console.count\"></a>console.count</h2><p>count()方法会输出某一个标示被调用了几次。如果没有穿任何参数，count()默认为使用默认标示defaut。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  console.count()\n  console.log(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)\nsayHello(&#39;William&#39;)\nsayHello(&#39;Kelly&#39;)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以上代码就会在控制台输出以下结果：</p></blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/ujm7ZR.png\"><br>上面的例子实现了统计某一个方法被调用的次数，那如果我们想统计每个同名字(name)的在这个方法里面被调用了多少次呢？要调试这种其实也很简单，只要直接吧name直接传入count就可以了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  console.count(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)\nsayHello(&#39;William&#39;)\nsayHello(&#39;Kelly&#39;)\nsayHello(&#39;Indrek&#39;)</code></pre>\n<p>‍(∩｀-´)⊃━☆ﾟ.*・｡ﾟ 巴拉巴拉！就是那么简单，我们就可以跟踪同名的参数在sayHello方法里面被调用的次数了！</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/uj1xhR.png\"></p>\n<hr>\n<h2 id=\"console-warn\"><a href=\"#console-warn\" class=\"headerlink\" title=\"console.warn\"></a>console.warn</h2><p>这个控台答应方法会输出一个警告信息。在你开发 APIs 或者开发工具的时候使用。console.warn这个方法在你需要警告用户的时候特别实用，例如漏掉了某个参数或者是让开发者知道你的 API/插件包的版本已经失效的时候使用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  if (!name) &#123;\n    console.warn(&#39;No name given&#39;)\n  &#125;\n&#125;\n\nsayHello()</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>上面的代码检测了sayHello方法的参数是否漏传。如果name参数没有传，一个警告消息就会被打印到控制台中。让开发者可以思考问题出在哪里。</p></blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/uj85Q0.png\"></p>\n<hr>\n<h2 id=\"console-table\"><a href=\"#console-table\" class=\"headerlink\" title=\"console.table\"></a>console.table</h2><p>如果是我们在调试数组或者对象时，console.table是一个非常实用的调试方法来在控制台打印数据。数组里面的每一个元素都会在表格的行里面展示。以下是的水果名数组作为一个例子，如果我们把这个数组传入console.table，我们会看到一个含有这个水果名数据以表格的方式在控制台被打印出来。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fruits &#x3D; [&#39;kiwi&#39;, &#39;banana&#39;, &#39;strawberry&#39;]\n\nconsole.table(fruits)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们一起来围观以下在控制台里面的展示效果</p></blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/ujGlkQ.png\"></p>\n<p>看到了这个，你会不会灵光一闪想到 mmp，如果是一个很大的数组这种表格化的展示方式是多么的实用啊！对的！例如一个上百个数据的数组，我们使用这种调试方法来打印就很方便了。为了可以让我们用双眼见证这个说法的真实性，我们用代码说话吧！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fruits &#x3D; [\n  &#39;Apple&#39;,\n  &#39;Watermelon&#39;,\n  &#39;Orange&#39;,\n  &#39;Pear&#39;,\n  &#39;Cherry&#39;,\n  &#39;Strawberry&#39;,\n  &#39;Nectarine&#39;,\n  &#39;Grape&#39;,\n  &#39;Mango&#39;,\n  &#39;Blueberry&#39;,\n  &#39;Pomegranate&#39;,\n  &#39;Carambola&#39;,\n  &#39;Plum&#39;,\n  &#39;Banana&#39;,\n  &#39;Raspberry&#39;,\n  &#39;Mandarin&#39;,\n  &#39;Jackfruit&#39;,\n  &#39;Papaya&#39;,\n  &#39;Kiwi&#39;,\n  &#39;Pineapple&#39;,\n  &#39;Lime&#39;,\n  &#39;Lemon&#39;,\n  &#39;Apricot&#39;,\n  &#39;Grapefruit&#39;,\n  &#39;Melon&#39;,\n  &#39;Coconut&#39;,\n  &#39;Avocado&#39;,\n  &#39;Peach&#39;,\n]</code></pre>\n<p>我们使用console.table来打印一下上面这个大数组试试看吧。</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/ujGvNQ.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这种展示方式简直就是一目了然！这样妈妈再也不用担心我们调试数据的时候蒙圈了！՞༘✡ (๑ •̀ㅂ•́)و✧</p></blockquote>\n<p>但是问题少年们，我们可是有梦想的工程师，如果是用来调试对象会是怎么样呢？来吧亲自动手丰衣足食，上代码！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconsole.table(pets)</code></pre>\n<p>注意了兄弟姐妹们，现在我们打印的是对象不是数组。在控制台的表格现在有两个键值name和type。之前是 0，1，2，3，4…<br><img src=\"src=%22https://s2.ax1x.com/2019/10/13/ujtOHK.png%22\"></p>\n<p>这种方式可以替代普遍使用的直接用 log 打印对象数据，表格化的展示相对还是更加清晰的。问题少年再次发问，如果我们想多个对象一起打印呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconst person &#x3D; &#123;\n  firstName: &#39;Indrek&#39;,\n  lastName: &#39;Lasn&#39;,\n&#125;\n\nconsole.table(pets, person)</code></pre>\n<p>与预想一致，两个不同键值的对象被才分成两个表格在控制台打印出来了。<br><img src=\"https://s2.ax1x.com/2019/10/13/ujNQuq.png\"></p>\n<p>如果我们不想分开两个表格打印，可否在一个表格显示呢？可以的！只要把两个对象放入一个数组就 ok 了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconst person &#x3D; &#123;\n  firstName: &#39;Indrek&#39;,\n  lastName: &#39;Lasn&#39;,\n&#125;\n\nconsole.table([pets, person])</code></pre>\n<p>现在我们看到两个对象在一个表格里面展示了，键值被放在表格的头部了，因为键值在两个对象里面是不一样的。<br><img src=\"https://s2.ax1x.com/2019/10/13/ujNtC4.png\"></p>\n<hr>\n<h2 id=\"console-group\"><a href=\"#console-group\" class=\"headerlink\" title=\"console.group\"></a>console.group</h2><p>当我们是在调试集合（sets）或者是关联数据（linked-data），可以使用嵌套组来优化你的控制台输出。使用console.group()来创建一个嵌套的组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;This is the first level&#39;)\nconsole.group()\nconsole.log(&#39;Level 2&#39;)\nconsole.group()\nconsole.log(&#39;Level 3&#39;)\nconsole.warn(&#39;More of level 3&#39;)\nconsole.groupEnd()\nconsole.log(&#39;Back to level 2&#39;)\nconsole.groupEnd()\nconsole.log(&#39;Back to the first level&#39;)</code></pre>\n<p>以下是一个嵌套的层级提示输出，在调试关联或者层级数据的时候特别实用。<br><img src=\"https://s2.ax1x.com/2019/10/13/ujNy5D.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用console.groupCollapsed()可以把所有嵌套的层级收起来，使用鼠标点击时可以展开查看。</p></blockquote>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>作为一名优秀的程序员，我们应该尽量在合适的场景或者合适的情况下运用在提供到给我的调试工具。所以这一篇文章提到的调试方式，我们应该在开发调试的过程中多合理运用，习惯后我们会发现调试起来会更加敏捷和高效。</p>\n<hr>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>#通过技术悟出人生道理# 💭<br>“人生无常，写的了一行是一行<br>Code now or never” ～ 络·擎 NetEngine</p></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>其实 JavaScript 给到我们很多调试工具来调试代码，那问问你自己，你又知道多少呢？用到多少呢？</p>\n<p>大部分前端开发在 JavaScript 调试代码的常规用法都是直接console.log，直接输出某一个变量或者返回数据里面的对象数据。当然毋庸置疑这样输出来调试是没有问题的。但是不是最优雅的方式来调试代码，其实还有更好的办法。作为一个有追求的技术人才，有更好的调试方式为什么不去使用呢？</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/11/ubREy4.png\"><br>我们先来了解清楚浏览器的console。浏览器的console对象有提供自带的调试控制台。console对象只能在浏览器的 JavaScript 中使用，也就是说客户端应用可用而服务端应用不可用。它的作用或者效果会根据不同的浏览器而不同，但是基础使用方式和功能是基本一致的。不过console是可以在任何前端语言或者框架中使用。</p>\n<hr>\n<h2 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a>console.log</h2><p>最常用的使用方式就是console.log，对前端开发工程师来说就是家常便饭了。以下是一个简单的使用例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  console.log(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)</code></pre>\n\n<blockquote>\n<p>以上sayHello方法接收一个名字，然后在控制台输出出来。</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/ujmEr9.png\"></p>\n<p>现在我们开始玩以下更有趣的调试方法。加入我们现在想知道sayHello这个方法被调用了多少次，这样我们应该怎么调试呢？其实有一个很简单的办法就是使用console.count().</p>\n<hr>\n<h2 id=\"console-count\"><a href=\"#console-count\" class=\"headerlink\" title=\"console.count\"></a>console.count</h2><p>count()方法会输出某一个标示被调用了几次。如果没有穿任何参数，count()默认为使用默认标示defaut。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  console.count()\n  console.log(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)\nsayHello(&#39;William&#39;)\nsayHello(&#39;Kelly&#39;)</code></pre>\n\n<blockquote>\n<p>以上代码就会在控制台输出以下结果：</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/ujm7ZR.png\"><br>上面的例子实现了统计某一个方法被调用的次数，那如果我们想统计每个同名字(name)的在这个方法里面被调用了多少次呢？要调试这种其实也很简单，只要直接吧name直接传入count就可以了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  console.count(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)\nsayHello(&#39;William&#39;)\nsayHello(&#39;Kelly&#39;)\nsayHello(&#39;Indrek&#39;)</code></pre>\n<p>‍(∩｀-´)⊃━☆ﾟ.*・｡ﾟ 巴拉巴拉！就是那么简单，我们就可以跟踪同名的参数在sayHello方法里面被调用的次数了！</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/uj1xhR.png\"></p>\n<hr>\n<h2 id=\"console-warn\"><a href=\"#console-warn\" class=\"headerlink\" title=\"console.warn\"></a>console.warn</h2><p>这个控台答应方法会输出一个警告信息。在你开发 APIs 或者开发工具的时候使用。console.warn这个方法在你需要警告用户的时候特别实用，例如漏掉了某个参数或者是让开发者知道你的 API/插件包的版本已经失效的时候使用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  if (!name) &#123;\n    console.warn(&#39;No name given&#39;)\n  &#125;\n&#125;\n\nsayHello()</code></pre>\n\n<blockquote>\n<p>上面的代码检测了sayHello方法的参数是否漏传。如果name参数没有传，一个警告消息就会被打印到控制台中。让开发者可以思考问题出在哪里。</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/uj85Q0.png\"></p>\n<hr>\n<h2 id=\"console-table\"><a href=\"#console-table\" class=\"headerlink\" title=\"console.table\"></a>console.table</h2><p>如果是我们在调试数组或者对象时，console.table是一个非常实用的调试方法来在控制台打印数据。数组里面的每一个元素都会在表格的行里面展示。以下是的水果名数组作为一个例子，如果我们把这个数组传入console.table，我们会看到一个含有这个水果名数据以表格的方式在控制台被打印出来。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fruits &#x3D; [&#39;kiwi&#39;, &#39;banana&#39;, &#39;strawberry&#39;]\n\nconsole.table(fruits)</code></pre>\n\n<blockquote>\n<p>我们一起来围观以下在控制台里面的展示效果</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/ujGlkQ.png\"></p>\n<p>看到了这个，你会不会灵光一闪想到 mmp，如果是一个很大的数组这种表格化的展示方式是多么的实用啊！对的！例如一个上百个数据的数组，我们使用这种调试方法来打印就很方便了。为了可以让我们用双眼见证这个说法的真实性，我们用代码说话吧！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fruits &#x3D; [\n  &#39;Apple&#39;,\n  &#39;Watermelon&#39;,\n  &#39;Orange&#39;,\n  &#39;Pear&#39;,\n  &#39;Cherry&#39;,\n  &#39;Strawberry&#39;,\n  &#39;Nectarine&#39;,\n  &#39;Grape&#39;,\n  &#39;Mango&#39;,\n  &#39;Blueberry&#39;,\n  &#39;Pomegranate&#39;,\n  &#39;Carambola&#39;,\n  &#39;Plum&#39;,\n  &#39;Banana&#39;,\n  &#39;Raspberry&#39;,\n  &#39;Mandarin&#39;,\n  &#39;Jackfruit&#39;,\n  &#39;Papaya&#39;,\n  &#39;Kiwi&#39;,\n  &#39;Pineapple&#39;,\n  &#39;Lime&#39;,\n  &#39;Lemon&#39;,\n  &#39;Apricot&#39;,\n  &#39;Grapefruit&#39;,\n  &#39;Melon&#39;,\n  &#39;Coconut&#39;,\n  &#39;Avocado&#39;,\n  &#39;Peach&#39;,\n]</code></pre>\n<p>我们使用console.table来打印一下上面这个大数组试试看吧。</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/ujGvNQ.png\"></p>\n<blockquote>\n<p>这种展示方式简直就是一目了然！这样妈妈再也不用担心我们调试数据的时候蒙圈了！՞༘✡ (๑ •̀ㅂ•́)و✧</p>\n</blockquote>\n<p>但是问题少年们，我们可是有梦想的工程师，如果是用来调试对象会是怎么样呢？来吧亲自动手丰衣足食，上代码！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconsole.table(pets)</code></pre>\n<p>注意了兄弟姐妹们，现在我们打印的是对象不是数组。在控制台的表格现在有两个键值name和type。之前是 0，1，2，3，4…<br><img src=\"src=%22https://s2.ax1x.com/2019/10/13/ujtOHK.png%22\"></p>\n<p>这种方式可以替代普遍使用的直接用 log 打印对象数据，表格化的展示相对还是更加清晰的。问题少年再次发问，如果我们想多个对象一起打印呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconst person &#x3D; &#123;\n  firstName: &#39;Indrek&#39;,\n  lastName: &#39;Lasn&#39;,\n&#125;\n\nconsole.table(pets, person)</code></pre>\n<p>与预想一致，两个不同键值的对象被才分成两个表格在控制台打印出来了。<br><img src=\"https://s2.ax1x.com/2019/10/13/ujNQuq.png\"></p>\n<p>如果我们不想分开两个表格打印，可否在一个表格显示呢？可以的！只要把两个对象放入一个数组就 ok 了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconst person &#x3D; &#123;\n  firstName: &#39;Indrek&#39;,\n  lastName: &#39;Lasn&#39;,\n&#125;\n\nconsole.table([pets, person])</code></pre>\n<p>现在我们看到两个对象在一个表格里面展示了，键值被放在表格的头部了，因为键值在两个对象里面是不一样的。<br><img src=\"https://s2.ax1x.com/2019/10/13/ujNtC4.png\"></p>\n<hr>\n<h2 id=\"console-group\"><a href=\"#console-group\" class=\"headerlink\" title=\"console.group\"></a>console.group</h2><p>当我们是在调试集合（sets）或者是关联数据（linked-data），可以使用嵌套组来优化你的控制台输出。使用console.group()来创建一个嵌套的组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;This is the first level&#39;)\nconsole.group()\nconsole.log(&#39;Level 2&#39;)\nconsole.group()\nconsole.log(&#39;Level 3&#39;)\nconsole.warn(&#39;More of level 3&#39;)\nconsole.groupEnd()\nconsole.log(&#39;Back to level 2&#39;)\nconsole.groupEnd()\nconsole.log(&#39;Back to the first level&#39;)</code></pre>\n<p>以下是一个嵌套的层级提示输出，在调试关联或者层级数据的时候特别实用。<br><img src=\"https://s2.ax1x.com/2019/10/13/ujNy5D.png\"></p>\n<blockquote>\n<p>使用console.groupCollapsed()可以把所有嵌套的层级收起来，使用鼠标点击时可以展开查看。</p>\n</blockquote>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>作为一名优秀的程序员，我们应该尽量在合适的场景或者合适的情况下运用在提供到给我的调试工具。所以这一篇文章提到的调试方式，我们应该在开发调试的过程中多合理运用，习惯后我们会发现调试起来会更加敏捷和高效。</p>\n<hr>\n<blockquote>\n<p>#通过技术悟出人生道理# 💭<br>“人生无常，写的了一行是一行<br>Code now or never” ～ 络·擎 NetEngine</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cksv3zgrg00010c9kghd68z3f","category_id":"cksv3zgrl00040c9kdva41i0y","_id":"cksv3zgrq000c0c9kdfus6pau"},{"post_id":"cksv3zgrj00030c9k8ssiak83","category_id":"cksv3zgrp00090c9kec9i416h","_id":"cksv3zgrr000f0c9kajee1pxo"},{"post_id":"cksv3zgro00080c9kflr6d907","category_id":"cksv3zgrq000d0c9k2lse7478","_id":"cksv3zgrr000h0c9kggjoc7aa"}],"PostTag":[{"post_id":"cksv3zgrg00010c9kghd68z3f","tag_id":"cksv3zgrm00050c9k412teeeu","_id":"cksv3zgrq000b0c9kg8qu5psv"},{"post_id":"cksv3zgrj00030c9k8ssiak83","tag_id":"cksv3zgrp000a0c9k9y2wd5rr","_id":"cksv3zgrs000l0c9khm2a7ska"},{"post_id":"cksv3zgrj00030c9k8ssiak83","tag_id":"cksv3zgrq000e0c9k70dkfq2g","_id":"cksv3zgrs000m0c9k5tik14y4"},{"post_id":"cksv3zgrj00030c9k8ssiak83","tag_id":"cksv3zgrr000g0c9ke58gf98x","_id":"cksv3zgrt000o0c9kae4985rn"},{"post_id":"cksv3zgrj00030c9k8ssiak83","tag_id":"cksv3zgrr000i0c9kc9a7chf1","_id":"cksv3zgrt000p0c9k8rwe5i77"},{"post_id":"cksv3zgrj00030c9k8ssiak83","tag_id":"cksv3zgrs000j0c9kfayf0wju","_id":"cksv3zgrt000r0c9k78khetq5"},{"post_id":"cksv3zgrm00060c9kb1z5gvka","tag_id":"cksv3zgrs000k0c9k82ha9qck","_id":"cksv3zgrt000s0c9kcx4cdac0"},{"post_id":"cksv3zgrn00070c9kfpdda8ez","tag_id":"cksv3zgrs000n0c9k2fvi7r5w","_id":"cksv3zgrt000t0c9k92i93nr0"},{"post_id":"cksv3zgro00080c9kflr6d907","tag_id":"cksv3zgrt000q0c9keyaxhoa5","_id":"cksv3zgrt000u0c9k9o1yhudq"}],"Tag":[{"name":"agile","_id":"cksv3zgrm00050c9k412teeeu"},{"name":"css","_id":"cksv3zgrp000a0c9k9y2wd5rr"},{"name":"javaScript","_id":"cksv3zgrq000e0c9k70dkfq2g"},{"name":"html","_id":"cksv3zgrr000g0c9ke58gf98x"},{"name":"vue.js","_id":"cksv3zgrr000i0c9kc9a7chf1"},{"name":"elementui","_id":"cksv3zgrs000j0c9kfayf0wju"},{"name":"git","_id":"cksv3zgrs000k0c9k82ha9qck"},{"name":"gitkraken","_id":"cksv3zgrs000n0c9k2fvi7r5w"},{"name":"console","_id":"cksv3zgrt000q0c9keyaxhoa5"}]}}