{"title":"前端技能训练-重构 v1.0","uid":"57616fa894d45b50607a4eae43c9cf27","slug":"20200118-web-refactoring-1","date":"2020-01-18T05:08:43.000Z","updated":"2024-02-05T06:46:37.333Z","comments":true,"path":"api/articles/20200118-web-refactoring-1.json","keywords":null,"cover":"https://s-gz-2804-blog-image.oss.dogecdn.com/20220224085233.png","content":"<p>或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。</p>\n<p>有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Github上，也就有了[Artisan Stack] 计划。</p>\n<p>每个程序员都不可避免地是一个Coder，一个没有掌握好技能的Coder，算不上是手工艺人，但是是手工人。</p>\n<p>艺，需要有创造性的方法。</p>\n<h1 id=\"前端技能训练-重构一\"><a href=\"#前端技能训练-重构一\" class=\"headerlink\" title=\"前端技能训练: 重构一\"></a><a href=\"\">前端技能训练: 重构一</a></h1><h1 id=\"为什么重构\"><a href=\"#为什么重构\" class=\"headerlink\" title=\"为什么重构?\"></a>为什么重构?</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为了更好的代码。</p></blockquote>\n<p>在经历了一年多的工作之后，我平时的主要工作就是修Bug。刚开始的时候觉得无聊，后来才发现修Bug需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的bug。修Bug，更多的是维护代码。还是前人总结的那句话对:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>写代码容易，读代码难。</p></blockquote>\n<p>假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。</p>\n<p>如果你的代码已经上线，虽然是一坨坨的。但是不要轻易尝试，<code>没有测试的重构</code>。</p>\n<p>从前端开始的原因在于，写得一坨坨且最不容易测试的代码都在前端。</p>\n<p>让我们来看看我们的第一个训练，相当有挑战性。</p>\n<h1 id=\"重构uMarkdown\"><a href=\"#重构uMarkdown\" class=\"headerlink\" title=\"重构uMarkdown\"></a>重构uMarkdown</h1><p>代码及setup请见github: [js-refactor]</p>\n<h3 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h3><p><code>uMarkdown</code>是一个用于将Markdown转化为HTML的库。代码看上去就像一个很典型的过程代码:</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">/* code */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  str = str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">/* headlines */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">while ((stra = micromarkdown.regexobject.headline.exec(str)) !== null) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  count = stra[1].length;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  str = str.replace(stra[0], &#39;&lt;h&#39; + count + &#39;&gt;&#39; + stra[2] + &#39;&lt;/h&#39; + count + &#39;&gt;&#39; + &#39;\\n&#39;);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">/* mail */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">while ((stra = micromarkdown.regexobject.mail.exec(str)) !== null) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  str = str.replace(stra[0], &#39;&lt;a href=&quot;mailto:&#39; + stra[1] + &#39;&quot;&gt;&#39; + stra[1] + &#39;&lt;/a&gt;&#39;);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;</span></span></code></pre></div><p>选这个做重构的开始，不仅仅是因为之前在写[EchoesWorks]的时候进行了很多的重构。而且它更适合于，<code>重构到设计模式</code>的理论。让我们在重构完之后，给作者进行pull request吧。</p>\n<p>Markdown的解析过程，有点类似于<code>Pipe and Filters</code>模式(架构模式)。</p>\n<p>Filter即我们在代码中看到的正规表达式集:</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">regexobject: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    headline: /^(\\#&#123;1,6&#125;)([^\\#\\n]+)$/m,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    code: /\\s\\`\\`\\`\\n?([^`]+)\\`\\`\\`/g</span></span></code></pre></div><p>他会匹配对应的Markdown类型，随后进行替换和处理。而&#96;&#96;str&#96;&#96;&#96;，就是管理口的输入和输出。</p>\n<p>接着，我们就可以对其进行简单的重构。</p>\n<h3 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h3><p>(ps: 推荐用WebStrom来做重构，自带重构功能)</p>\n<p>作为一个示例，我们先提出codeHandler方法，即将上面的</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">/* code */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  str = str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;</span></span></code></pre></div><p>提取方法成</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">codeFilter: function (str, stra) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    return str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  &#125;,</span></span></code></pre></div><p>while语句就成了</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">  while ((stra = regexobject.code.exec(str)) !== null) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        str = this.codeFilter(str, stra);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;</span></span></code></pre></div><p>然后，运行所有的测试。</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">grunt test</span></span></code></pre></div><p>同理我们就可以<code>mail</code>、<code>headline</code>等方法进行重构。接着就会变成类似于下面的代码，</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">  /* code */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  while ((execStr = regExpObject.code.exec(str)) !== null) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    str = codeHandler(str, execStr);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  /* headlines */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  while ((execStr = regExpObject.headline.exec(str)) !== null) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    str = headlineHandler(str, execStr);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  /* lists */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  while ((execStr = regExpObject.lists.exec(str)) !== null) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    str = listHandler(str, execStr);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  /* tables */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  while ((execStr = regExpObject.tables.exec(str)) !== null) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    str = tableHandler(str, execStr, strict);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  &#125;</span></span></code></pre></div><p>然后你也看到了，上面有一堆重复的代码，接着让我们用JavaScript的<code>奇技浮巧</code>，即apply方法，把上面的重复代码变成。</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">    [&#39;code&#39;, &#39;headline&#39;, &#39;lists&#39;, &#39;tables&#39;, &#39;links&#39;, &#39;mail&#39;, &#39;url&#39;, &#39;smlinks&#39;, &#39;hr&#39;].forEach(function (type) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        while ((stra = regexobject[type].exec(str)) !== null) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            str = that[(type + &#39;Handler&#39;)].apply(that, [stra, str, strict]);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;);</span></span></code></pre></div><p>进行测试，blabla，都是过的。</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\"> Markdown</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">   ✓ should parse h1~h3</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">   ✓ should parse link</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">   ✓ should special link</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">   ✓ should parse font style</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">   ✓ should parse code</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">   ✓ should parse ul list</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">   ✓ should parse ul table</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">   ✓ should return correctly class name</span></span></code></pre></div><p>这样，我们就完成第一个重构训练了~~。</p>\n","text":"或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的...","permalink":"/post/20200118-web-refactoring-1","photos":["https://s-gz-2804-blog-image.oss.dogecdn.com/20220224085233.png"],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"重构","slug":"重构","count":1,"path":"api/categories/重构.json"}],"tags":[{"name":"css","slug":"css","count":2,"path":"api/tags/css.json"},{"name":"javaScript","slug":"javaScript","count":1,"path":"api/tags/javaScript.json"},{"name":"html","slug":"html","count":1,"path":"api/tags/html.json"},{"name":"vue.js","slug":"vue-js","count":1,"path":"api/tags/vue-js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD%E8%AE%AD%E7%BB%83-%E9%87%8D%E6%9E%84%E4%B8%80\"><span class=\"toc-text\">前端技能训练: 重构一</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%8D%E6%9E%84\"><span class=\"toc-text\">为什么重构?</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%87%8D%E6%9E%84uMarkdown\"><span class=\"toc-text\">重构uMarkdown</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">代码说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E6%9E%84\"><span class=\"toc-text\">重构</span></a></li></ol></li></ol></li></ol>","author":{"name":"络擎","slug":"blog-author","avatar":"http://s-gz-2804-blog-image.oss.dogecdn.com/20230204150000.jpg","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vue3.0初体验","uid":"cefea648c41a530e5763e73f6b60f7e1","slug":"20210222-vue3.0-first-experience","date":"2021-02-22T07:00:00.000Z","updated":"2024-02-05T06:46:37.334Z","comments":true,"path":"api/articles/20210222-vue3.0-first-experience.json","keywords":null,"cover":"https://s-gz-2804-blog-image.oss.dogecdn.com/20220224165014.png","text":"前言txt生命周期钩子 我们可以直接看生命周期图来认识都有哪些生命周期钩子(图片是根据官网翻译后绘制的)： 从图中我们可以看到Vue3.0新增了 setup ，...","permalink":"/post/20210222-vue3.0-first-experience","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"vue","slug":"vue","count":1,"path":"api/tags/vue.json"}],"author":{"name":"络擎","slug":"blog-author","avatar":"http://s-gz-2804-blog-image.oss.dogecdn.com/20230204150000.jpg","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}}},"next_post":{"title":"药企云GIT使用规范 v1.0","uid":"521e38811c7e57bb1fda5cf202aa5848","slug":"20190326-yqy-git-standard1.0","date":"2019-03-26T07:07:43.000Z","updated":"2024-02-05T06:46:37.333Z","comments":true,"path":"api/articles/20190326-yqy-git-standard1.0.json","keywords":null,"cover":"https://s-gz-2804-blog-image.oss.dogecdn.com/20220224085122.png","text":"药企云GIT使用规范 v1.0 Git usage standards version 1.0 介绍每一个优秀的开发团队都会用到一套代码管理工具。根据目前最流行...","permalink":"/post/20190326-yqy-git-standard1.0","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Git","slug":"Git","count":2,"path":"api/categories/Git.json"}],"tags":[{"name":"git","slug":"git","count":2,"path":"api/tags/git.json"}],"author":{"name":"络擎","slug":"blog-author","avatar":"http://s-gz-2804-blog-image.oss.dogecdn.com/20230204150000.jpg","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}}}}