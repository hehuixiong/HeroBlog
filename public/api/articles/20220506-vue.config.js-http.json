{"title":"Vue Axios 本地跨域代理配置（多域名）","uid":"14e29f5d4726b0098dc9a270e6fbed07","slug":"20220506-vue.config.js-http","date":"2022-05-06T01:23:00.000Z","updated":"2022-05-06T01:39:08.284Z","comments":true,"path":"api/articles/20220506-vue.config.js-http.json","keywords":null,"cover":null,"content":"<h1 id=\"vue-cli-3-的-vue-config-js-多域名跨域本地代理配置（与nginx-conf配置）\"><a href=\"#vue-cli-3-的-vue-config-js-多域名跨域本地代理配置（与nginx-conf配置）\" class=\"headerlink\" title=\"vue-cli 3 的 vue.config.js 多域名跨域本地代理配置（与nginx.conf配置）\"></a>vue-cli 3 的 vue.config.js 多域名跨域本地代理配置（与nginx.conf配置）</h1><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>在做项目时碰到了需要请求好几个域名下的接口的情况，而接口是确定没问题的，所以没有后台的同事介入，只能自己本地代理解决跨域的问题。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>在 <em>devServer.proxy</em>中配置多个域名的代理，然后在 <em>pathRewrite</em>中replace成’’，这样在请求后台接口时如果匹配到相应的代理名，如：<em><a href=\"http://127.0.0.1:8088/passportapi/XXX/XXX\">http://127.0.0.1:8088/passportapi/XXX/XXX</a></em>， 实际上是<em><a href=\"http://127.0.0.1:8088/XXX/XXX\">http://127.0.0.1:8088/XXX/XXX</a></em>，而反向代理又能够实现本地代理而不出现跨域的情况，目的就达到了。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ol>\n<li>vue.config.js</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">module.exports &#x3D; &#123;\n    runtimeCompiler: false,\n    productionSourceMap: true,\n    lintOnSave: true,\n    filenameHashing: true,\n    outputDir: &#39;dist&#39;,  &#x2F;&#x2F; build打包后文件输出地址\n    assetsDir: &#39;static&#39;,\n    configureWebpack: &#123;\n        resolve: &#123;\n            extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],\n            alias: &#123;\n                vue$: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;,\n                &#39;@&#39;: resolve(&#39;src&#39;),\n                &#39;@utils&#39;: resolve(&#39;src&#x2F;utils&#39;),\n            &#125;,\n        &#125;,\n    &#125;,\n    devServer: &#123;\n        port: 8088,\n        host: &#39;127.0.0.1&#39;,\n        disableHostCheck: true,\n        open: true,\n        proxy: &#123;\n            &#39;&#x2F;api1&#39;: &#123;\n                target: &#39;https:&#x2F;&#x2F;aaaa.com&#39;, &#x2F;&#x2F; &#x2F;&#x2F;设置你调用的接口域名和端口号 别忘了加http\n                ws: true,\n                changeOrigin: true, &#x2F;&#x2F; 允许跨域\n                sesure: false, &#x2F;&#x2F; 如果是https接口，需要配置这个参数\n                pathRewrite: &#123; &#x2F;&#x2F; 对路径匹配到的字符串重写\n                    &#39;^&#x2F;api1&#39;: &#39;&#39;\n                &#125;\n            &#125;,\n            &#39;&#x2F;api2&#39; : &#123;\n                target: &#39;https:&#x2F;&#x2F;bbbb.com&#39;,\n                ws: true,\n                changeOrigin: true,\n                sesure: false,\n                pathRewrite: &#123;\n                    &#39;^&#x2F;api2&#39;: &#39;&#39;\n                &#125;\n            &#125;,\n            &#39;&#x2F;api3&#39;: &#123;\n                target: &#39;https:&#x2F;&#x2F;cccc.com&#39;,\n                ws: true,\n                changeOrigin: true,\n                sesure: false,\n                pathRewrite: &#123;\n                    &#39;^&#x2F;pai3&#39;: &#39;&#39;\n                &#125;\n            &#125;\n        &#125;,\n    &#125;,\n&#125;;</code></pre>\n\n<p>2.request.js</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">import axios from &#39;axios&#39;;\naxios.defaults.withCredentials &#x3D; true;\nconst service &#x3D; axios.create(&#123;\n    baseURL: &#39;&#x2F;&#39;,\n    timeout: 2000,\n&#125;);\nservice.interceptors.request.use(\n    (config) &#x3D;&gt; &#123;\n        return config;\n    &#125;,\n    (error) &#x3D;&gt; &#123;\n        console.log(error);\n        return Promise.reject(error);\n    &#125;,\n);\n\nservice.interceptors.response.use(\n    (response) &#x3D;&gt; &#123;\n        const res &#x3D; response.data;\n        return res;\n    &#125;,\n    (error) &#x3D;&gt; &#123;\n        console.log(&#96;err$&#123;error&#125;&#96;);\n        return Promise.reject(error);\n    &#125;,\n);\n\nexport default service;</code></pre>\n\n<p>3.api.js</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">import request from &#39;@&#x2F;utils&#x2F;request&#39;;\n\nexport function testpass(data) &#123;\n    return request(&#123;\n        url: &#39;&#x2F;api1&#x2F;XXX&#x2F;XXX&#39;,\n        method: &#39;post&#39;,\n        data,\n    &#125;)\n&#125;\n\nexport function testsupport(data) &#123;\n    return request(&#123;\n        url: &#39;&#x2F;api2&#x2F;XXX&#x2F;XXX&#39;,\n        method: &#39;post&#39;,\n        data,\n    &#125;);\n&#125;\nexport function testlight(api) &#123;\n    return request(&#123;\n        url: &#96;&#x2F;api3&#x2F;XXX&#x2F;XXX&#96;,\n        method: &#39;get&#39;,\n    &#125;);\n&#125;\n</code></pre>\n\n<p>4.nginx.conf配置</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">server &#123;\n    listen       80;\n    server_name  www.xxx.com;\n    index index.html index.htm;\n    #第一个vue项目\n    location &#x2F; &#123;\n            root   &#x2F;usr&#x2F;local&#x2F;server&#x2F;war&#x2F;portal;\n            index  index.html index.htm;\n    &#125;\n    #第二个vue项目\n    location &#x2F;bi &#123;\n            alias   &#x2F;usr&#x2F;local&#x2F;server&#x2F;war&#x2F;bi&#x2F;;#注意这里\n            index  index.html index.htm;\n            try_files $uri $uri&#x2F; &#x2F;bi&#x2F;index.html; #解决页面刷新404问题\n    &#125;\n    #后端项目 请求转发至8090端口\n    location &#x2F;prod-api &#123;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http:&#x2F;&#x2F;您的ip地址:8090&#x2F;prod-api;\n    &#125;\n\n    error_page   500 502 503 504  &#x2F;50x.html;\n    location &#x3D; &#x2F;50x.html &#123;\n        root   html;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上面的情况比较复杂，由于接口的风格统一，如：<em><a href=\"https://aaaa.com/api/XXX%EF%BC%8Chttps://bbbb.com/api/XXX%EF%BC%8Chttps://cccc.com/api/XXX\">https://aaaa.com/api/XXX，https://bbbb.com/api/XXX，https://cccc.com/api/XXX</a></em>，也就是说域名后面的名字是一样的，所以需要多代理一层，也就导致axios请求的时候要 <em>/passportapi/api/XXX</em> 这么复杂，如果都不一样，直接使用域名后面第一个单词来做代理名区分，这样axios也就只要 <em>/XXX</em> 就行，<em>pathRewrite</em>也不用了。</p>\n","feature":true,"text":"vue-cli 3 的 vue.config.js 多域名跨域本地代理配置（与nginx.conf配置）背景在做项目时碰到了需要请求好几个域名下的接口的情况，而接口是确定没问题的，所以没有后台的同事介入，只能自己本地代理解决跨域的问题。 思路在 devServer.proxy中配...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"配置","slug":"配置","count":1,"path":"api/tags/配置.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-cli-3-%E7%9A%84-vue-config-js-%E5%A4%9A%E5%9F%9F%E5%90%8D%E8%B7%A8%E5%9F%9F%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8Enginx-conf%E9%85%8D%E7%BD%AE%EF%BC%89\"><span class=\"toc-text\">vue-cli 3 的 vue.config.js 多域名跨域本地代理配置（与nginx.conf配置）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol></li></ol>","author":{"name":"络擎","slug":"blog-author","avatar":"https://s-gz-2804-blog-image.oss.dogecdn.com/20220224084700.png","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Web前端性能优化","uid":"5add787e344d5502fefa25471add4e2d","slug":"20220226-front-end-performance-optimization","date":"2022-02-26T06:00:00.000Z","updated":"2022-09-15T07:00:17.951Z","comments":true,"path":"api/articles/20220226-front-end-performance-optimization.json","keywords":null,"cover":"https://s-gz-2804-blog-image.oss.dogecdn.com/20220223164807.png","text":"1、前置知识面试题：输入url到页面最终呈现都发生了什么？ url解析：判断输入是关键字搜索还是url访问，对url进行解析 dns域名解析获取ip地址 缓存查找：浏览器缓存（chrome://net-internals/#dns地址查看）、系统缓存(hosts)、路由器缓存、i...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"前端优化","slug":"前端优化","count":1,"path":"api/categories/前端优化.json"}],"tags":[{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}],"author":{"name":"络擎","slug":"blog-author","avatar":"https://s-gz-2804-blog-image.oss.dogecdn.com/20220224084700.png","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}},"feature":true}}