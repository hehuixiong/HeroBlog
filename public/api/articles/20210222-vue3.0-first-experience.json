{"title":"Vue3.0初体验","uid":"cefea648c41a530e5763e73f6b60f7e1","slug":"20210222-vue3.0-first-experience","date":"2021-02-22T07:00:00.000Z","updated":"2022-02-28T02:13:34.467Z","comments":true,"path":"api/articles/20210222-vue3.0-first-experience.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224165014.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><pre><code>生命周期钩子\n我们可以直接看生命周期图来认识都有哪些生命周期钩子(图片是根据官网翻译后绘制的)：\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224161001.png\"></p>\n<p>从图中我们可以看到Vue3.0新增了 <code>setup</code> ，这个在前面我们也详细说了， 然后是将Vue2.x中的 <code>beforeDestroy</code> 名称变更成 <code>beforeUnmount</code>; <code>destroyed</code> 表更为 <code>unmounted</code> ，作者说这么变更纯粹是为了更加语义化，因为一个组件是一个 <code>mount</code> 和 <code>unmount</code> 的过程。其他Vue2中的生命周期仍然保留。</p>\n<p>上边 生命周期图 中并没包含全部的生命周期钩子， 还有其他的几个， 全部生命周期钩子如图所示：<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224161002.png\"><br>我们可以看到 <code>beforeCreate</code> 和 <code>created</code> 被 <code>setup</code> 替换了（但是Vue3中你仍然可以使用， 因为Vue3是向下兼容的， 也就是你实际使用的是vue2的）。其次，钩子命名都增加了 ((on)) ; Vue3.x还新增用于调试的钩子函数 <code>onRenderTriggered</code> 和 <code>onRenderTricked</code></p>\n<h4 id=\"1-性能\"><a href=\"#1-性能\" class=\"headerlink\" title=\"1.性能\"></a>1.性能</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>双向响应原理由Object.defineProperty改为基于ES6的Proxy，使其颗粒度更大，速度更快，且消除了之前存在的警告；</li>\n<li>重写了 Vdom ，突破了Vdom` 的性能瓶颈</li>\n<li>进行了模板编译的优化</li>\n<li>进行了更加高效的组件初始化</li>\n</ul></blockquote>\n<h4 id=\"2-Tree-Shaking-的支持\"><a href=\"#2-Tree-Shaking-的支持\" class=\"headerlink\" title=\"2.Tree-Shaking 的支持\"></a>2.Tree-Shaking 的支持</h4><p>支持了 <code>tree-shaking</code> （剪枝）：像修剪树叶一样把不需要的东西给修剪掉，使 Vue3 的体积更小。</p>\n<p>需要的模块才会打入到包里，优化后的 Vue3.0 的打包体积只有原来的一半（13kb）。哪怕把所有的功能都引入进来也只有23kb，依然比 <code>Vue2.x</code> 更小。像 <code>keep-alive</code> 、 <code>transition</code> 甚至 v-for 等功能都可以按需引入。</p>\n<h4 id=\"3-Composition-API\"><a href=\"#3-Composition-API\" class=\"headerlink\" title=\"3.Composition API\"></a>3.Composition API</h4><p><code>composition-api</code> 是一个 <code>Vue3</code> 中新增的功能，它的灵感来自于 <code>ReactHooks</code> ，是比 <code>mixin</code> 更强大的存在。<br>语法糖介绍</p>\n<ul>\n<li>compositon-api提供了一下几个函数</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>reactive</li>\n<li>watchEffect</li>\n<li>computed</li>\n<li>ref</li>\n<li>toRefs</li>\n</ul></blockquote>\n<p><code>composition-api</code> 可以提高代码逻辑的可复用性，从而实现与模板的无关性；同时使代码的可压缩性更强。另外，把 <code>Reactivity</code> 模块独立开来，意味着 Vue3.0 的响应式模块可以与其他框架相组合。</p>\n<h4 id=\"4-Fragments\"><a href=\"#4-Fragments\" class=\"headerlink\" title=\"4.Fragments\"></a>4.Fragments</h4><p>不再限制 <code>template</code> 只有一个根节点。<br><code>render</code>函数也可以返回数组了，有点像 <code>React.Fragments</code></p>\n<h4 id=\"5-Better-TypeScript-Support\"><a href=\"#5-Better-TypeScript-Support\" class=\"headerlink\" title=\"5.Better TypeScript Support\"></a>5.Better TypeScript Support</h4><p>更好的类型推导，使得 <code>*</code>Vue3<code>*</code> 把 <code>*</code>TypeScript<code>*</code> 支持得非常好</p>\n<h4 id=\"6-Custom-Renderer-API\"><a href=\"#6-Custom-Renderer-API\" class=\"headerlink\" title=\"6.Custom Renderer API\"></a>6.Custom Renderer API</h4><p>实现用<code>*</code>DOM<code>*</code>的方式进行 <code>*</code>WebGL<code>*</code> 编程</p>\n<hr>\n<h1 id=\"体验Vue3-0\"><a href=\"#体验Vue3-0\" class=\"headerlink\" title=\"体验Vue3.0\"></a>体验Vue3.0</h1><h4 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>1.</code> 使用脚手架创建项目</p></blockquote>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">vue create my-Project</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>2.</code> 安装composition-api，体验新特性</p></blockquote>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\">npm i @vue&#x2F;composition-api -s</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>3.</code> 使用插件</p></blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; main.js\n\nimport Vue from &#39;vue&#39;\nimport VueCompositionAPI from &#39;@vue&#x2F;composition-api&#39;\n\nVue.use(VueCompositionAPI)</code></pre>\n\n<h4 id=\"Setup函数\"><a href=\"#Setup函数\" class=\"headerlink\" title=\"Setup函数\"></a>Setup函数</h4><p><code>setup()</code> 函数是Vue3.0中，专门为组件提供的新属性。它为基于<code>Composition API</code>的新特性提供了统一的入口。</p>\n<p>在Vue3中，定义<code>methods</code>、<code>watch</code>、<code>computed</code>、<code>data</code>数据都放在了<code>setup()</code> 函数中</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>1.</code> 执行时机<br><code>setup()</code> 函数会在 <code>created()</code> 生命周期之前执行。</p></blockquote>\n<p>setup执行时机.png</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>2.</code> 接收props数据</p></blockquote>\n<p><code>props</code> 是 <code>setup()</code> 函数的一个形参，组件接收的 <code>props</code> 数据可以在 <code>setup()</code> 函数内访问到。</p>\n<pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\">setup(props) &#123;\n    console.log(props.p1)\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>3.</code> context上下文对象<br>context 是 setup() 的第二个形参，它是一个上下文对象，可以通过 context 来访问Vue的实例 this。</p></blockquote>\n<pre class=\"line-numbers language-coffeescript\" data-language=\"coffeescript\"><code class=\"language-coffeescript\">setup(props,context) &#123;\n    console.log(this)\n    console.log(context)\n&#125;</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224161003.png\"></p>\n<p>注意：在 setup() 函数中访问不到Vue的 this 实例</p>\n<hr>\n<h1 id=\"Teleport\"><a href=\"#Teleport\" class=\"headerlink\" title=\"Teleport\"></a>Teleport</h1><p>如果用过<code>React</code>的同学，可能对于 Portals 比较熟悉，详见。React 的 Portal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案，我理解，Vue 3 中的 Teleport 跟这个其实是类似的</p>\n<p>在 Vue2，如果想要实现类似的功能，需要通过第三方库 portal-vue 去实现，感兴趣可以了解一下</p>\n<p>本篇文章主要来探讨以下两个点：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>Teleport是什么？它解决的是什么问题？</li>\n<li>通过一个小实例介绍Teleport的使用</li>\n</ul></blockquote>\n<h5 id=\"为什么我们需要-Teleport\"><a href=\"#为什么我们需要-Teleport\" class=\"headerlink\" title=\"为什么我们需要 Teleport\"></a>为什么我们需要 Teleport</h5><p>Teleport 是一种能够将我们的模板移动到DOM中Vue app之外的其他位置的技术，就有点像哆啦A梦的“任意门”</p>\n<p>场景：像<code>modals</code>,<code>toast等这样的元素，很多情况下，我们将它完全的和我们的</code>Vue <code>应用的</code> DOM`完全剥离，管理起来反而会方便容易很多</p>\n<p>原因在于如果我们嵌套在 Vue 的某个组件内部，那么处理嵌套组件的定位<code>z-index</code>和样式就会变得很困难</p>\n<p>另外，像<code>modals,toast</code>等这样的元素需要使用到<code>Vue</code>组件的状态（data 或者 props）的值</p>\n<p>这就是Teleport派上用场的地方。我们可以在组件的逻辑位置写模板代码，这意味着我们可以使用组件的 data 或 props。然后在 Vue 应用的范围之外渲染它<br><code>Teleport</code>的使用<br>准备<br>快速搭建一个<code>vue3</code>的项目</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ npm init vite-app learn-vue3\n$ cd learn-vue3\n$ npm install\n$ npm run dev</code></pre>\n\n<p>用yarn</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ yarn create vite-app learn-vue3\n$ cd learn-vue3\n$ yarn\n$ yarn dev</code></pre>\n\n<p>打开：<code>http://localhost:3000/</code> ，看到如下页面，说明成功了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224161003.png\"></p>\n<h3 id=\"toast\"><a href=\"#toast\" class=\"headerlink\" title=\"toast\"></a>toast</h3><p><code>index.html</code>中</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;\n&lt;div id&#x3D;&quot;teleport-target&quot;&gt;&lt;&#x2F;div&gt;\n&lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;&#x2F;src&#x2F;main.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<p><code>src/components/HelloWorld.vue</code>中，添加如下，留意<code>to</code>属性跟上面的<code>id</code>选择器一致</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;button @click&#x3D;&quot;showToast&quot; class&#x3D;&quot;btn&quot;&gt;打开 toast&lt;&#x2F;button&gt;\n&lt;!-- to 属性就是目标位置 --&gt;\n&lt;teleport to&#x3D;&quot;#teleport-target&quot;&gt;\n  &lt;div v-if&#x3D;&quot;visible&quot; class&#x3D;&quot;toast-wrap&quot;&gt;\n    &lt;div class&#x3D;&quot;toast-msg&quot;&gt;我是一个 Toast 文案&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;teleport&gt;</code></pre>\n\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import &#123; ref &#125; from &#39;vue&#39;;\nexport default &#123;\n  setup() &#123;\n    &#x2F;&#x2F; toast 的封装\n    const visible &#x3D; ref(false);\n    let timer;\n    const showToast &#x3D; () &#x3D;&gt; &#123;\n      visible.value &#x3D; true;\n      clearTimeout(timer);\n      timer &#x3D; setTimeout(() &#x3D;&gt; &#123;\n        visible.value &#x3D; false;\n      &#125;, 2000);\n    &#125;\n    return &#123;\n      visible,\n      showToast\n    &#125;\n  &#125;\n&#125;</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224161004.png\"></p>\n<p>可以看到，我们使用 teleport 组件，通过 to 属性，指定该组件渲染的位置与</p>\n<p>同级，也就是在 body 下，但是 teleport 的状态 visible 又是完全由内部<em>Vue</em>组件控制</p>\n<h3 id=\"与-Vue-components-一起使用-——-modal\"><a href=\"#与-Vue-components-一起使用-——-modal\" class=\"headerlink\" title=\"与 Vue components 一起使用 —— modal\"></a>与 Vue components 一起使用 —— modal</h3><p>如果 <em><teleport></em> 包含 <em>Vue</em> 组件，则它仍将是 父组件的逻辑子组件</p>\n<p>接下来我们以一个 modal 组件为例</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;\n&lt;div id&#x3D;&quot;teleport-target&quot;&gt;&lt;&#x2F;div&gt;\n&lt;div id&#x3D;&quot;modal-container&quot;&gt;&lt;&#x2F;div&gt;\n&lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;&#x2F;src&#x2F;main.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;teleport to&#x3D;&quot;#modal-container&quot;&gt;\n  &lt;!-- use the modal component, pass in the prop --&gt;\n  &lt;modal :show&#x3D;&quot;showModal&quot; @close&#x3D;&quot;showModal &#x3D; false&quot;&gt;\n    &lt;template #header&gt;\n      &lt;h3&gt;custom header&lt;&#x2F;h3&gt;\n    &lt;&#x2F;template&gt;\n  &lt;&#x2F;modal&gt;\n&lt;&#x2F;teleport&gt;</code></pre>\n<p>JS 核心代码如下：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import &#123; ref &#125; from &#39;vue&#39;;\nimport Modal from &#39;.&#x2F;Modal.vue&#39;;\nexport default &#123;\n  components: &#123;\n    Modal\n  &#125;,\n  setup() &#123;\n    &#x2F;&#x2F; modal 的封装\n    const showModal &#x3D; ref(false);\n    return &#123;\n      showModal\n    &#125;\n  &#125;\n&#125;</code></pre>\n<p>在这种情况下，即使在不同的地方渲染<code>Modal</code>，它仍将是当前组件（调用 Modal 的组件）的子级，并将从中接收<code>show prop</code></p>\n<p>这也意味着来自父组件的注入按预期工作，并且子组件将嵌套在 Vue Devtools 中的父组件之下，而不是放在实际内容移动到的位置</p>\n<p>看实际效果以及在<code>Vue Devtool</code>中。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224161005.png\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>本文主要介绍了 <code>Vue 3</code>的新特性——<code>Teleport</code>，从为什么要使用<code>Teleport</code>，以及通过两个小 <code>demo</code>，演示它的基础使用，希望能够对你有帮助</p>\n<hr>\n<h1 id=\"emits选项\"><a href=\"#emits选项\" class=\"headerlink\" title=\"emits选项\"></a>emits选项</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><a href=\"https://v3.cn.vuejs.org/api/options-data.html#emits\">官方文档传送门</a></li>\n<li>Vue官方建议我们在组件中所有的emit事件都能在组件的emits选项中声明</li>\n<li>emits参数有俩种形式对象和数组，对象里面可以配置带校验emit事件，为null的时候代表不校验，校验的时候，会把emit事件的参数传到校验函数的参数里面</li>\n<li>当校验函数不通过的时候，控制台会输出一个警告，但是emit事件会继续执行</li>\n<li>记录一个坑：比如你emit事件的名称正好和原生事件的名字重复了，那么这个事件会执行俩次，那么配置了emits这个选项的话，就能很好的解决这个问题，下去自己实验一下，这篇文章中不做演示</li>\n<li>我们看一下带校验和不带校验的emit事件一个例子</li>\n</ul></blockquote>\n<p>子组件<code>Emiter.vue</code></p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;template&gt;\n  &lt;button @click&#x3D;&quot;handleClick&quot;&gt;点击emit-click事件&lt;&#x2F;button&gt;\n  &lt;button @click&#x3D;&quot;handleOpen&quot;&gt;点击emit-open事件&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\nimport &#123;defineComponent&#125; from &quot;vue&quot;;\nexport default defineComponent(&#123;\n  emits: &#123;\n    click: null,&#x2F;&#x2F;click事件没有检验\n    open: (value) &#x3D;&gt; &#123;\n      if (typeof value &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;\n        return true;\n      &#125; else &#123;\n        return false;\n      &#125;\n    &#125;,\n  &#125;,\n  setup(props, &#123;emit&#125;) &#123;\n    const handleClick &#x3D; function() &#123;\n      emit(&quot;click&quot;);\n    &#125;;\n    const handleOpen &#x3D; function() &#123;\n      emit(&quot;open&quot;, 1);\n    &#125;;\n    return &#123;\n      handleClick,\n      handleOpen,\n    &#125;;\n  &#125;,\n  data() &#123;\n    return &#123;&#125;;\n  &#125;,\n  methods: &#123;&#125;,\n&#125;);\n&lt;&#x2F;script&gt;\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p>父组件<code>Emit.vue</code></p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;template&gt;\n  &lt;emiter @click&#x3D;&quot;onClick&quot; @open&#x3D;&quot;onOpen&quot;&gt;&lt;&#x2F;emiter&gt;\n&lt;&#x2F;template&gt;\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\nimport &#123;defineComponent&#125; from &quot;vue&quot;;\nimport Emiter from &quot;@&#x2F;components&#x2F;Emiter.vue&quot;;\nexport default defineComponent(&#123;\n  components: &#123;\n    Emiter,\n  &#125;,\n  data() &#123;\n    return &#123;&#125;;\n  &#125;,\n  methods: &#123;\n    onClick() &#123;\n      console.log(&quot;click me!&quot;);\n    &#125;,\n    onOpen() &#123;\n      console.log(&quot;open me!&quot;);\n    &#125;,\n  &#125;,\n&#125;);\n&lt;&#x2F;script&gt;\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n<ul>\n<li>看一下结果，控制台输出警告信息<br><img src=\"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224161006.png\"></li>\n</ul>\n<h3 id=\"状态和事件绑定\"><a href=\"#状态和事件绑定\" class=\"headerlink\" title=\"状态和事件绑定\"></a>状态和事件绑定</h3><p>Vue 3.0 中定义状态的方法改为类似 React Hooks 的方法，下面我们在 Test.vue 中定义一个状态 count：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;test&quot;&gt;\n    &lt;h1&gt;test count: &#123;&#123;count&#125;&#125;&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n \n&lt;script&gt;\n  import &#123; ref &#125; from &#39;vue&#39;\n \n  export default &#123;\n    setup () &#123;\n      const count &#x3D; ref(0)\n      return &#123;\n        count\n      &#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>Vue 3.0 中初始化状态通过<code>setup</code>方法，</p>\n<p>定义状态需要调用<code>ref</code>方法。接下来我们定义一个事件，用来更新<code>count</code>状态：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;test&quot;&gt;\n    &lt;h1&gt;test count: &#123;&#123;count&#125;&#125;&lt;&#x2F;h1&gt;\n    &lt;button @click&#x3D;&quot;add&quot;&gt;add&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n \n&lt;script&gt;\n  import &#123; ref &#125; from &#39;vue&#39;\n \n  export default &#123;\n    setup () &#123;\n      const count &#x3D; ref(0)\n      const add &#x3D; () &#x3D;&gt; &#123;\n        count.value++\n      &#125;\n      return &#123;\n        count,\n        add\n      &#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>这里的<code>add</code>方法不再需要定义在<code>methods</code>中，<br>但注意更新<code>count</code>值的时候不能直接使用<code>count++</code>，而应使用 <code>count.value++</code>，<br>更新代码后，点击按钮<code>count</code>的值就会更新了：</p>\n<hr>\n<h1 id=\"计算属性和监听器\"><a href=\"#计算属性和监听器\" class=\"headerlink\" title=\"计算属性和监听器\"></a>计算属性和监听器</h1><p>Vue 3.0 中计算属性和监听器的实现依赖<code>computed</code> 和 <code>watch</code>方法：</p>\n<h4 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;test&quot;&gt;\n    &lt;h1&gt;test count: &#123;&#123;count&#125;&#125;&lt;&#x2F;h1&gt;\n    &lt;div&gt;count * 2 &#x3D; &#123;&#123;doubleCount&#125;&#125;&lt;&#x2F;div&gt;\n    &lt;button @click&#x3D;&quot;add&quot;&gt;add&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n \n&lt;script&gt;\n  import &#123; ref, computed, watch &#125; from &#39;vue&#39;\n \n  export default &#123;\n    setup () &#123;\n      const count &#x3D; ref(0)\n      const add &#x3D; () &#x3D;&gt; &#123;\n        count.value++\n      &#125;\n      watch(() &#x3D;&gt; count.value, val &#x3D;&gt; &#123;\n        console.log(&#96;count is $&#123;val&#125;&#96;)\n      &#125;)\n      const doubleCount &#x3D; computed(() &#x3D;&gt; count.value * 2)\n      return &#123;\n        count,\n        doubleCount,\n        add\n      &#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n<p>计算属性<code>computed</code>是一个方法，里面需要包含一个回调函数，当我们访问计算属性返回结果时，会自动获取回调函数的值：</p>\n<pre class=\"line-numbers language-coffeescript\" data-language=\"coffeescript\"><code class=\"language-coffeescript\">const doubleCount &#x3D; computed(() &#x3D;&gt; count.value * 2)</code></pre>\n\n<h4 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h4><p>监听器<code>watch</code>同样是一个方法，它包含<code>2</code>个参数，<code>2</code>个参数都是 function：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">watch(() &#x3D;&gt; count.value, \nval &#x3D;&gt; &#123;\n  console.log(&#96;count is $&#123;val&#125;&#96;)\n&#125;)</code></pre>\n<p>第一个参数是监听的值，<code>count.value</code>表示当<code>count.value</code>发生变化就会触发监听器的回调函数，即第二个参数，第二个参数可以执行监听时候的回调<br>如果是<code>2</code>个以上的监听属性 就这样</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">watch(\n  [refA, () &#x3D;&gt; refB.value],\n  ([a, b], [prevA, prevB]) &#x3D;&gt; &#123;\n    console.log(&#96;a is: $&#123;a&#125;&#96;)\n    console.log(&#96;b is: $&#123;b&#125;&#96;)\n  &#125;\n)</code></pre>\n\n<ul>\n<li>持续更新，未完待续….</li>\n</ul>\n","text":"前言生命周期钩子 我们可以直接看生命周期图来认识都有哪些生命周期钩子(图片是根据官网翻译后绘制的)： 从图中我们可以看到Vue3.0新增了 setup ，这个在前面我们也详细说了， 然后是将Vue2.x中的 beforeDestroy 名称变更成 beforeUnmount; d...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Vue","slug":"Vue","count":1,"path":"api/categories/Vue.json"}],"tags":[{"name":"vue","slug":"vue","count":1,"path":"api/tags/vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">1.性能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-Tree-Shaking-%E7%9A%84%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">2.Tree-Shaking 的支持</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-Composition-API\"><span class=\"toc-text\">3.Composition API</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-Fragments\"><span class=\"toc-text\">4.Fragments</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-Better-TypeScript-Support\"><span class=\"toc-text\">5.Better TypeScript Support</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-Custom-Renderer-API\"><span class=\"toc-text\">6.Custom Renderer API</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%93%E9%AA%8CVue3-0\"><span class=\"toc-text\">体验Vue3.0</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">初始化项目</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Setup%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">Setup函数</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Teleport\"><span class=\"toc-text\">Teleport</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81-Teleport\"><span class=\"toc-text\">为什么我们需要 Teleport</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#toast\"><span class=\"toc-text\">toast</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8E-Vue-components-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8-%E2%80%94%E2%80%94-modal\"><span class=\"toc-text\">与 Vue components 一起使用 —— modal</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#emits%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">emits选项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81%E5%92%8C%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">状态和事件绑定</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8\"><span class=\"toc-text\">计算属性和监听器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#computed\"><span class=\"toc-text\">computed</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#watch\"><span class=\"toc-text\">watch</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"络擎","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224084700.png","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"prev_post":{"title":"使用Console技巧提高JS调试效率","uid":"a89f699f60ab7f9698f8f81e34ce2863","slug":"20210801-console-js-debug","date":"2021-08-01T12:20:12.000Z","updated":"2022-03-03T06:31:36.209Z","comments":true,"path":"api/articles/20210801-console-js-debug.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20210830174244.png","text":"其实 JavaScript 给到我们很多调试工具来调试代码，那问问你自己，你又知道多少呢？用到多少呢？ 大部分前端开发在 JavaScript 调试代码的常规用法都是直接console.log，直接输出某一个变量或者返回数据里面的对象数据。当然毋庸置疑这样输出来调试是没有问题的。...","link":"","photos":["https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20210830174244.png"],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Console调试","slug":"Console调试","count":1,"path":"api/categories/Console调试.json"}],"tags":[{"name":"console","slug":"console","count":1,"path":"api/tags/console.json"}],"author":{"name":"络擎","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224084700.png","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}}},"next_post":{"title":"前端技能训练-重构 v1.0","uid":"57616fa894d45b50607a4eae43c9cf27","slug":"20200118-web-refactoring-1","date":"2020-01-18T05:08:43.000Z","updated":"2022-02-28T02:12:47.875Z","comments":true,"path":"api/articles/20200118-web-refactoring-1.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224085233.png","text":"或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。 有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Gi...","link":"","photos":["https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224085233.png"],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"重构","slug":"重构","count":1,"path":"api/categories/重构.json"}],"tags":[{"name":"css","slug":"css","count":2,"path":"api/tags/css.json"},{"name":"javaScript","slug":"javaScript","count":1,"path":"api/tags/javaScript.json"},{"name":"html","slug":"html","count":1,"path":"api/tags/html.json"},{"name":"vue.js","slug":"vue-js","count":1,"path":"api/tags/vue-js.json"}],"author":{"name":"络擎","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224084700.png","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}}}}