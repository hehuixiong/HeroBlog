{"title":"Web前端性能优化","uid":"5add787e344d5502fefa25471add4e2d","slug":"20220226-front-end-performance-optimization","date":"2022-02-26T06:00:00.000Z","updated":"2024-02-05T06:46:37.339Z","comments":true,"path":"api/articles/20220226-front-end-performance-optimization.json","keywords":null,"cover":"https://s-gz-2804-blog-image.oss.dogecdn.com/20220223164807.png","content":"<h1 id=\"1、前置知识\"><a href=\"#1、前置知识\" class=\"headerlink\" title=\"1、前置知识\"></a>1、前置知识</h1><p>面试题：输入url到页面最终呈现都发生了什么？</p>\n<ul>\n<li>url解析：判断输入是关键字搜索还是url访问，对url进行解析</li>\n<li>dns域名解析获取ip地址<ul>\n<li>缓存查找：浏览器缓存（chrome:&#x2F;&#x2F;net-internals&#x2F;#dns地址查看）、系统缓存(hosts)、路由器缓存、isp缓存</li>\n<li>向本地DNS服务器发送查询报文”query zh.wikipedia.org”</li>\n<li>本地DNS服务器检查自身缓存，存在返回，不存在向根域名服务器发送查询报文”query zh.wikipedia.org”，得到顶级域 .org 的顶级域名服务器地址</li>\n<li>DNS服务器向 .org 域的顶级域名服务器发送查询报文”query zh.wikipedia.org”，得到二级域 .wikipedia.org 的权威域名服务器地址</li>\n<li>DNS服务器向 .wikipedia.org 域的权威域名服务器发送查询报文”query zh.wikipedia.org”，得到主机 zh 的A记录，存入自身缓存并返回给客户端</li>\n</ul>\n</li>\n<li>使用IP建立TCP链接（三次握手）<ul>\n<li>第一次握手： 建立连接时，客户端发送SYN标记的数据包（syn&#x3D;j）到服务器，并进入SYN_SENT状态，等待服务器确认；</li>\n<li>第二次握手： 服务器收到SYN标记的数据包，必须确认客户的SYN（ack&#x3D;j+1），同时自己也发送一个SYN包（syn&#x3D;k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li>\n<li>第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack&#x3D;k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</li>\n</ul>\n</li>\n<li>发送http请求，服务器响应，缓存判断（强缓存和协商缓存）<ul>\n<li>请求：发送命令+发送请求头信息+空白行+请求体（post）</li>\n<li>响应：响应状态 + 响应头+空白行+响应体</li>\n<li>强缓存：cache-control（max-age）、Expires</li>\n<li>协商缓存：返回Etag、Last-modified和请求IF-none-match、IF-modified-since</li>\n</ul>\n</li>\n<li>浏览器解析渲染页面<ul>\n<li>解析HTML，构建dom树，词法分析和语法分析</li>\n<li>解析css，生成css规则树，从右往左解析</li>\n<li>合并DOM树和CSS规则树，生成render树</li>\n<li>布局render树，根据render节点的类型，确定元素大小和位置</li>\n<li>绘制render树，绘制页面像素信息</li>\n<li>浏览器将各层的信息发送给GUI，GUI将各层合成，展示在屏幕上</li>\n<li>细化流程：构件dom树、构建sytle Rules、样式计算、创建布局树、分层、绘制、分块和光栅化、合成和显示<ul>\n<li>渲染是在渲染进程执⾏的，渲染进程分为渲染主线程、光栅线程、合成线程等</li>\n<li>从分块阶段开始，包括分块、光栅化、合成这三步是在⾮主渲染线程执⾏</li>\n<li>重排、重绘、合成：开发中尽量减少重排重绘<ul>\n<li>重排：改变了 DOM 元素的⼏何位置属性，⽐如宽度、⾼度，那么就会触发重新布局（Layout 阶段），及之后的⼦阶段；重排需要更新完整的流⽔线，开销也⽐较⼤</li>\n<li>重绘：通过CSS 或 JS 改变了⾮ DOM 元素的⼏何位置属性，⽐如背景⾊、边框⾊等；那么会跳过布局、分层阶段，直接到绘制阶段，执⾏效率⽐重排⾼⼀些</li>\n<li>合成：CSS3 动画，⽐如transform，直接在合成线程上合成动画操作，效率⽐较⾼</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>连接结束关闭TCP链接（四次挥手）<ul>\n<li>第一次挥手是浏览器发完数据后，发送FIN请求断开连接，进入FIN_WAIT_1状态</li>\n<li>第二次挥手是服务器收到FIN报文，返回ACK报文段表示同意，进入FIN_WAIT_2状态</li>\n<li>第三次挥手是服务器发送FIN报文请求关闭连接，进入LAST_ACK状态</li>\n<li>第四次挥手是浏览器收到FIN报文段，向服务器发送ACK报文段，进入TIME_WAIT状态。服务器接收到ACK报文关闭连接，浏览器等待一段时间后，表示服务器已关闭连接，也关闭连接。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2、性能检测工具\"><a href=\"#2、性能检测工具\" class=\"headerlink\" title=\"2、性能检测工具\"></a>2、性能检测工具</h1><p>原理：就是在合适的时机，打上合适的时间戳，或者暴露出事件。然后通过这些时间戳之间的差值，得出⼀个耗时时间。这个耗时时间就可以反映出我们⻚⾯的相关性能。工具如下：</p>\n<ul>\n<li>window全局作用域API：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance\">performance</a></li>\n<li>性能检测对象：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceObserver/observe\">PerformanceObserver.observe()</a></li>\n<li>前端框架：<a href=\"https://www.npmjs.com/package/web-vitals\">web-vitals</a></li>\n</ul>\n<h2 id=\"1、performance\"><a href=\"#1、performance\" class=\"headerlink\" title=\"1、performance\"></a>1、performance</h2><p><strong>Performance</strong>接口可以获取到当前页面中与性能相关的信息。它是 High Resolution Time API 的一部分，同时也融合了Performance Timeline API、<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigation_timing_API\">Navigation Timing API</a>、 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\">User Timing API</a> 和 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API\">Resource Timing API</a></p>\n<ul>\n<li>User Timing API ：⽤户⾃⼰定义在代码中通过调⽤ performance.mark（key） ⽅法定义的时间点。</li>\n<li>Navigation Timing API ： 资源请求的时间戳，它⾥⾯包含的是我们从请求开始到整个⻚⾯的完全显示的各个阶段的时间点，具体时间点如下：</li>\n</ul>\n<p><img src=\"https://s-gz-2804-blog-image.oss.dogecdn.com/20220223145900.png\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">key值</th>\n<th align=\"left\">value值解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\">navigationStart</td>\n<td align=\"left\">当前浏览器窗⼝的前⼀个⽹⻚关闭，发⽣unload事件时的时间戳。如果没有前⼀个⽹⻚，就等于fetchStart（也就是输⼊URL开始，第⼀步就是卸载上个⻚⾯）</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">redirectStart</td>\n<td align=\"left\">第⼀次重定向开始时的时间戳，如果没有重定向，或者上次重定向不是同源的，则为0</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">redirectEnd</td>\n<td align=\"left\">最后⼀次重定向完成，也就是Http响应的最后⼀个字节返回时的时间戳，如果没有重定向，或者上次重定向不是同源的，则为0</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">fetchStart</td>\n<td align=\"left\">浏览器准备通过HTTP请求去获取⻚⾯的时间戳。在检查应⽤缓存之前发生</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">domainLookupStart</td>\n<td align=\"left\">域名查询开始时的时间戳。如果使⽤持久连接，或者从本地缓存获取信息的，等同于fetchStart</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">domainLookupEnd</td>\n<td align=\"left\">域名查询结束时的时间戳。如果使⽤持久连接，或者从本地缓存获取信息的，等同于fetchStart</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">connectStart</td>\n<td align=\"left\">HTTP请求开始向服务器发送时的时间戳，如果是持久连接，则等同于fetchStart</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">connectEnd</td>\n<td align=\"left\">浏览器与服务器之间的连接建⽴时的时间戳，连接建⽴指的是所有握⼿和认证过程全部结束</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">requestStart</td>\n<td align=\"left\">浏览器向服务器发出HTTP请求时（或开始读取本地缓存时）的时间戳</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">responseEnd</td>\n<td align=\"left\">浏览器从服务器收到（或从本地缓存读取）最后⼀个字节时（如果在此之前HTTP连接已经关闭，则返回关闭时）的时间戳</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">domLoading</td>\n<td align=\"left\">当前⽹⻚DOM结构开始解析时，也就是document.readyState属性变为“loading”、并且相应的readystatechange事件触发时的时间戳</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">domInteractive</td>\n<td align=\"left\">当前⽹⻚DOM结构结束解析</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">domContentLoadedEventStart</td>\n<td align=\"left\">当前⽹⻚DOMContentLoaded事件发⽣时，也就是DOM结构解析完毕、所有脚本开始运⾏时的时间戳</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">domContentLoadedEventEnd</td>\n<td align=\"left\">当前⽹⻚DOMContentLoaded事件发⽣时，也就是DOM结构解析完毕、所有脚本运⾏完成时的时间戳</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">domComplete</td>\n<td align=\"left\">当前⽹⻚DOM结构⽣成时，也就是Document.readyState属性变为“complete”</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">loadEventStart</td>\n<td align=\"left\">当前⽹⻚load事件的回调函数开始时的时间戳。如果该事件还没有发⽣，返回0</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">loadEventEnd</td>\n<td align=\"left\">当前⽹⻚load事件的回调函数结束时的时间戳。如果该事件还没有发⽣，返回0</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//window.performance</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"title class_\">Performance</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">eventCounts</span>: <span class=\"title class_\">EventCounts</span> &#123;<span class=\"attr\">size</span>: <span class=\"number\">36</span>&#125;,</span><br><span class=\"line\">    <span class=\"attr\">memory</span>: <span class=\"title class_\">MemoryInfo</span> &#123;<span class=\"attr\">totalJSHeapSize</span>: <span class=\"number\">14794652</span>, <span class=\"attr\">usedJSHeapSize</span>: <span class=\"number\">12567868</span>, <span class=\"attr\">jsHeapSizeLimit</span>: <span class=\"number\">2172649472</span>&#125;,</span><br><span class=\"line\">    <span class=\"attr\">navigation</span>: <span class=\"title class_\">PerformanceNavigation</span> &#123;<span class=\"attr\">type</span>: <span class=\"number\">0</span>, <span class=\"attr\">redirectCount</span>: <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    <span class=\"attr\">onresourcetimingbufferfull</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">timeOrigin</span>: <span class=\"number\">1630237780077</span>,</span><br><span class=\"line\">    <span class=\"attr\">timing</span>: <span class=\"title class_\">PerformanceTiming</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">connectEnd</span>: <span class=\"number\">1630237780080</span></span><br><span class=\"line\">      <span class=\"attr\">connectStart</span>: <span class=\"number\">1630237780080</span></span><br><span class=\"line\">      <span class=\"attr\">domComplete</span>: <span class=\"number\">1630237780410</span></span><br><span class=\"line\">      <span class=\"attr\">domContentLoadedEventEnd</span>: <span class=\"number\">1630237780355</span></span><br><span class=\"line\">      <span class=\"attr\">domContentLoadedEventStart</span>: <span class=\"number\">1630237780351</span></span><br><span class=\"line\">      <span class=\"attr\">domInteractive</span>: <span class=\"number\">1630237780351</span></span><br><span class=\"line\">      <span class=\"attr\">domLoading</span>: <span class=\"number\">1630237780126</span></span><br><span class=\"line\">      <span class=\"attr\">domainLookupEnd</span>: <span class=\"number\">1630237780080</span></span><br><span class=\"line\">      <span class=\"attr\">domainLookupStart</span>: <span class=\"number\">1630237780080</span></span><br><span class=\"line\">      <span class=\"attr\">fetchStart</span>: <span class=\"number\">1630237780080</span></span><br><span class=\"line\">      <span class=\"attr\">loadEventEnd</span>: <span class=\"number\">1630237780410</span></span><br><span class=\"line\">      <span class=\"attr\">loadEventStart</span>: <span class=\"number\">1630237780410</span></span><br><span class=\"line\">      <span class=\"attr\">navigationStart</span>: <span class=\"number\">1630237780077</span></span><br><span class=\"line\">      <span class=\"attr\">redirectEnd</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">redirectStart</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">requestStart</span>: <span class=\"number\">1630237780081</span></span><br><span class=\"line\">      <span class=\"attr\">responseEnd</span>: <span class=\"number\">1630237780083</span></span><br><span class=\"line\">      <span class=\"attr\">responseStart</span>: <span class=\"number\">1630237780081</span></span><br><span class=\"line\">      <span class=\"attr\">secureConnectionStart</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">unloadEventEnd</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">unloadEventStart</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      [[<span class=\"title class_\">Prototype</span>]]: <span class=\"title class_\">PerformanceTiming</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    [[<span class=\"title class_\">Prototype</span>]]: <span class=\"title class_\">Performance</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、performanceObserver\"><a href=\"#2、performanceObserver\" class=\"headerlink\" title=\"2、performanceObserver\"></a>2、performanceObserver</h2><p>PerformanceObserver.observe() ：指定监测的 entry types 的集合。 当 performance entry 被记录并且是指定的 entryTypes 之⼀的时候，性能观察者对象的回调函数会被调⽤。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">PerformanceObserver</span>(callback);</span><br><span class=\"line\"><span class=\"comment\">//首个参数是性能观察者参数列表、第二个参数是观察者对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">PerformanceObserver</span>(<span class=\"keyword\">function</span>(<span class=\"params\">list, obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> entries = list.<span class=\"title function_\">getEntries</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; entries.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Process &quot;mark&quot; and &quot;frame&quot; events</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//当记录一个指定类型的性能条目时，性能监测对象的回调函数将会被调用。</span></span><br><span class=\"line\">observer.<span class=\"title function_\">observe</span>(&#123;<span class=\"attr\">entryTypes</span>: [<span class=\"string\">&quot;mark&quot;</span>, <span class=\"string\">&quot;frame&quot;</span>]&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、web-vitals\"><a href=\"#3、web-vitals\" class=\"headerlink\" title=\"3、web-vitals\"></a>3、web-vitals</h2><p>前端框架，⽬前只能统计’<strong>CLS</strong>‘ | ‘<strong>FCP</strong>‘ | ‘<strong>FID</strong>‘ | ‘<strong>LCP</strong>‘ | ‘<strong>TTFB</strong>‘。如果需要扩充的话，就可以使⽤上⾯的Performance 进⾏更改</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;getCLS, getFID, getLCP&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;web-vitals&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getCLS</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"title function_\">getFID</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"title function_\">getLCP</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3、性能指标\"><a href=\"#3、性能指标\" class=\"headerlink\" title=\"3、性能指标\"></a>3、性能指标</h1><h2 id=\"1、白屏时间FP\"><a href=\"#1、白屏时间FP\" class=\"headerlink\" title=\"1、白屏时间FP\"></a>1、白屏时间FP</h2><p>输入URL开始，到页面开始有变化，只要有任意像素点的变化，就算是白屏时间完结</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getFP</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">PerformanceObserver</span>(<span class=\"function\">(<span class=\"params\">entryList, observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> entries = entryList.<span class=\"title function_\">getEntries</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; entries.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (entries[i].<span class=\"property\">name</span> === <span class=\"string\">&#x27;first-paint&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;FP&#x27;</span>, entries[i].<span class=\"property\">startTime</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">observe</span>(&#123;<span class=\"attr\">entryTypes</span>: [<span class=\"string\">&#x27;paint&#x27;</span>]&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、首次内容绘制时间FCP\"><a href=\"#2、首次内容绘制时间FCP\" class=\"headerlink\" title=\"2、首次内容绘制时间FCP\"></a>2、首次内容绘制时间FCP</h2><p>指的是⻚⾯上绘制了第⼀个元素的时间</p>\n<p>FP与FCP的最⼤的区别就在于：FP 指的是绘制像素，⽐如说⻚⾯的背景⾊是灰⾊的，那么在显示灰⾊背景时就记录下了 FP 指标。但是此时 DOM 内容还没开始绘制，可能需要⽂件下载、解析等过程，只有当 DOM 内容发⽣变化才会触发，⽐如说渲染出了⼀段⽂字，此时就会记录下 FCP 指标。因此说我们可以把这两个指标认为是和⽩屏时间相关的指标，所以肯定是最快越好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getFP</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">PerformanceObserver</span>(<span class=\"function\">(<span class=\"params\">entryList, observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> entries = entryList.<span class=\"title function_\">getEntries</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; entries.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (entries[i].<span class=\"property\">name</span> === <span class=\"string\">&#x27;first-contentful-paint&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;FCP&#x27;</span>, entries[i].<span class=\"property\">startTime</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">observe</span>(&#123;<span class=\"attr\">entryTypes</span>: [<span class=\"string\">&#x27;paint&#x27;</span>]&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、首页时间FIRSTPAGE\"><a href=\"#3、首页时间FIRSTPAGE\" class=\"headerlink\" title=\"3、首页时间FIRSTPAGE\"></a>3、首页时间FIRSTPAGE</h2><p>当onload事件触发的时候，也就是整个⾸⻚加载完成的时候</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getFirstPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;FIRSTPAGE&#x27;</span>, (performance.<span class=\"property\">timing</span>.<span class=\"property\">loadEventEnd</span> - performance.<span class=\"property\">timing</span>.<span class=\"property\">fetchStart</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、最大内容绘制LCP\"><a href=\"#4、最大内容绘制LCP\" class=\"headerlink\" title=\"4、最大内容绘制LCP\"></a>4、最大内容绘制LCP</h2><p>⽤于记录视窗内最⼤的元素绘制的时间，该时间会随着⻚⾯渲染变化⽽变化，因为⻚⾯中的最⼤元素在渲染过程中可能会发⽣改变，另外该指标会在⽤户第⼀次交互后停⽌记录。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLCP</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">PerformanceObserver</span>(<span class=\"function\">(<span class=\"params\">entryList, observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> entries = entryList.<span class=\"title function_\">getEntries</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> lastEntry = entries[entries.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;LCP&#x27;</span>, lastEntry.<span class=\"property\">renderTime</span> || lastEntry.<span class=\"property\">loadTime</span>);</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">observe</span>(&#123;<span class=\"attr\">entryTypes</span>: [<span class=\"string\">&#x27;largest-contentful-paint&#x27;</span>]&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、首次可交互时间TTI\"><a href=\"#5、首次可交互时间TTI\" class=\"headerlink\" title=\"5、首次可交互时间TTI\"></a>5、首次可交互时间TTI</h2><p>FCP指标后，首个长任务执行时间点，其后无长任务或2个get请求。</p>\n<ol>\n<li>从 FCP 指标后开始计算</li>\n<li>持续 5 秒内⽆⻓任务（执⾏时间超过 50 ms）且⽆两个以上正在进⾏中的 GET 请求</li>\n<li>往前回溯⾄ 5 秒前的最后⼀个⻓任务结束的时间</li>\n</ol>\n<p><img src=\"https://s-gz-2804-blog-image.oss.dogecdn.com/20220223154201.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getTTI</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> time = performance.<span class=\"property\">timing</span>.<span class=\"property\">domInteractive</span> - performance.<span class=\"property\">timing</span>.<span class=\"property\">fetchStart</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;TTI&#x27;</span>, time);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、网络请求耗时TTFB\"><a href=\"#6、网络请求耗时TTFB\" class=\"headerlink\" title=\"6、网络请求耗时TTFB\"></a>6、网络请求耗时TTFB</h2><p>网络请求耗时(TTFB): responseStart - requestStart</p>\n<h2 id=\"7、首次输入延迟FID\"><a href=\"#7、首次输入延迟FID\" class=\"headerlink\" title=\"7、首次输入延迟FID\"></a>7、首次输入延迟FID</h2><p>从用户第一次与页面交互到浏览器实际能够开始处理事件的时间，在 FCP（首次内容绘制） 和 TTI （首次可交互时间）之间⽤户⾸次与⻚⾯交互时响应的延迟，eg：点击输入框后，因渲染等引起的延迟</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getFID</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">PerformanceObserver</span>(<span class=\"function\">(<span class=\"params\">entryList, observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> firstInput = entryList.<span class=\"title function_\">getEntries</span>()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstInput) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"variable constant_\">FID</span> = firstInput.<span class=\"property\">processingStart</span> - firstInput.<span class=\"property\">startTime</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;FID&#x27;</span>, <span class=\"variable constant_\">FID</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">observe</span>(&#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;first-input&#x27;</span>, <span class=\"attr\">buffered</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8、累计位置偏移CLS\"><a href=\"#8、累计位置偏移CLS\" class=\"headerlink\" title=\"8、累计位置偏移CLS\"></a>8、累计位置偏移CLS</h2><p>⻚⾯渲染过程中突然插⼊⼀张巨⼤的图⽚或者说点击了某个按钮突然动态插⼊了⼀块内容等等相当影响⽤户体验的⽹站。这个指标就是为这种情况⽽⽣的，计算⽅式为：位移影响的⾯积 * 位移距离。如下图： 0.25 * 0.75 &#x3D; 0.1875 。CLS 推荐值为低于 0.1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCLS</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cumulativeLayoutShiftScore = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">PerformanceObserver</span>(<span class=\"function\">(<span class=\"params\">list</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> entry <span class=\"keyword\">of</span> list.<span class=\"title function_\">getEntries</span>()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Only count layout shifts without recent user input.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!entry.<span class=\"property\">hadRecentInput</span>) &#123;</span><br><span class=\"line\">                cumulativeLayoutShiftScore += entry.<span class=\"property\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    observer.<span class=\"title function_\">observe</span>(&#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;layout-shift&#x27;</span>, <span class=\"attr\">buffered</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;visibilitychange&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">visibilityState</span> === <span class=\"string\">&#x27;hidden&#x27;</span>) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Force any pending records to be dispatched.</span></span><br><span class=\"line\">              observer.<span class=\"title function_\">takeRecords</span>();</span><br><span class=\"line\">              observer.<span class=\"title function_\">disconnect</span>();</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;CLS:&#x27;</span>, cumulativeLayoutShiftScore);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Do nothing if the browser doesn&#x27;t support this API.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9、使用方法\"><a href=\"#9、使用方法\" class=\"headerlink\" title=\"9、使用方法\"></a>9、使用方法</h2><ol>\n<li>问题：这几个指标怎么使用<ul>\n<li>vue：定义公用方法类，common.js，mounted阶段页面进行挂载，$nextTick()里对响应方法进行使用</li>\n<li>react：hooks useEffect()中使用react useEffect(() &#x3D;&gt; {}, []);</li>\n<li>公司内部使用打点系统：使用echars绘制，使用均值统计、百分位数统计、样本分布统计输出性能</li>\n<li>自己使用：使用谷歌lighthouse插件检查性能</li>\n</ul>\n</li>\n<li>⾕歌的标准，关注：LCP（最大内容绘制时间）、FID（首次输入延迟）、CIS（累计位移偏移）<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">Good</th>\n<th align=\"left\">Poor</th>\n<th align=\"left\">Percentile</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Largest Contentful Paint</td>\n<td align=\"left\">&lt;&#x3D;2500ms</td>\n<td align=\"left\">&gt;4000ms</td>\n<td align=\"left\">75</td>\n</tr>\n<tr>\n<td align=\"left\">First Input Delay</td>\n<td align=\"left\">&lt;&#x3D;100ms</td>\n<td align=\"left\">&gt;300ms</td>\n<td align=\"left\">75</td>\n</tr>\n<tr>\n<td align=\"left\">Cumulative Layout Shift</td>\n<td align=\"left\">&lt;&#x3D;0.1</td>\n<td align=\"left\">&gt;0.25</td>\n<td align=\"left\">75</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<ul>\n<li>LCP 代表了页面的速度指标，虽然还存在其他的一些体现速度的指标。一是指标实时更新，数据更精确，二是代表着页面最大元素的渲染时间，通常来说页面中最大元素的快速载入能让用户感觉性能还挺好。</li>\n<li>FID 代表了页面的交互体验指标，毕竟没有一个用户希望触发交互以后页面的反馈很迟缓，交互响应的快会让用户觉得网页挺流畅。</li>\n<li>CLS 代表了页面的稳定指标，尤其在手机上这个指标更为重要。因为手机屏幕挺小，CLS 值一大的话会让用户觉得页面体验做的很差。</li>\n</ul>\n<h1 id=\"4、优化方法\"><a href=\"#4、优化方法\" class=\"headerlink\" title=\"4、优化方法\"></a>4、优化方法</h1><h2 id=\"1、LCP\"><a href=\"#1、LCP\" class=\"headerlink\" title=\"1、LCP\"></a>1、LCP</h2><h4 id=\"1、影响元素\"><a href=\"#1、影响元素\" class=\"headerlink\" title=\"1、影响元素\"></a>1、影响元素</h4><p>影响白屏时间，相关因素如下：</p>\n<ul>\n<li>body前是否存在阻塞的script标签，以及是否存在⻓时间执⾏的任务，即JS包⼤⼩问题以及是否启⽤了JS异步加载。</li>\n<li>⽹速问题</li>\n</ul>\n<h4 id=\"2、提升方法\"><a href=\"#2、提升方法\" class=\"headerlink\" title=\"2、提升方法\"></a>2、提升方法</h4><ul>\n<li>提⾼带宽（⽹速）</li>\n<li>需要使⽤webpack进⾏tree-shaking</li>\n<li>使⽤路由懒加载，只有在使⽤的时候在进⾏路由加载</li>\n<li>部署CDN，缩短⽤户与节点之间的距离（⽹速）</li>\n<li>建⽴缓存，提⾼下次加载速度。</li>\n<li>开启gzip压缩。</li>\n<li>不要在头部添加任何script标签，或使用js异步加载defer。</li>\n<li>对于少量⼩图标（单个尽量不要超过10K的），我们可以使⽤url-loader打包。或者使⽤将图标转化为字体库，异步进⾏加载。</li>\n<li>对于⼤图标的话，需要做到在展示的时候再去加载。也就是当图⽚出现到浏览器窗⼝的时候再去加载，⽽不是⾸屏的图⽚全部加载。</li>\n</ul>\n<h2 id=\"2、CIS\"><a href=\"#2、CIS\" class=\"headerlink\" title=\"2、CIS\"></a>2、CIS</h2><h4 id=\"1、提升方法\"><a href=\"#1、提升方法\" class=\"headerlink\" title=\"1、提升方法\"></a>1、提升方法</h4><ul>\n<li>如果经常需要变动的元素，脱离⽂档流，或者是占据位置，只是隐藏。</li>\n<li>对于位移等操作，使⽤动画代替，使⽤transform</li>\n<li>在定义图⽚的时候，就应该给出具体的宽⾼。</li>\n</ul>\n<h2 id=\"3、FID\"><a href=\"#3、FID\" class=\"headerlink\" title=\"3、FID\"></a>3、FID</h2><p>对于⽤户可操作时间，影响⼀个是注册的事件是否可以被执⾏（说的通俗点就是JS脚本是否加载完毕），以及是否存在⻓任务。那么我们就可以有以下解决⽅案：</p>\n<ul>\n<li>对⽂件进⾏懒加载，不要⼀次性把所有的JS加载出来。这就需要使⽤路由懒加载，在跳转到某个路由的时候，再去加载他的脚本资源。这样就可以保证JS加载速度的优化。</li>\n<li>不要在响应事件⾥有过多的运算，导致卡顿。如果确有需要，应当开启webWorker，新起线程运算。</li>\n</ul>\n<h2 id=\"4、bigpipe框架\"><a href=\"#4、bigpipe框架\" class=\"headerlink\" title=\"4、bigpipe框架\"></a>4、bigpipe框架</h2><p>bigPipe是由facebook提出来的⼀种动态⽹⻚加载技术。它将⽹⻚分解成称为pagelets的⼩块，然后分块传输到浏览器端，进⾏渲染。它可以有效地提升⾸屏渲染时间。bigpipe的适⽤是服务端进⾏渲染，然后将⼀块⼀块的⽂件传递给前端。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TIP<br>面试：做了哪些性能相关的工作？<br>如何统计性能、发现问题、处理问题、提升效果</p></blockquote>\n<h1 id=\"5、实战\"><a href=\"#5、实战\" class=\"headerlink\" title=\"5、实战\"></a>5、实战</h1><p>整体优化思路及解析：</p>\n<ol>\n<li>从浏览器输入url到页面各阶段做了什么，进行性能优化</li>\n<li>根据前端性能指标进行优化</li>\n<li>框架特有的性能优化点：小程序分包、vue路由按需加载等</li>\n<li>优化方法：开发规范、技术架构设计、系统架构设计</li>\n</ol>\n<h2 id=\"1、浏览器加载优化\"><a href=\"#1、浏览器加载优化\" class=\"headerlink\" title=\"1、浏览器加载优化\"></a>1、浏览器加载优化</h2><ol>\n<li>DNS预解析、预链接<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 开启隐式预解析：默认情况，浏览器对a标签中与当前域名不在同一域的相关域名进行预获取且缓存结果，对于https失效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;x-dns-prefetch-control&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;on&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只解析域名，不进行资源下载 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;dns-prefetch&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://www.baidu.com&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 将会做 DNS 解析，TLS 协商和 TCP 握手 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span>  <span class=\"attr\">rel</span>=<span class=\"string\">&quot;preconnect&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//baidu.com&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>http请求阶段<ul>\n<li>减少http请求合理利用时序：资源合并（雪碧图）、使用promise.all并发请求</li>\n<li>减少资源体积：减少cookie信息、图片格式优化、gzip静态资源压缩、webpack打包压缩</li>\n<li>合理利用缓存：cdn、http缓存（强缓存和协商缓存）、本地缓存（localStorage、sessionStorage）</li>\n</ul>\n</li>\n<li>浏览器渲染阶段：下载css并解析、下载js文件并解析会影响页面首屏渲染<ul>\n<li>减少重排重绘，尽量使用css动画，或者添加will-change属性</li>\n<li>script脚本放在body元素中⻚⾯内容的后⾯，避免JS阻碍html解析，减少⽩屏时间</li>\n<li>css文件尽量放在head中，尽快下载和解析</li>\n<li>使用预解析和异步加载：prefetch、prerender、preload、async、defer</li>\n<li>服务器端渲染ssr</li>\n<li>资源按需引入：路由懒加载，组件库按需引入<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在浏览器空闲时下载资源 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;prefetch&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://css-tricks.com/a.png&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 浏览器会提前完成所有的资源加载，执行，渲染并保存在内存里 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;prerender&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://css-tricks.com&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提前下载资源，影响资源加载顺序，后置下载资源前置下载 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;preload&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://fonts.gstatic.com/s/sofia/v8/bjl.woff2&quot;</span> <span class=\"attr\">as</span>=<span class=\"string\">&quot;font&quot;</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ⽂件加载完成后，会执⾏此脚本，执⾏顺序⽆法保证，先加载完成的先执⾏ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./static/demo1.js&quot;</span> <span class=\"attr\">async</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 延迟执⾏脚本，解析完&lt;/html&gt;后执⾏，执⾏顺序不变 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./static/defer-demo1.js&quot;</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2、性能指标监测\"><a href=\"#2、性能指标监测\" class=\"headerlink\" title=\"2、性能指标监测\"></a>2、性能指标监测</h2><p>分析工具：lighthouse、web-vitals</p>\n<p>底层api：performance</p>\n<p>指标解析：</p>\n<ul>\n<li><p>FP 首次绘制（白屏时间）、LCP 最大内容渲染：路由懒加载、缓存、脚本异步加载</p>\n</li>\n<li><p>TTI首次可交互时间：performance.timing.domInteractive -performance.timing.fetchStart</p>\n</li>\n<li><p>FID首次输入延迟：路由懒加载、建少js计算逻辑</p>\n</li>\n<li><p>CIS累计位置偏移：css动画设置位移、图片设置具体宽高</p>\n</li>\n</ul>\n<h2 id=\"3、优化方法\"><a href=\"#3、优化方法\" class=\"headerlink\" title=\"3、优化方法\"></a>3、优化方法</h2><h4 id=\"1、开发规范\"><a href=\"#1、开发规范\" class=\"headerlink\" title=\"1、开发规范\"></a>1、开发规范</h4><ul>\n<li>css开发规范：雪碧图、图片格式优化、尽量减少重排和重绘，使用动画</li>\n<li>js开发规范：promise并发、预解析和懒加载、开发细节（for循环缓存对象、尽量少使用闭包、递归的边界条件）</li>\n</ul>\n<h4 id=\"2、技术框架\"><a href=\"#2、技术框架\" class=\"headerlink\" title=\"2、技术框架\"></a>2、技术框架</h4><ul>\n<li>路由懒加载</li>\n<li>组件按需引入：babel插件转换</li>\n<li>webpack打包优化配置：资源压缩、资源拆分部署至cdn（externals）</li>\n<li>小程序：分包加载、setData操作优化、限频接口调用优化等</li>\n</ul>\n<h4 id=\"3、架构优化\"><a href=\"#3、架构优化\" class=\"headerlink\" title=\"3、架构优化\"></a>3、架构优化</h4><ul>\n<li>cdn预热</li>\n<li>nginx缓存配置、gzip压缩开启</li>\n<li>ssr及预渲染</li>\n<li>后端bigpipe引入：动态网页加载技术</li>\n</ul>\n","feature":true,"text":"1、前置知识面试题：输入url到页面最终呈现都发生了什么？ url解析：判断输入是关键字搜索还是url访问，对url进行解析 dns域名解析获取ip地址 缓存查...","permalink":"/post/20220226-front-end-performance-optimization","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"前端优化","slug":"前端优化","count":1,"path":"api/categories/前端优化.json"}],"tags":[{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">1、前置知识</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%80%A7%E8%83%BD%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">2、性能检测工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81performance\"><span class=\"toc-text\">1、performance</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81performanceObserver\"><span class=\"toc-text\">2、performanceObserver</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81web-vitals\"><span class=\"toc-text\">3、web-vitals</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">3、性能指标</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%99%BD%E5%B1%8F%E6%97%B6%E9%97%B4FP\"><span class=\"toc-text\">1、白屏时间FP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%A6%96%E6%AC%A1%E5%86%85%E5%AE%B9%E7%BB%98%E5%88%B6%E6%97%B6%E9%97%B4FCP\"><span class=\"toc-text\">2、首次内容绘制时间FCP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%A6%96%E9%A1%B5%E6%97%B6%E9%97%B4FIRSTPAGE\"><span class=\"toc-text\">3、首页时间FIRSTPAGE</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%9C%80%E5%A4%A7%E5%86%85%E5%AE%B9%E7%BB%98%E5%88%B6LCP\"><span class=\"toc-text\">4、最大内容绘制LCP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E9%A6%96%E6%AC%A1%E5%8F%AF%E4%BA%A4%E4%BA%92%E6%97%B6%E9%97%B4TTI\"><span class=\"toc-text\">5、首次可交互时间TTI</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E8%80%97%E6%97%B6TTFB\"><span class=\"toc-text\">6、网络请求耗时TTFB</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E9%A6%96%E6%AC%A1%E8%BE%93%E5%85%A5%E5%BB%B6%E8%BF%9FFID\"><span class=\"toc-text\">7、首次输入延迟FID</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E7%B4%AF%E8%AE%A1%E4%BD%8D%E7%BD%AE%E5%81%8F%E7%A7%BBCLS\"><span class=\"toc-text\">8、累计位置偏移CLS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9%E3%80%81%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">9、使用方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4、优化方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81LCP\"><span class=\"toc-text\">1、LCP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%BD%B1%E5%93%8D%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">1、影响元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2、提升方法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81CIS\"><span class=\"toc-text\">2、CIS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1、提升方法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81FID\"><span class=\"toc-text\">3、FID</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81bigpipe%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">4、bigpipe框架</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">5、实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">1、浏览器加载优化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E7%9B%91%E6%B5%8B\"><span class=\"toc-text\">2、性能指标监测</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3、优化方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">1、开发规范</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">2、技术框架</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">3、架构优化</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"络擎","slug":"blog-author","avatar":"http://s-gz-2804-blog-image.oss.dogecdn.com/20230204150000.jpg","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vue Axios 本地跨域代理配置（多域名）","uid":"14e29f5d4726b0098dc9a270e6fbed07","slug":"20220506-vue.config.js-http","date":"2022-05-06T01:23:00.000Z","updated":"2024-02-05T06:46:37.340Z","comments":true,"path":"api/articles/20220506-vue.config.js-http.json","keywords":null,"cover":null,"text":"vue-cli 3 的 vue.config.js 多域名跨域本地代理配置（与nginx.conf配置）背景在做项目时碰到了需要请求好几个域名下的接口的情况，而...","permalink":"/post/20220506-vue.config.js-http","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"配置","slug":"配置","count":1,"path":"api/tags/配置.json"}],"author":{"name":"络擎","slug":"blog-author","avatar":"http://s-gz-2804-blog-image.oss.dogecdn.com/20230204150000.jpg","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}},"feature":true},"next_post":{"title":"JavaScript中命名约定的最佳实践","uid":"5b57e5b4a1488b082baaa9f5c5285d16","slug":"20220224-javascript-naming","date":"2022-02-24T10:00:00.000Z","updated":"2024-02-05T06:46:37.338Z","comments":true,"path":"api/articles/20220224-javascript-naming.json","keywords":null,"cover":"https://s-gz-2804-blog-image.oss.dogecdn.com/20220226142235.png","text":"前言在前端开发过程中，遵循标准的命名约定可以提高代码的可读性。下面就来看看 JavaScript 中命名约定的最佳实践。 1. 变量的命名约定 JavaScri...","permalink":"/post/20220224-javascript-naming","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"author":{"name":"络擎","slug":"blog-author","avatar":"http://s-gz-2804-blog-image.oss.dogecdn.com/20230204150000.jpg","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}},"feature":true}}