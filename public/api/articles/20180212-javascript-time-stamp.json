{"title":"JavaScript时间戳总结","uid":"28e2c50cddef1ae63b6743f914e9f466","slug":"20180212-javascript-time-stamp","date":"2018-02-12T06:22:00.000Z","updated":"2022-02-28T01:45:01.642Z","comments":true,"path":"api/articles/20180212-javascript-time-stamp.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220223163912.png","content":"<p>javascript时间戳经常用到，现在总结一下。</p>\n<h2 id=\"一、时间戳函数\"><a href=\"#一、时间戳函数\" class=\"headerlink\" title=\"一、时间戳函数\"></a>一、时间戳函数</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;   \nfunction getLocalTime(nS) &#123;   \n   return new Date(parseInt(nS) * 1000).toLocaleString().replace(&#x2F;:\\d&#123;1,2&#125;$&#x2F;,&#39; &#39;);   \n&#125;   \nalert(getLocalTime(1293072805));   \n&lt;&#x2F;script&gt; </code></pre>\n<p>也可以用如下，想取几位就几位，注意，空格也算！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;   \nfunction getLocalTime(nS) &#123;   \n    return new Date(parseInt(nS) * 1000).toLocaleString().substr(0,14)&#125;   \nalert(getLocalTime(1293072805));   \n&lt;&#x2F;script&gt;   </code></pre>\n\n<p>如果想弹出：2018-02-12 14:00:00这个格式的也好办</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;   \nfunction getLocalTime(nS) &#123;   \n   return new Date(parseInt(nS) * 1000).toLocaleString().replace(&#x2F;年|月&#x2F;g, &quot;-&quot;).replace(&#x2F;日&#x2F;g, &quot; &quot;);    \n&#125;   \nalert(getLocalTime(1177824835));   \n&lt;&#x2F;script&gt;</code></pre>\n\n<p>另外，也可以这么写：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function   formatDate(now)   &#123;   \n  var   year&#x3D;now.getYear();   \n  var   month&#x3D;now.getMonth()+1;   \n  var   date&#x3D;now.getDate();   \n  var   hour&#x3D;now.getHours();   \n  var   minute&#x3D;now.getMinutes();   \n  var   second&#x3D;now.getSeconds();   \n  return   year+&quot;-&quot;+month+&quot;-&quot;+date+&quot;   &quot;+hour+&quot;:&quot;+minute+&quot;:&quot;+second;   \n&#125;\n  var   d&#x3D;new   Date(1230999938);   \n  alert(formatDate(d));</code></pre>\n\n<h2 id=\"二、知识普及\"><a href=\"#二、知识普及\" class=\"headerlink\" title=\"二、知识普及\"></a>二、知识普及</h2><h3 id=\"1、当前系统区域设置格式-toLocaleDateString和toLocaleTimeString\"><a href=\"#1、当前系统区域设置格式-toLocaleDateString和toLocaleTimeString\" class=\"headerlink\" title=\"1、当前系统区域设置格式(toLocaleDateString和toLocaleTimeString)\"></a>1、当前系统区域设置格式(toLocaleDateString和toLocaleTimeString)</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">例子:(new Date()).toLocaleDateString() + &quot; &quot; + (new Date()).toLocaleTimeString() \n结果: 2018年2月12日 16:13:11 </code></pre>\n\n<h3 id=\"2-普通字符串-toDateString和toTimeString\"><a href=\"#2-普通字符串-toDateString和toTimeString\" class=\"headerlink\" title=\"2.普通字符串(toDateString和toTimeString)\"></a>2.普通字符串(toDateString和toTimeString)</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">例子: (new Date()).toDateString() + &quot; &quot; + (new Date()).toTimeString() \n结果:Tue Jan 29 2008 16:13:11 UTC+0800 </code></pre>\n\n<h3 id=\"3-格林威治标准时间-toGMTString\"><a href=\"#3-格林威治标准时间-toGMTString\" class=\"headerlink\" title=\"3.格林威治标准时间(toGMTString)\"></a>3.格林威治标准时间(toGMTString)</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">例子: (new Date()).toGMTString() \n结果:Tue, 29 Jan 2008 08:13:11 UTC </code></pre>\n\n<h3 id=\"4-全球标准时间-toUTCString\"><a href=\"#4-全球标准时间-toUTCString\" class=\"headerlink\" title=\"4.全球标准时间(toUTCString)\"></a>4.全球标准时间(toUTCString)</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">例子: (new Date()).toUTCString() \n结果:Tue, 29 Jan 2008 08:13:11 UTC </code></pre>\n\n<h3 id=\"5-Date对象字符串-toString\"><a href=\"#5-Date对象字符串-toString\" class=\"headerlink\" title=\"5.Date对象字符串(toString)\"></a>5.Date对象字符串(toString)</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">例子: (new Date()).toString() \n结果:Tue Jan 29 16:13:11 UTC+0800 2008\n\nDate对象构造函数 \nDate对象具有多种构造函数。 \nnew Date() \nnew Date(milliseconds) \nnew Date(datestring) \nnew Date(year, month) \nnew Date(year, month, day) \nnew Date(year, month, day, hours) \nnew Date(year, month, day, hours, minutes) \nnew Date(year, month, day, hours, minutes, seconds) \nnew Date(year, month, day, hours, minutes, seconds, microseconds) \nDate对象构造函数参数说明 \nmilliseconds - 距离JavaScript内部定义的起始时间1970年1月1日的毫秒数 \ndatestring - 字符串代表的日期与时间。此字符串可以使用Date.parse()转换 \nyear - 四位数的年份，如果取值为0-99，则在其之上加上1900 \nmonth - 0(代表一月)-11(代表十二月)之间的月份 \nday - 1-31之间的日期 \nhours - 0(代表午夜)-23之间的小时数 \nminutes - 0-59之间的分钟数 \nseconds - 0-59之间的秒数 \nmicroseconds - 0-999之间的毫秒数 \nDate对象返回值 \n如果没有任何参数，将返回当前日期 \n如果参数为一个数字，将数字视为毫秒值，转换为日期 \n如果参数为一个字符串，将字符串视为日期的字符串表示，转换为日期 \n还可以使用六个构造函数精确定义，并返回时间 \n示例 \nvar d1 &#x3D; new Date(); \ndocument.write(d1.toString()); \nvar d2 &#x3D; new Date(&quot;2009-08-08 12:12:12); \ndocument.write(d2.toString()); \nvar d3 &#x3D; new Date(2009, 8, 8); \ndocument.write(d3.toString()); \nDate做为JavaScript的一种内置对象，必须使用new的方式创建。 \nDate对象在JavaScript内部的表示方式是，距1970年1月1日午夜(GMT时间)的毫秒数(时间戳)，我们在这里也把Date的内部表示形式称为时间戳。可以使用getTime()将Date对象转换为Date的时间戳，方法setTime()可以把Date的时间戳转换为Date的标准形式。 \nDate函数使用语法 \ndate.方法名(参数1,参数2,...); \nDate.方法名(); \ndate代表一个日期对象的实例，Date代表日期对象，date.方法名调用的为对象的成员函数 \nDate.方法名调用的为对象的静态函数 \n示例 \nvar d&#x3D;new Date(); \nvar d2&#x3D;Date.UTC(); \nJavaScript_Date函数按功能分类 \n日期获取类函数 \nDate() 函数 -- Date对象的构造函数 \ngetDate() 函数 -- 返回date对象中的月份中的天数(1-31) \ngetDay()函数 -- 返回date对象中的星期中的天数(0-6) \ngetFullYear() 函数 -- 返回date对象中的四位数年份 \ngetHours()函数 -- 返回date对象中的小时数(0-23) \ngetMilliseconds() 函数 -- 返回date对象中的毫秒数(0-999) \ngetMinutes() 函数 -- 返回date对象中的分钟数(0-59) \ngetMonth() 函数 -- 返回date对象中的月份数(0-11) \ngetSeconds() 函数 -- 返回date对象中的秒数(0-59) \ngetTime() 函数 -- 返回date对象的时间戳表示法(毫秒表示) \ngetTimezoneOffset() 函数 -- 返回本地时间与用UTC表示当前日期的时间差，以分钟为单位 \ngetUTCDate() 函数 -- 返回date对象中用世界标准时间(UTC)表示的月份中的一天(1-31) \ngetUTCDay() 函数 -- 返回date对象中用世界标准时间(UTC)表示的周中的一天(0-6) \ngetUTCFullYear() 函数 -- 返回date对象中用世界标准时间(UTC)表示的四位年份 \ngetUTCHours() 函数 -- 返回date对象中用世界标准时间(UTC)表示的小时数(0-23) \ngetUTCMilliseconds() 函数 -- 返回date对象中用世界标准时间(UTC)表示的毫秒数(0-999) \ngetUTCMinutes() 函数 -- 返回date对象中用世界标准时间(UTC)表示的分钟数(0-59) \ngetUTCMonth() 函数 -- 返回date对象中用世界标准时间(UTC)表示的月份数(0-11) \ngetUTCSeconds() 函数 -- 返回date对象中用世界标准时间(UTC)表示的秒数(0-59) \ngetYear() 函数 -- 返回date对象的年份(真实年份减去1900) \nDate.UTC()函数 -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳) \n日期设置类函数 \nsetDate() 函数 -- 设置date对象中月份的一天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetFullYear() 函数 -- 设置date对象中的年份，月份和天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetHours() 函数 -- 设置date对象的小时，分钟，秒和毫秒，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetMilliseconds() 函数 -- 设置date对象的毫秒数，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetMinutes() 函数 -- 设置date对象的分钟，秒，毫秒，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetMonth() 函数 -- 设置date对象中月份，天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetSeconds() 函数 -- 设置date对象中月份的一天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetTime() 函数 -- 使用毫秒数设置date对象，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCDate() 函数 -- 设置date对象中用世界标准时间(UTC)表示的月份的一天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCFullYear() 函数 -- 设置date对象中用世界标准时间(UTC)表示的年份，月份和天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCHours() 函数 --- 设置date对象中用世界标准时间(UTC)表示的小时，分钟，秒和毫秒，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCMilliseconds() 函数 -- 设置date对象中用世界标准时间(UTC)表示的毫秒数，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCMinutes() 函数 -- 设置date对象中用世界标准时间(UTC)表示的分钟，秒，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCMonth() 函数 -- 设置date对象中用世界标准时间(UTC)表示的月份，天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCSeconds() 函数 -- 设置date对象中用世界标准时间(UTC)表示的秒，毫秒，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetYear() 函数 -- 设置date对象的年份(真实年份减去1900) \n日期打印类函数 \ntoDateString() 函数 -- 返回date对象的日期部分的字符串表示 \ntoGMTString() 函数 -- 返回date对象的格林威治时间(GMT)的字符串表示 \ntoLocaleDateString函数 -- 返回date对象的日期部分的本地化字符串 \ntoLocaleTimeString函数 -- 返回date对象的时间部分的本地化字符串 \ntoTimeString()函数 -- 返回date对象的时间部分的字符串 \ntoUTCString函数 -- 返回date对象的世界标准时间(UTC)的字符串表示 \n日期解析类函数 \nDate.parse() 函数 -- 解析一个日期的字符串，并返回该日期距1970年1月1日午夜之间的毫秒数(时间戳) \nJavaScript_Date函数按照字母分类 \nDate() 函数 -- Date对象的构造函数 \ngetDate() 函数 -- 返回date对象中的月份中的天数(1-31) \ngetDay()函数 -- 返回date对象中的星期中的天数(0-6) \ngetFullYear() 函数 -- 返回date对象中的四位数年份 \ngetHours()函数 -- 返回date对象中的小时数(0-23) \ngetMilliseconds() 函数 -- 返回date对象中的毫秒数(0-999) \ngetMinutes() 函数 -- 返回date对象中的分钟数(0-59) \ngetMonth() 函数 -- 返回date对象中的月份数(0-11) \ngetSeconds() 函数 -- 返回date对象中的秒数(0-59) \ngetTime() 函数 -- 返回date对象的时间戳表示法(毫秒表示) \ngetTimezoneOffset() 函数 -- 返回本地时间与用UTC表示当前日期的时间差，以分钟为单位 \ngetUTCDate() 函数 -- 返回date对象中用世界标准时间(UTC)表示的月份中的一天(1-31) \ngetUTCDay() 函数 -- 返回date对象中用世界标准时间(UTC)表示的周中的一天(0-6) \ngetUTCFullYear() 函数 -- 返回date对象中用世界标准时间(UTC)表示的四位年份 \ngetUTCHours() 函数 -- 返回date对象中用世界标准时间(UTC)表示的小时数(0-23) \ngetUTCMilliseconds() 函数 -- 返回date对象中用世界标准时间(UTC)表示的毫秒数(0-999) \ngetUTCMinutes() 函数 -- 返回date对象中用世界标准时间(UTC)表示的分钟数(0-59) \ngetUTCMonth() 函数 -- 返回date对象中用世界标准时间(UTC)表示的月份数(0-11) \ngetUTCSeconds() 函数 -- 返回date对象中用世界标准时间(UTC)表示的秒数(0-59) \ngetYear() 函数 -- 返回date对象的年份(真实年份减去1900) \nDate.parse() 函数 -- 解析一个日期的字符串，并返回该日期距1970年1月1日午夜之间的毫秒数(时间戳) \nsetDate() 函数 -- 设置date对象中月份的一天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetFullYear() 函数 -- 设置date对象中的年份，月份和天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetHours() 函数 -- 设置date对象的小时，分钟，秒和毫秒，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetMilliseconds() 函数 -- 设置date对象的毫秒数，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetMinutes() 函数 -- 设置date对象的分钟，秒，毫秒，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetMonth() 函数 -- 设置date对象中月份，天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetSeconds() 函数 -- 设置date对象中月份的一天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetTime() 函数 -- 使用毫秒数设置date对象，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCDate() 函数 -- 设置date对象中用世界标准时间(UTC)表示的月份的一天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCFullYear() 函数 -- 设置date对象中用世界标准时间(UTC)表示的年份，月份和天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCHours() 函数 --- 设置date对象中用世界标准时间(UTC)表示的小时，分钟，秒和毫秒，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCMilliseconds() 函数 -- 设置date对象中用世界标准时间(UTC)表示的毫秒数，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCMinutes() 函数 -- 设置date对象中用世界标准时间(UTC)表示的分钟，秒，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCMonth() 函数 -- 设置date对象中用世界标准时间(UTC)表示的月份，天，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetUTCSeconds() 函数 -- 设置date对象中用世界标准时间(UTC)表示的秒，毫秒，并返回date对象距1970年1月1日午夜之间的毫秒数(时间戳) \nsetYear() 函数 -- 设置date对象的年份(真实年份减去1900) \ntoDateString() 函数 -- 返回date对象的日期部分的字符串表示 \ntoGMTString() 函数 -- 返回date对象的格林威治时间(GMT)的字符串表示 \ntoLocaleDateString函数 -- 返回date对象的日期部分的本地化字符串 \ntoLocaleTimeString函数 -- 返回date对象的时间部分的本地化字符串 \ntoTimeString()函数 -- 返回date对象的时间部分的字符串 \ntoUTCString函数 -- 返回date对象的世界标准时间(UTC)的字符串表示 \nDate.UTC()函数 -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)</code></pre>\n\n<h2 id=\"三、Javascript的时间戳和php的时间戳转换\"><a href=\"#三、Javascript的时间戳和php的时间戳转换\" class=\"headerlink\" title=\"三、Javascript的时间戳和php的时间戳转换\"></a>三、Javascript的时间戳和php的时间戳转换</h2><p>js的时间戳通常是13位，php的时间戳是10位,转换函数如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var nowtime &#x3D; (new Date).getTime();&#x2F;*当前时间戳*&#x2F;   \n&#x2F;*转换时间，计算差值*&#x2F;   \nfunction comptime(beginTime,endTime)&#123;   \n  var secondNum &#x3D; parseInt((endTime-beginTime*1000)&#x2F;1000);&#x2F;&#x2F;计算时间戳差值      \n\n  if(secondNum&gt;&#x3D;0&amp;&amp;secondNum&lt;60)&#123;   \n      return secondNum+&#39;秒前&#39;;   \n  &#125;   \n  else if (secondNum&gt;&#x3D;60&amp;&amp;secondNum&lt;3600)&#123;   \n      var nTime&#x3D;parseInt(secondNum&#x2F;60);   \n      return nTime+&#39;分钟前&#39;;   \n  &#125;   \n  else if (secondNum&gt;&#x3D;3600&amp;&amp;secondNum&lt;3600*24)&#123;   \n      var nTime&#x3D;parseInt(secondNum&#x2F;3600);   \n      return nTime+&#39;小时前&#39;;   \n  &#125;   \n  else&#123;   \n      var nTime &#x3D; parseInt(secondNum&#x2F;86400);   \n      return nTime+&#39;天前&#39;;   \n  &#125;   \n&#125;   \n\nt &#x3D; comptime(&quot;1324362556&quot;,nowtime);&#x2F;&#x2F;timestamp为PHP通过ajax回传的时间戳   \n\nalert(t); </code></pre>","text":"javascript时间戳经常用到，现在总结一下。 一、时间戳函数&lt;script&gt; function getLocalTime(nS) &#123; return new Date(parseInt(nS) * 1000).toLocaleString().repla...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"js","slug":"js","count":1,"path":"api/tags/js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%97%B6%E9%97%B4%E6%88%B3%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">一、时间戳函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E7%9F%A5%E8%AF%86%E6%99%AE%E5%8F%8A\"><span class=\"toc-text\">二、知识普及</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9F%E5%8C%BA%E5%9F%9F%E8%AE%BE%E7%BD%AE%E6%A0%BC%E5%BC%8F-toLocaleDateString%E5%92%8CtoLocaleTimeString\"><span class=\"toc-text\">1、当前系统区域设置格式(toLocaleDateString和toLocaleTimeString)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6%E4%B8%B2-toDateString%E5%92%8CtoTimeString\"><span class=\"toc-text\">2.普通字符串(toDateString和toTimeString)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%A0%BC%E6%9E%97%E5%A8%81%E6%B2%BB%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4-toGMTString\"><span class=\"toc-text\">3.格林威治标准时间(toGMTString)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%85%A8%E7%90%83%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4-toUTCString\"><span class=\"toc-text\">4.全球标准时间(toUTCString)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Date%E5%AF%B9%E8%B1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2-toString\"><span class=\"toc-text\">5.Date对象字符串(toString)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Javascript%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%E5%92%8Cphp%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">三、Javascript的时间戳和php的时间戳转换</span></a></li></ol>","author":{"name":"络擎","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224084700.png","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"prev_post":{"title":"谈谈敏捷开发","uid":"ede919be316f4f79677d41980bcb9458","slug":"20190311-about-agility-dev","date":"2019-03-11T04:00:00.000Z","updated":"2022-02-28T01:45:01.642Z","comments":true,"path":"api/articles/20190311-about-agility-dev.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224160221.png","text":" 谈谈敏捷开发 小步快跑、敏捷开发 真实的敏捷开发 后注 谈谈敏捷开发好久没有更新一下博客，最近有在尝试新的领域，可是一直没能积累下什么重要的知识、或者形成了什么重要的知识体系，就没能写下什么有意义的记录。可是很偶然的机会看到一个视频，里面讲述的，乔布斯谈论关于【流程与人才】的理...","link":"","photos":["https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224160221.png"],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"网站收藏","slug":"网站收藏","count":1,"path":"api/categories/网站收藏.json"}],"tags":[{"name":"agile","slug":"agile","count":1,"path":"api/tags/agile.json"}],"author":{"name":"络擎","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/hehuixiong/image-blog/20220224084700.png","link":"/","description":"Think like an artist, develop like an artisan.","socials":{"github":"https://github.com/hehuixiong","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com","csdn":"https://blog.csdn.net","juejin":"https://juejin.cn","customs":{}}}},"next_post":{}}