[{"id":"dcaf1a1f9839086301d20305f4b28604","title":"药企云GIT使用规范 v2.0 - gitkraken工具的操作流程","content":"药企云GIT使用规范 v2.0\n\n\n\n\n\n\n\n\nGit usage standards version 2.0\n工具介绍-GitKrakenGitKraken是基于Git代码管理的一个UI管理器，拥有非常精美的界面，可以配合Github、Gitee来使用。\n\n\nGitKraken创建分支流程\n\n\n\n\n\n\n\n\n根据TAPD的迭代进行创建\n\n\n\n\n\n\n\n\n\n\n在master上创建分支（创建分支由组长创建）\n\n\n\n\n\n\n\n\n\n\n正常迭代创建（dev/对应的版本号+qa环境）例：dev/vCOA-qa4\n\n\n\n\n\n\n\n\n\n\n紧急迭代创建（feature/对应的版本号+qa环境+紧急需求ID号）例：feature/vCOA-qa4-1004332\n\n\n\n\n\n\n\n\n\n\n紧急需求ID号\n\n\n\n\n\n\n\n\n\n\n修复分支创建（hotfix/对应的功能名称）例：hotfix/order\n\nGitKraken合并分支流程\n\n\n\n\n\n\n\n\n根据目前的工作流程，dev，feature，hotfix，这三个版块的分支，会进行合并（合并流程一致）\n第一步、将当前开发分支合并到对应qa/xxx环境让测试进行测试（由开发者合并） 例：Merge dev/vCOA-qa4 into qa/qa4\n\n第二步、将当前开发分支合并到release环境（由对应的模块负责人合并）例：Merge dev/vCOA-qa4 into release\n\n第三步、将当前开发分支合并到master（由上线的负责人合并）例：Merge dev/vCOA-qa4 into master\n\nGitKraken注意事项\n\n\n\n\n\n\n\n\n开发分支不能合并开发分支，比如：dev/xxx不能与feature/xxx合并  qa环境不能合并其他分支，release环境不能合并其他分支。  所有的分支创建都是由master拉取  遇到代码冲突的问题谨慎处理，避免造成代码丢失的问题  如果没有把握处理请求对应的开发一起看或者找组长\n","slug":"2021-08-30-yqy-git-standard2.0","date":"2021-08-30T09:42:43.000Z","categories_index":"","tags_index":"git,gitkraken","author_index":"络擎"},{"id":"0c362deea0e7505e0e85786492df47ac","title":"Mac 破解GitKraken教程","content":"GitKraken是什么？\n\n\n\n\n\n\n\n\nGitKraken是基于Git代码管理的一个UI管理器，拥有非常精美的界面，可以配合Github、Gitee来使用。\n下载GitKraken我们选择在GitKraken官网安装最新版本的GitKraken，在官网安装的是收费的，不要管，先安装一遍并且登录一次 ps：一定要用收费版登录一次，可以免去以后使用破解版时每次打开都要登录 \n安装GitKraken下载完成后，即可得到一个installGitKraken.dmg文件，双击安装即可，安装完成之后，双击图标打开它。打开之后会出现7天试用期，需要在7天后进行收费，不用管它，打开过就可以关闭了。ps：如果以上步鄹都完成了，就可以跳过直接使用破解版的即可。Vue3\n使用破解版的GitKraken破解版的GitKraken，我存放在了百度网盘，大家直接下载即可版本是@7.0.0链接: https://pan.baidu.com/s/1VWWlRZNtKw_41x7x-L-k2A 提取码: giko下载完成之后，双击打开，里面有一个@7.0.0版本的GitKraken，把它拖动到mac访达里的应用程序，然后替换掉。\n 注：双击打开它的时候，会出现文件已损坏（这个时候别将它移到垃圾桶），执行后面的操作 \n“Mac应用”已损坏，打不开解决办法\n问题说明：通常在非 Mac App Store下载的软件都会提示“xxx已损坏，打不开。您应将它移到废纸篓”或者“打不开 xxx，因为它来自身份不明的开发者”。\n原因：Mac电脑启用了安全机制，默认只信任Mac App Store下载的软件以及拥有开发者 ID 签名的软件，但是同时也阻止了没有开发者签名的 “老实软件”\n解决方法：1.打开任何来源选项打开「终端.app」，输入以下命令并回车，输入开机密码回车\nsudo spctl --master-disable\n此行代码可以让 Mac 允许安装第三方来源的应用\n2.macOS Catalina 10.15系统：打开「终端.app」，输入以下命令并回车，输入开机密码回车\nsudo xattr -rd com.apple.quarantine 空格 软件的路径\n如Sketch.app\nsudo xattr -rd com.apple.quarantine &#x2F;Applications&#x2F;Sketch.app\n如CleanMyMac X.app\nsudo xattr -rd com.apple.quarantine &#x2F;Applications&#x2F;CleanMyMac X.app\n附1：/Applications/Sketch.app与/Applications/CleanMyMac X.app就是软件的路径附2：软件路径快速获取方法：将软件拖入「终端app」即可获得路径\n\n\n1\n\n3.macOS Catalina 10.15.4 系统：更新10.15.4系统后软件出现意外退出，可按照下面的方法给软件签名\n1.打开「终端app」输入如下命令：xcode-select --install\n2.给软件签名打开终端工具输入并执行如下命令：sudo codesign --force --deep --sign - (应用路径)\n注意：空格不能漏\n3.错误解决如出现以下错误提示： /文件位置 : replacing existing signature  /文件位置 : resource fork,Finder information,or similar detritus not allowed 那么，先在终端执行：xattr -cr &#x2F;文件位置（直接将应用拖进去即可）\n然后再次执行如下指令即可：codesign --force --deep --sign - &#x2F;文件位置（直接将应用拖进去即可）\n\n","slug":"2021-08-27-mac-gitkraken-tutorial","date":"2021-08-27T07:08:00.000Z","categories_index":"","tags_index":"gitkraken","author_index":"络擎"},{"id":"8c6e317d34a70d85c4a6b275416b9854","title":"使用Console技巧提高JS调试技能","content":"其实 JavaScript 给到我们很多调试工具来调试代码，那问问你自己，你又知道多少呢？用到多少呢？\n大部分前端开发在 JavaScript 调试代码的常规用法都是直接console.log，直接输出某一个变量或者返回数据里面的对象数据。当然毋庸置疑这样输出来调试是没有问题的。但是不是最优雅的方式来调试代码，其实还有更好的办法。作为一个有追求的技术人才，有更好的调试方式为什么不去使用呢？\n我们先来了解清楚浏览器的console。浏览器的console对象有提供自带的调试控制台。console对象只能在浏览器的 JavaScript 中使用，也就是说客户端应用可用而服务端应用不可用。它的作用或者效果会根据不同的浏览器而不同，但是基础使用方式和功能是基本一致的。不过console是可以在任何前端语言或者框架中使用。\n\nconsole.log最常用的使用方式就是console.log，对前端开发工程师来说就是家常便饭了。以下是一个简单的使用例子。\nfunction sayHello(name) &#123;\n  console.log(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)\n\n\n\n\n\n\n\n\n\n\n以上sayHello方法接收一个名字，然后在控制台输出出来。\n\n现在我们开始玩以下更有趣的调试方法。加入我们现在想知道sayHello这个方法被调用了多少次，这样我们应该怎么调试呢？其实有一个很简单的办法就是使用console.count().\n\nconsole.countcount()方法会输出某一个标示被调用了几次。如果没有穿任何参数，count()默认为使用默认标示defaut。\nfunction sayHello(name) &#123;\n  console.count()\n  console.log(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)\nsayHello(&#39;William&#39;)\nsayHello(&#39;Kelly&#39;)\n\n\n\n\n\n\n\n\n\n\n以上代码就会在控制台输出以下结果：\n上面的例子实现了统计某一个方法被调用的次数，那如果我们想统计每个同名字(name)的在这个方法里面被调用了多少次呢？要调试这种其实也很简单，只要直接吧name直接传入count就可以了。\nfunction sayHello(name) &#123;\n  console.count(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)\nsayHello(&#39;William&#39;)\nsayHello(&#39;Kelly&#39;)\nsayHello(&#39;Indrek&#39;)\n‍(∩｀-´)⊃━☆ﾟ.*・｡ﾟ 巴拉巴拉！就是那么简单，我们就可以跟踪同名的参数在sayHello方法里面被调用的次数了！\n\n\nconsole.warn这个控台答应方法会输出一个警告信息。在你开发 APIs 或者开发工具的时候使用。console.warn这个方法在你需要警告用户的时候特别实用，例如漏掉了某个参数或者是让开发者知道你的 API/插件包的版本已经失效的时候使用。\nfunction sayHello(name) &#123;\n  if (!name) &#123;\n    console.warn(&#39;No name given&#39;)\n  &#125;\n&#125;\n\nsayHello()\n\n\n\n\n\n\n\n\n\n\n上面的代码检测了sayHello方法的参数是否漏传。如果name参数没有传，一个警告消息就会被打印到控制台中。让开发者可以思考问题出在哪里。\n\n\nconsole.table如果是我们在调试数组或者对象时，console.table是一个非常实用的调试方法来在控制台打印数据。数组里面的每一个元素都会在表格的行里面展示。以下是的水果名数组作为一个例子，如果我们把这个数组传入console.table，我们会看到一个含有这个水果名数据以表格的方式在控制台被打印出来。\nconst fruits &#x3D; [&#39;kiwi&#39;, &#39;banana&#39;, &#39;strawberry&#39;]\n\nconsole.table(fruits)\n\n\n\n\n\n\n\n\n\n\n我们一起来围观以下在控制台里面的展示效果\n\n看到了这个，你会不会灵光一闪想到 mmp，如果是一个很大的数组这种表格化的展示方式是多么的实用啊！对的！例如一个上百个数据的数组，我们使用这种调试方法来打印就很方便了。为了可以让我们用双眼见证这个说法的真实性，我们用代码说话吧！\nconst fruits &#x3D; [\n  &#39;Apple&#39;,\n  &#39;Watermelon&#39;,\n  &#39;Orange&#39;,\n  &#39;Pear&#39;,\n  &#39;Cherry&#39;,\n  &#39;Strawberry&#39;,\n  &#39;Nectarine&#39;,\n  &#39;Grape&#39;,\n  &#39;Mango&#39;,\n  &#39;Blueberry&#39;,\n  &#39;Pomegranate&#39;,\n  &#39;Carambola&#39;,\n  &#39;Plum&#39;,\n  &#39;Banana&#39;,\n  &#39;Raspberry&#39;,\n  &#39;Mandarin&#39;,\n  &#39;Jackfruit&#39;,\n  &#39;Papaya&#39;,\n  &#39;Kiwi&#39;,\n  &#39;Pineapple&#39;,\n  &#39;Lime&#39;,\n  &#39;Lemon&#39;,\n  &#39;Apricot&#39;,\n  &#39;Grapefruit&#39;,\n  &#39;Melon&#39;,\n  &#39;Coconut&#39;,\n  &#39;Avocado&#39;,\n  &#39;Peach&#39;,\n]\n我们使用console.table来打印一下上面这个大数组试试看吧。\n\n\n\n\n\n\n\n\n\n\n这种展示方式简直就是一目了然！这样妈妈再也不用担心我们调试数据的时候蒙圈了！՞༘✡ (๑ •̀ㅂ•́)و✧\n但是问题少年们，我们可是有梦想的工程师，如果是用来调试对象会是怎么样呢？来吧亲自动手丰衣足食，上代码！\nconst pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconsole.table(pets)\n注意了兄弟姐妹们，现在我们打印的是对象不是数组。在控制台的表格现在有两个键值name和type。之前是 0，1，2，3，4…\n这种方式可以替代普遍使用的直接用 log 打印对象数据，表格化的展示相对还是更加清晰的。问题少年再次发问，如果我们想多个对象一起打印呢？\nconst pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconst person &#x3D; &#123;\n  firstName: &#39;Indrek&#39;,\n  lastName: &#39;Lasn&#39;,\n&#125;\n\nconsole.table(pets, person)\n与预想一致，两个不同键值的对象被才分成两个表格在控制台打印出来了。\n如果我们不想分开两个表格打印，可否在一个表格显示呢？可以的！只要把两个对象放入一个数组就 ok 了。\nconst pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconst person &#x3D; &#123;\n  firstName: &#39;Indrek&#39;,\n  lastName: &#39;Lasn&#39;,\n&#125;\n\nconsole.table([pets, person])\n现在我们看到两个对象在一个表格里面展示了，键值被放在表格的头部了，因为键值在两个对象里面是不一样的。\n\nconsole.group当我们是在调试集合（sets）或者是关联数据（linked-data），可以使用嵌套组来优化你的控制台输出。使用console.group()来创建一个嵌套的组。\nconsole.log(&#39;This is the first level&#39;)\nconsole.group()\nconsole.log(&#39;Level 2&#39;)\nconsole.group()\nconsole.log(&#39;Level 3&#39;)\nconsole.warn(&#39;More of level 3&#39;)\nconsole.groupEnd()\nconsole.log(&#39;Back to level 2&#39;)\nconsole.groupEnd()\nconsole.log(&#39;Back to the first level&#39;)\n以下是一个嵌套的层级提示输出，在调试关联或者层级数据的时候特别实用。\n\n\n\n\n\n\n\n\n\n使用console.groupCollapsed()可以把所有嵌套的层级收起来，使用鼠标点击时可以展开查看。\n\n总结作为一名优秀的程序员，我们应该尽量在合适的场景或者合适的情况下运用在提供到给我的调试工具。所以这一篇文章提到的调试方式，我们应该在开发调试的过程中多合理运用，习惯后我们会发现调试起来会更加敏捷和高效。\n\n\n\n\n\n\n\n\n\n\n#通过技术悟出人生道理# 💭“人生无常，写的了一行是一行Code now or never” ～ 络·擎 NetEngine\n","slug":"2021-08-01-console-js-debug","date":"2021-08-01T12:20:12.000Z","categories_index":"调试","tags_index":"console","author_index":"络擎"},{"id":"ede919be316f4f79677d41980bcb9458","title":"谈谈敏捷开发","content":"\n谈谈敏捷开发\n小步快跑、敏捷开发\n真实的敏捷开发\n后注\n\n谈谈敏捷开发好久没有更新一下博客，最近有在尝试新的领域，可是一直没能积累下什么重要的知识、或者形成了什么重要的知识体系，就没能写下什么有意义的记录。可是很偶然的机会看到一个视频，里面讲述的，乔布斯谈论关于【流程与人才】的理解，基本可以总结为：苹果没有像 IBM 一样衰落，很大一部分原因是苹果没有执行像 IBM 一样严格的流程管理，使得有能力、有才华的人才能够不受大公司中条条框框的约束，充分发挥自己优势，最终促使苹果一次又一次的震惊世界。\n看到这个视频的时候，脑子中转过了好多好多的话语，没能按耐住自己的情绪，终究还是在 Twitter 中直接开喷。当然，喷的并不是乔布斯或者是他的言论，乔帮主在国内一波又一波媒体、开发者的吹捧下，早就已经走上了“冰封王座”。他的一生、创办苹果的风风雨雨，相信拜读过《乔布斯传》的人都能已经耳熟能详了，这里不再细说。总而言之，对于笔者自身，远远还达不到批判他的言辞的资格。\n\n\n\n\n\n\n\n\n\n废话说了那么多，结果原来只是像表达自己的弱小\n乔布斯确实过于优秀了，以至于越来越多的年轻人、创业者，都想要向他学习，见贤思齐焉。而学习最简单不过的方式，就是模仿。现在越来越容易听到那些晦涩难懂，可是由显得高端深奥的词汇。似乎在这种谈吐中更容易体现出自身对于产品思考的深入。\n“把握用户体验”，“重新定义 XX”，甚至 “打破流程”。“ IBM 之所以没落，就是因为他大公司中繁重的流程，约束的条条框框。” 所以我们要注重人才的才华展示，淡化流程。乔布斯所表达的观点，我们全盘接受。\n这样子的学习，简单至极。\n流程不再重要了。—— 这就是为什么现在产品经理跟开发工程师之间存在如此对立的原因。\n当然，其实乔布斯并非推动国内各大企业打破传统、废除流程的唯一功臣，另外一个更广为人知的，当然是数早已被广为人知的、被誉为中国第一产品经理的 —— 张小龙。如果你不知道这个人的话，你可以点击 (Ctrl+W) 组合键，快速查询这个人的相关信息。^_^ 得益于他的知名度以及微信的成功，“打破流程”、“简化流程”、“把握用户体验” 获得了一个更加接地气的名称 —— “小步快跑，敏捷开发”。\n对比于传统应用开发方式，敏捷开发在当前互联网形式上确为更加合适，毫不夸张的说，如果目前的产品开发还按照从前的开发形式，普通创业公司绝大部分会在产品推出之前，就将所有的开发经费耗光。这个时候没有任何知名度、也没有成型的产品，根本无从谈起融资以及上市。\n小步快跑、敏捷开发仔细考虑，其实这种开发方式在起步阶段是比较合理的。一周一个小版本，一个月一个大版本，对每次开发的新功能做好足够的调研以及打点统计，能够在不进行市场调查的前提上获取用户对于功能的喜好程度，从而在后续的开发中对特定的功能进行资源的倾斜，更大程度上去取悦用户。不得不说，微信在初期发展中，摸索到了摇一摇以及朋友圈这两大功能，然后持续在上面增加功能，优化体验，让用户真正的粘附在了微信生态上，也算是对小步快跑、敏捷开发的很好体现。微信的成功，也让更多的公司相信这种开发模式的正确性。\n我们来仔细捋一下这种开发模式的要点：\n\n小版本周期短\n小版本所携带新功能有针对性\n开发过程中对新功能做好打点统计\n产品上线后进行需求复盘，通过统计上报，得知用户对于新功能的喜好程度\n对下一新版本的开发计划进行评估\n\n其中，复盘步骤对于敏捷开发的模式尤为重要。并且不仅是产品经理，包括开发人员都需要参与到复盘的步骤中。对于一个开发人员，得知自己所开发功能受到用户的喜爱，自身对于下个版本的开发积极性也会有相应的提高。\n真实的敏捷开发可是，有多少公司又能很好地在版本迭代的过程中持续遵循上述的要点呢？不少的公司更多的只是喊着敏捷开发的口号，在更短的时间内，往产品中堆砌着更多的功能，从而导致开发人员在长时间内一直保持着难以接受的开发强度，最终导致人员的流失，项目的失败。\n笔者从自身的工作环境中，感受到两点：\n\n老板过多地参与进项目开发的细节中\n复盘步骤的缺失，或者复盘步骤对于产品经理们的负反馈缺失\n\n笔者对于第一点真是深有体会。其实老板们关注细节无可厚非，可是过多的参与到项目开发中，很容易导致到开发节奏混乱，无法保持小版本迭代的步骤中。因为版本开发迭代期间，并不会频繁地推送到老板处体验，只能在项目上线阶段提交给老板进行上线前的最后体验。正常情况下，老板应该对这个功能开发进行最后的确认，确认这个版本是否与开发初期所定下的发展方向一致，而不应该对细节进行过多的反馈，一来这个环节在开发过程中早就经过产品经理的把控；二来开发人员、乃至于产品经理，都很难对老板所提出的细节要求说不，容易导致项目进度一拖再拖。三来甚至会过度打击产品经理的积极性，最终导致产品经理不再创新，只会揣测老板的心思。\n即便是成功至此的微信，笔者感觉它都已经不再是认真遵循着敏捷开发的模式了，大家可以从微信的招聘口号中可以感受一下：\n\n\n\n\n\n\n\n\n\n做一个伟大的产品来取悦–自己。\n后注毕竟这片文章只是有感而发，想到哪写到哪，尚未经过深入思考。请读者们轻喷。\n","slug":"2020-03-22-about-agility-dev","date":"2020-03-22T04:07:43.000Z","categories_index":"开发技巧","tags_index":"agile","author_index":"络擎"},{"id":"1ac99b79c3bc762da636a204d3bcafcf","title":"前端技能训练: 重构一","content":"或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。\n有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Github上，也就有了[Artisan Stack] 计划。\n每个程序员都不可避免地是一个Coder，一个没有掌握好技能的Coder，算不上是手工艺人，但是是手工人。\n艺，需要有创造性的方法。\n前端技能训练: 重构一为什么重构?\n\n\n\n\n\n\n\n\n为了更好的代码。\n在经历了一年多的工作之后，我平时的主要工作就是修Bug。刚开始的时候觉得无聊，后来才发现修Bug需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的bug。修Bug，更多的是维护代码。还是前人总结的那句话对:\n\n\n\n\n\n\n\n\n\n写代码容易，读代码难。\n假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。\n如果你的代码已经上线，虽然是一坨坨的。但是不要轻易尝试，没有测试的重构。\n从前端开始的原因在于，写得一坨坨且最不容易测试的代码都在前端。\n让我们来看看我们的第一个训练，相当有挑战性。\n重构uMarkdown代码及setup请见github: [js-refactor]\n代码说明uMarkdown是一个用于将Markdown转化为HTML的库。代码看上去就像一个很典型的过程代码:\n/* code */\nwhile ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;\n  str = str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);\n&#125;\n\n/* headlines */\nwhile ((stra = micromarkdown.regexobject.headline.exec(str)) !== null) &#123;\n  count = stra[1].length;\n  str = str.replace(stra[0], &#39;&lt;h&#39; + count + &#39;&gt;&#39; + stra[2] + &#39;&lt;/h&#39; + count + &#39;&gt;&#39; + &#39;\\n&#39;);\n&#125;\n\n/* mail */\nwhile ((stra = micromarkdown.regexobject.mail.exec(str)) !== null) &#123;\n  str = str.replace(stra[0], &#39;&lt;a href=&quot;mailto:&#39; + stra[1] + &#39;&quot;&gt;&#39; + stra[1] + &#39;&lt;/a&gt;&#39;);\n&#125;\n\n选这个做重构的开始，不仅仅是因为之前在写[EchoesWorks]的时候进行了很多的重构。而且它更适合于，重构到设计模式的理论。让我们在重构完之后，给作者进行pull request吧。\nMarkdown的解析过程，有点类似于Pipe and Filters模式(架构模式)。\nFilter即我们在代码中看到的正规表达式集:\nregexobject: &#123;\n    headline: /^(\\#&#123;1,6&#125;)([^\\#\\n]+)$/m,\n    code: /\\s\\`\\`\\`\\n?([^`]+)\\`\\`\\`/g\n\n他会匹配对应的Markdown类型，随后进行替换和处理。而``str```，就是管理口的输入和输出。\n接着，我们就可以对其进行简单的重构。\n重构(ps: 推荐用WebStrom来做重构，自带重构功能)\n作为一个示例，我们先提出codeHandler方法，即将上面的\n/* code */\nwhile ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;\n  str = str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);\n&#125;\n\n提取方法成\ncodeFilter: function (str, stra) &#123;\n    return str.replace(stra[0], &#39;&lt;code&gt;\\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\\n&#39;);\n  &#125;,\n\nwhile语句就成了\n  while ((stra = regexobject.code.exec(str)) !== null) &#123;\n        str = this.codeFilter(str, stra);\n    &#125;\n\n然后，运行所有的测试。\ngrunt test\n\n同理我们就可以mail、headline等方法进行重构。接着就会变成类似于下面的代码，\n  /* code */\n  while ((execStr = regExpObject.code.exec(str)) !== null) &#123;\n    str = codeHandler(str, execStr);\n  &#125;\n\n  /* headlines */\n  while ((execStr = regExpObject.headline.exec(str)) !== null) &#123;\n    str = headlineHandler(str, execStr);\n  &#125;\n\n  /* lists */\n  while ((execStr = regExpObject.lists.exec(str)) !== null) &#123;\n    str = listHandler(str, execStr);\n  &#125;\n\n  /* tables */\n  while ((execStr = regExpObject.tables.exec(str)) !== null) &#123;\n    str = tableHandler(str, execStr, strict);\n  &#125;\n\n然后你也看到了，上面有一堆重复的代码，接着让我们用JavaScript的奇技浮巧，即apply方法，把上面的重复代码变成。\n    [&#39;code&#39;, &#39;headline&#39;, &#39;lists&#39;, &#39;tables&#39;, &#39;links&#39;, &#39;mail&#39;, &#39;url&#39;, &#39;smlinks&#39;, &#39;hr&#39;].forEach(function (type) &#123;\n        while ((stra = regexobject[type].exec(str)) !== null) &#123;\n            str = that[(type + &#39;Handler&#39;)].apply(that, [stra, str, strict]);\n        &#125;\n    &#125;);\n\n进行测试，blabla，都是过的。\n Markdown\n   ✓ should parse h1~h3\n   ✓ should parse link\n   ✓ should special link\n   ✓ should parse font style\n   ✓ should parse code\n   ✓ should parse ul list\n   ✓ should parse ul table\n   ✓ should return correctly class name\n\n这样，我们就完成第一个重构训练了~~。\n","slug":"2020-01-18-web-refactoring-1","date":"2020-01-18T05:08:43.000Z","categories_index":"前端优化","tags_index":"css,javaScript,html,vue.js,elementui","author_index":"络擎"},{"id":"07774303a2792621f2ed55ab588c03e1","title":"药企云GIT使用规范 v1.0 - git操作场景与敏捷迭代的介绍","content":"药企云GIT使用规范 v1.0\n\n\n\n\n\n\n\n\nGit usage standards version 1.0\n介绍每一个优秀的开发团队都会用到一套代码管理工具。根据目前最流行的代码管理工具非GIT莫属。不例外药企云团队绝对使用最优秀的规范和工具。根据药企云项目的具体部署环境，开发规范，我们有一套自己的规范和标准的GIT使用方式。\n敏捷迭代如果要弄明白药企云的GIT使用，首先要了解清楚药企云项目的迭代流程\n\n什么是敏捷迭代？\n\n\n\n\n\n\n\n\n敏捷迭代就是把开发周期缩短到1-4周。小步快跑的迅速迭代交付功能上线。敏捷迭代的流程分别如下：\n\n确定需求 - 与老板和市场确认需求和流程\n需求评审 - 与开发同频需求里面的功能点和业务流程\n技术反讲 - 开发与产品同频需求，保证理解没有误区，开发也需要评估开发难度，和开发时间\n研发周期 - 开发人员开始投入研发直接到功能和需求开发完毕，转交给测试，在测试环境提测\n测试周期 - 测试和开发人员开始排除困难，修复所有在开发过程产生的bug\n验收/预发布周期 - 当测试在测试环境把所有bug排除掉后，当前迭代版本就会发布到预发布环境让市场和产品验收功能\n发布正式 - 当验收通过后，当前迭代版本就可以部署上先到正式环境\n正式回归测试 - 发布上线后，就会有正式回归测试，最有一道防线，保证系统加入了所有新功能都没有问题\n迭代总结 - 每一期迭代结束后都总结这次迭代遇到的问题，持续优化，提高效率\n\n开发环境\n开发环境和git分支是一一对应的。\n\n版本开发环境 - dev/x.x.x 版本分支\n测试/联调环境 - qa/qa1，qa/qa2，qa/qa3 3个测试环境和分支\n预发布/验收环境 - release分支\n正式线上环境 - master分支\n\nGit操作场景这里我们按照实际开发流程和实际场景来解说怎么使用git\n\n开启新版本迭代\n操作步骤\n从master分支创建一个版本分支\n创建版本分支后根据不同的端做不同的处理\n前端：需要把接口版本好改为当前迭代的接口版本号\n后端：先创建对应当前迭代的接口版本好控制器和路由，然后合并就版本的控制器更变。\n\n\n\n开发周期版本提测/bug修复提测\n提验收必须从版本分支合并qa分支\n\n操作步骤\n版本分支合并(merge)对应的测试分支(qa)\n版本分支代码合并后对应的qa环境会自动部署代码到对应的环境服务器上\n\n开发周期版本提验收/bug修复提验收 提测必须从版本分支合并验收(release)分支\n操作步骤\n版本分支合并(merge)验收分支(release)\n版本分支代码合并release环境会自动部署代码到环境服务器上\n\n\n如果是修复bug，就要先合并对应的qa分支后合并release分支。\n\n使用前版本修复上线流程\n操作步骤\n使用当前正式所在的版本找到对应的版本分支作为修复分支\n修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复\n测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复\n验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试\n在线上回归通过后，就可以把修复分支分别合并到当前迭代版本分支\n\n紧急修复上线流程\n如果当前bug是很严重的，影响到用户使用的才需要使用紧急修复上线流程\n紧急修复上线必须先创建紧急修复(hotfix)分支\n\n操作步骤\n首先使用master分支创建紧急修复分支(hotfix/xxxx) - 使用hotfix前缀\n修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复\n测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复\n验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试\n在线上回归通过后，就可以把修复分支分别合并到前版本分支和当前迭代版本分支\n最后在本地(local)和远程(origin)删除修复分支\n\n后端代码部署操作流程\n因为后端把不同模块都独立成一个composer包，所以git合并和部署流程跟前端是有区别的。这里分开来说明流程。\n\n操作步骤\n首先用每个模块的版本分支合并对应的qa分支\n然后切换到Foundation应用，然后推送对应的环境发起环境部署\n\n\n如果涉及多个模块需要同时发布，那就先把所有模块先合并好环境分支，然后再推Foundation。因为Foundation的某个环境启动了部署，必须部署完后才能发起下一次部署。\n\n","slug":"2019-03-26-yqy-git-standard1.0","date":"2019-03-26T07:07:43.000Z","categories_index":"","tags_index":"git","author_index":"络擎"}]